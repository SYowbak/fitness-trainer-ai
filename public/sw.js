const CACHE_NAME = 'fitness-trainer-ai-v3';
const STATIC_CACHE = 'fitness-static-v3';
const DYNAMIC_CACHE = 'fitness-dynamic-v3';
const RUNTIME_CACHE = 'fitness-runtime-v3';

// –ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ä–æ–±–æ—Ç–∏
const CORE_FILES = [
  '/',
  '/manifest.json',
  '/index.html',
  // –Ü–∫–æ–Ω–∫–∏ –¥–ª—è PWA
  '/icon-192.png',
  '/icon-512.png',
  '/favicon.png'
];

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –∫–µ—à—É (50MB)
const MAX_CACHE_SIZE = 50 * 1024 * 1024;
const MAX_CACHE_ENTRIES = 100;

// –§–∞–π–ª–∏ —è–∫—ñ –∫–µ—à—É—é—Ç—å—Å—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ
const CACHE_STRATEGIES = {
  // –°—Ç–∞—Ç–∏—á–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏ - –∫–µ—à —Å–ø–æ—á–∞—Ç–∫—É
  static: ['.js', '.css', '.png', '.jpg', '.jpeg', '.svg', '.woff', '.woff2'],
  // API –∑–∞–ø–∏—Ç–∏ - –º–µ—Ä–µ–∂–∞ —Å–ø–æ—á–∞—Ç–∫—É, –ø–æ—Ç—ñ–º –∫–µ—à
  api: ['firebase', 'googleapis', 'generativelanguage']
};

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Service Worker
self.addEventListener('install', (event) => {
  console.log('üîß Service Worker: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è v2...');
  event.waitUntil(
    caches.open(STATIC_CACHE)
      .then((cache) => {
        console.log('üì¶ Service Worker: –ö–µ—à—É–≤–∞–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...');
        return cache.addAll(CORE_FILES);
      })
      .then(() => {
        console.log('‚úÖ Service Worker: –ö—Ä–∏—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –∑–∞–∫–µ—à–æ–≤–∞–Ω–æ');
      })
      .catch((error) => {
        console.error('‚ùå Service Worker: –ü–æ–º–∏–ª–∫–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è:', error);
      })
  );
  // –ü—Ä–∏–º—É—Å–æ–≤–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π service worker
  self.skipWaiting();
});

// –ê–∫—Ç–∏–≤–∞—Ü—ñ—è Service Worker
self.addEventListener('activate', (event) => {
  console.log('‚úÖ Service Worker: –ê–∫—Ç–∏–≤–∞—Ü—ñ—è v2...');
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∫–µ—à—ñ, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –≤–µ—Ä—Å—ñ—ó
          if (cacheName !== STATIC_CACHE && 
              cacheName !== DYNAMIC_CACHE && 
              cacheName !== RUNTIME_CACHE) {
            console.log('üóëÔ∏è Service Worker: –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à—É:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  // –ö–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –≤—Å—ñ –∫–ª—ñ—î–Ω—Ç–∏ –æ–¥—Ä–∞–∑—É
  self.clients.claim();
});

// –§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –ø—Ä–∏ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—ñ –ª—ñ–º—ñ—Ç—É
async function cleanupCache(cacheName) {
  const cache = await caches.open(cacheName);
  const keys = await cache.keys();
  
  if (keys.length > MAX_CACHE_ENTRIES) {
    console.log(`üßπ –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É ${cacheName}: ${keys.length} -> ${MAX_CACHE_ENTRIES}`);
    const keysToDelete = keys.slice(0, keys.length - MAX_CACHE_ENTRIES);
    await Promise.all(keysToDelete.map(key => cache.delete(key)));
  }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É –∫–µ—à—É
async function getCacheSize(cacheName) {
  const cache = await caches.open(cacheName);
  const keys = await cache.keys();
  let totalSize = 0;
  
  for (const key of keys) {
    try {
      const response = await cache.match(key);
      if (response) {
        const blob = await response.blob();
        totalSize += blob.size;
      }
    } catch (error) {
      // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ä–æ–∑–º—ñ—Ä—É
    }
  }
  
  return totalSize;
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
function isStaticResource(url) {
  return CACHE_STRATEGIES.static.some(ext => url.includes(ext));
}

function isAPIRequest(url) {
  return CACHE_STRATEGIES.api.some(api => url.includes(api));
}

// –°—Ç—Ä–∞—Ç–µ–≥—ñ—è "Cache First" –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤
async function cacheFirst(request) {
  const cached = await caches.match(request);
  if (cached) {
    console.log('üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –∫–µ—à—É:', request.url);
    return cached;
  }
  
  try {
    const response = await fetch(request);
    if (response.status === 200) {
      const cache = await caches.open(STATIC_CACHE);
      await cache.put(request, response.clone());
      // –û—á–∏—â—É—î–º–æ –∫–µ—à –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
      await cleanupCache(STATIC_CACHE);
    }
    return response;
  } catch (error) {
    console.log('‚ùå –û—Ñ–ª–∞–π–Ω, —Ñ–∞–π–ª –Ω–µ –≤ –∫–µ—à—ñ:', request.url);
    return new Response('–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º', { status: 503 });
  }
}

// –°—Ç—Ä–∞—Ç–µ–≥—ñ—è "Network First" –¥–ª—è API –∑–∞–ø–∏—Ç—ñ–≤
async function networkFirst(request) {
  try {
    const response = await fetch(request);
    if (response.status === 200) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, response.clone());
    }
    return response;
  } catch (error) {
    console.log('üîÑ –ú–µ—Ä–µ–∂–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —à—É–∫–∞—î–º–æ –≤ –∫–µ—à—ñ:', request.url);
    const cached = await caches.match(request);
    if (cached) {
      return cached;
    }
    return new Response('–î–∞–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –æ—Ñ–ª–∞–π–Ω', { 
      status: 503,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ error: '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º', offline: true })
    });
  }
}

// –ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = request.url;

  // –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ-GET –∑–∞–ø–∏—Ç–∏
  if (request.method !== 'GET') {
    return;
  }

  event.respondWith(
    (async () => {
      // –°—Ç–∞—Ç–∏—á–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏ - Cache First
      if (isStaticResource(url)) {
        return cacheFirst(request);
      }
      
      // API –∑–∞–ø–∏—Ç–∏ - Network First
      if (isAPIRequest(url)) {
        return networkFirst(request);
      }
      
      // HTML —Å—Ç–æ—Ä—ñ–Ω–∫–∏ - –ø–æ–∫—Ä–∞—â–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –±–µ–∑ –±–ª–∏–º–∞–Ω–Ω—è
      if (request.destination === 'document') {
        try {
          // –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∞–∑—É—î–º–æ –∫–µ—à –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
          const cached = await caches.match('/');
          if (cached) {
            // –ü–∞—Ä–∞–ª–µ–ª—å–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –≤ —Ñ–æ–Ω—ñ
            fetch(request).then(response => {
              if (response.status === 200) {
                caches.open(STATIC_CACHE).then(cache => {
                  cache.put(request, response.clone());
                });
              }
            }).catch(() => {
              // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            });
            return cached;
          }
          
          // –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–µ—à—É - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ –º–µ—Ä–µ–∂—ñ
          const response = await fetch(request);
          if (response.status === 200) {
            const cache = await caches.open(STATIC_CACHE);
            cache.put(request, response.clone());
          }
          return response;
        } catch (error) {
          console.log('üìÑ –ü–æ–∫–∞–∑—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É');
          const cached = await caches.match('/');
          return cached || new Response('–î–æ–¥–∞—Ç–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –æ—Ñ–ª–∞–π–Ω', { 
            status: 503,
            headers: { 'Content-Type': 'text/html' }
          });
        }
      }
      
      // –Ü–Ω—à—ñ –∑–∞–ø–∏—Ç–∏ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞
      return fetch(request);
    })()
  );
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –¥–æ–¥–∞—Ç–∫—É
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  if (event.data && event.data.type === 'GET_VERSION') {
    event.ports[0].postMessage({
      type: 'VERSION_INFO',
      version: CACHE_NAME
    });
  }
});

// –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
function notifyClients(message) {
  self.clients.matchAll().then(clients => {
    clients.forEach(client => {
      client.postMessage(message);
    });
  });
}

// –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ
self.addEventListener('install', (event) => {
  // ... —ñ—Å–Ω—É—é—á–∏–π –∫–æ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ...
  
  // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –Ω–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  notifyClients({
    type: 'UPDATE_AVAILABLE',
    version: CACHE_NAME
  });
});

// –§–æ–Ω–æ–≤—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
self.addEventListener('sync', (event) => {
  console.log('üîÑ Service Worker: –§–æ–Ω–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è:', event.tag);
  
  if (event.tag === 'background-sync') {
    event.waitUntil(
      syncOfflineData()
    );
  }
});

// –§—É–Ω–∫—Ü—ñ—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–∏—Ö –≤ —Ñ–æ–Ω—ñ
async function syncOfflineData() {
  try {
    console.log('üì° –ü–æ—á–∞—Ç–æ–∫ —Ñ–æ–Ω–æ–≤–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö...');
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ localStorage
    const offlineData = localStorage.getItem('fitness-offline-queue');
    if (!offlineData) {
      console.log('‚úÖ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó');
      return;
    }
    
    const queue = JSON.parse(offlineData);
    if (queue.length === 0) {
      console.log('‚úÖ –ß–µ—Ä–≥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ—Ä–æ–∂–Ω—è');
      return;
    }
    
    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
    notifyClients({
      type: 'SYNC_STARTED',
      count: queue.length
    });
    
    console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ ${queue.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ —Ñ–æ–Ω—ñ`);
    
    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (—Ä–µ–∞–ª—å–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±—É–¥–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É)
    notifyClients({
      type: 'SYNC_NEEDED',
      queue: queue
    });
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ–Ω–æ–≤–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
    notifyClients({
      type: 'SYNC_ERROR',
      error: error.message
    });
  }
}

// Push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ)
self.addEventListener('push', (event) => {
  console.log('üîî Service Worker: Push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ');
  
  const options = {
    body: event.data ? event.data.text() : '–ß–∞—Å –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!',
    icon: '/icon-192.png',
    badge: '/icon-72.png',
    vibrate: [200, 100, 200],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1
    },
    actions: [
      {
        action: 'explore',
        title: '–ü–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è',
        icon: '/icon-192.png'
      },
      {
        action: 'close',
        title: '–ó–∞–∫—Ä–∏—Ç–∏',
        icon: '/icon-192.png'
      }
    ]
  };

  event.waitUntil(
    self.registration.showNotification('Fitness Trainer AI', options)
  );
});
