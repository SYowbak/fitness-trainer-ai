const CACHE_NAME = 'fitness-trainer-ai-v1';
const urlsToCache = [
  '/',
  '/static/js/bundle.js',
  '/static/css/main.css',
  '/manifest.json',
  '/sounds/',
  // –î–æ–¥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏
  '/?tab=workout',
  '/?tab=profile',
  '/?tab=progress'
];

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Service Worker
self.addEventListener('install', (event) => {
  console.log('üîß Service Worker: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è...');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('üì¶ Service Worker: –ö–µ—à—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤...');
        return cache.addAll(urlsToCache.map(url => new Request(url, {cache: 'reload'})));
      })
      .catch((error) => {
        console.error('‚ùå Service Worker: –ü–æ–º–∏–ª–∫–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è:', error);
      })
  );
  // –ü—Ä–∏–º—É—Å–æ–≤–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π service worker
  self.skipWaiting();
});

// –ê–∫—Ç–∏–≤–∞—Ü—ñ—è Service Worker
self.addEventListener('activate', (event) => {
  console.log('‚úÖ Service Worker: –ê–∫—Ç–∏–≤–∞—Ü—ñ—è...');
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('üóëÔ∏è Service Worker: –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à—É:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  // –ö–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –≤—Å—ñ –∫–ª—ñ—î–Ω—Ç–∏ –æ–¥—Ä–∞–∑—É
  self.clients.claim();
});

// –ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
self.addEventListener('fetch', (event) => {
  // –Ü–≥–Ω–æ—Ä—É—î–º–æ –∑–∞–ø–∏—Ç–∏ –¥–æ Firebase —Ç–∞ —ñ–Ω—à–∏—Ö API
  if (event.request.url.includes('firebase') || 
      event.request.url.includes('googleapis') ||
      event.request.url.includes('generativelanguage') ||
      event.request.method !== 'GET') {
    return;
  }

  event.respondWith(
    caches.match(event.request)
      .then((response) => {
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—É –≤–µ—Ä—Å—ñ—é —è–∫—â–æ —î
        if (response) {
          console.log('üìã Service Worker: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –∫–µ—à—É:', event.request.url);
          return response;
        }

        // –Ü–Ω–∞–∫—à–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ –º–µ—Ä–µ–∂—ñ
        return fetch(event.request).then((response) => {
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤–∞–ª—ñ–¥–Ω–∞
          if (!response || response.status !== 200 || response.type !== 'basic') {
            return response;
          }

          // –ö–ª–æ–Ω—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
          const responseToCache = response.clone();

          caches.open(CACHE_NAME)
            .then((cache) => {
              cache.put(event.request, responseToCache);
            });

          return response;
        }).catch(() => {
          // –Ø–∫—â–æ –æ—Ñ–ª–∞–π–Ω —ñ –Ω–µ–º–∞—î –≤ –∫–µ—à—ñ, –ø–æ–∫–∞–∑—É—î–º–æ –±–∞–∑–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
          if (event.request.destination === 'document') {
            return caches.match('/');
          }
        });
      })
  );
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –¥–æ–¥–∞—Ç–∫—É
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// –§–æ–Ω–æ–≤—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó (–¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ)
self.addEventListener('sync', (event) => {
  console.log('üîÑ Service Worker: –§–æ–Ω–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è:', event.tag);
  
  if (event.tag === 'background-sync') {
    event.waitUntil(
      // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
      console.log('üì° –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –≤ —Ñ–æ–Ω—ñ...')
    );
  }
});

// Push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ)
self.addEventListener('push', (event) => {
  console.log('üîî Service Worker: Push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ');
  
  const options = {
    body: event.data ? event.data.text() : '–ß–∞—Å –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!',
    icon: '/icon-192.png',
    badge: '/icon-72.png',
    vibrate: [200, 100, 200],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1
    },
    actions: [
      {
        action: 'explore',
        title: '–ü–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è',
        icon: '/icon-192.png'
      },
      {
        action: 'close',
        title: '–ó–∞–∫—Ä–∏—Ç–∏',
        icon: '/icon-192.png'
      }
    ]
  };

  event.waitUntil(
    self.registration.showNotification('Fitness Trainer AI', options)
  );
});
