import { useState, useEffect } from 'react';
import { 
  doc, 
  setDoc, 
  getDoc, 
  collection,
  query,
  where,
  getDocs,
  orderBy
} from 'firebase/firestore';
import { db } from '../config/firebase';
import { UserProfile, WorkoutLog, DailyWorkoutPlan } from '../types';
import { useAuth } from './useAuth';

// –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è undefined
function removeUndefined(obj: any): any {
  if (obj === undefined) {
    return null; // Firebase –Ω–µ –¥–æ–∑–≤–æ–ª—è—î undefined, –∑–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ null
  } else if (Array.isArray(obj)) {
    return obj.map(removeUndefined);
  } else if (obj && typeof obj === 'object') {
    const newObj: { [key: string]: any } = {};
    for (const key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        const value = obj[key];
        newObj[key] = removeUndefined(value);
      }
    }
    return newObj;
  }
  return obj;
}

// –û—á–∏—â–µ–Ω–Ω—è –ø–ª–∞–Ω—É –¥–ª—è Firestore: –∑–∞–ª–∏—à–∞—î —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–ª—è —É –≤–ø—Ä–∞–≤–∞—Ö
function cleanWorkoutPlanForFirestore(plan: DailyWorkoutPlan[]): DailyWorkoutPlan[] {
  return plan.map(day => ({
    ...removeUndefined({
      ...day,
      exercises: day.exercises.map(ex => {
        const cleanedExercise = {
          name: ex.name,
          description: ex.description,
          sets: ex.sets,
          reps: ex.reps,
          rest: ex.rest, // ex.rest –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ä—è–¥–∫–æ–º –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É Exercise
          videoSearchQuery: ex.videoSearchQuery ?? null,
          targetWeight: ex.targetWeight ?? null,
          targetReps: ex.targetReps ?? null,
          recommendation: ex.recommendation ?? null,
          isCompletedDuringSession: ex.isCompletedDuringSession ?? false, // –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ —Ü–µ boolean
          sessionLoggedSets: ex.sessionLoggedSets ?? [], // –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ —Ü–µ –º–∞—Å–∏–≤
          sessionSuccess: ex.sessionSuccess ?? false, // –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ —Ü–µ boolean –∞–±–æ null
          isSkipped: ex.isSkipped ?? false, // –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É isSkipped
          notes: ex.notes ?? null,
        };
        return removeUndefined(cleanedExercise);
      })
    })
  }));
}

export const useUserData = () => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [workoutLogs, setWorkoutLogs] = useState<WorkoutLog[]>([]);
  const [workoutPlan, setWorkoutPlan] = useState<DailyWorkoutPlan[] | null>(null);
  const [justSaved, setJustSaved] = useState(false);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
  useEffect(() => {
    const loadProfile = async () => {
      if (!user) {
        setProfile(null);
        setLoading(false);
        return;
      }

      // –Ø–∫—â–æ –º–∏ —â–æ–π–Ω–æ –∑–±–µ—Ä–µ–≥–ª–∏ –ø—Ä–æ—Ñ—ñ–ª—å, –Ω–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –π–æ–≥–æ
      if (justSaved) {
        console.log('üü° [useUserData.loadProfile] –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è - –ø—Ä–æ—Ñ—ñ–ª—å —â–æ–π–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
        setJustSaved(false);
        setLoading(false);
        return;
      }

      try {
        const docRef = doc(db, 'users', user.uid);
        const docSnap = await getDoc(docRef);
        
        if (docSnap.exists()) {
          const loadedProfile = docSnap.data() as UserProfile;
          console.log('üîÑ [useUserData.loadProfile] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å –∑ Firebase:', loadedProfile.healthProfile?.conditions?.length || 0, '—É–º–æ–≤');
          setProfile(loadedProfile);
        } else {
          console.log('üîÑ [useUserData.loadProfile] –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Firebase');
        }
      } catch (error) {
        console.error('Error loading profile:', error);
      } finally {
        setLoading(false);
      }
    };

    loadProfile();
  }, [user, justSaved]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
  useEffect(() => {
    const loadWorkoutLogs = async () => {
      if (!user) {
        setWorkoutLogs([]);
        return;
      }

      try {
        const logsRef = collection(db, 'workoutLogs');
        const q = query(
          logsRef,
          where('userId', '==', user.uid),
          orderBy('date', 'desc')
        );
        
        const querySnapshot = await getDocs(q);
        const logs = querySnapshot.docs.map(doc => {
          const data = doc.data() as WorkoutLog;
          // –ü–µ—Ä–µ–∫–æ—é—î–º–æ—Å—è, —â–æ adaptiveWorkoutPlan.adaptations –∑–∞–≤–∂–¥–∏ —î –º–∞—Å–∏–≤–æ–º
          if (data.adaptiveWorkoutPlan) {
            return {
              ...data,
              adaptiveWorkoutPlan: {
                ...data.adaptiveWorkoutPlan,
                adaptations: data.adaptiveWorkoutPlan.adaptations || []
              }
            };
          }
          return data;
        });
        setWorkoutLogs(logs);
      } catch (error) {
        console.error('Error loading workout logs:', error);
      }
    };

    loadWorkoutLogs();
  }, [user]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
  useEffect(() => {
    const loadWorkoutPlan = async () => {
      if (!user) {
        setWorkoutPlan(null);
        return;
      }
      try {
        const docRef = doc(db, 'workoutPlans', user.uid);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
          setWorkoutPlan(docSnap.data().plan as DailyWorkoutPlan[]);
        }
      } catch (error) {
        console.error('Error loading workout plan:', error);
      }
    };

    loadWorkoutPlan();
  }, [user]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è undefined –∑–Ω–∞—á–µ–Ω—å
  const cleanUndefinedValues = (obj: any): any => {
    if (obj === null || obj === undefined) return null;
    if (obj instanceof Date) return obj;
    if (Array.isArray(obj)) return obj.map(cleanUndefinedValues);
    if (typeof obj === 'object') {
      const cleaned: any = {};
      for (const [key, value] of Object.entries(obj)) {
        if (value !== undefined) {
          cleaned[key] = cleanUndefinedValues(value);
        }
      }
      return cleaned;
    }
    return obj;
  };

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
  const saveProfile = async (profile: UserProfile) => {
    console.log('üîµ [useUserData.saveProfile] –ü–æ—á–∞—Ç–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', profile.healthProfile?.conditions?.length || 0, '—É–º–æ–≤');
    
    if (!user) throw new Error('User not authenticated');

    try {
      console.log('üîÑ [useUserData.saveProfile] –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Firestore');
      const cleanedProfile = cleanUndefinedValues(profile);
      console.log('üßπ [useUserData.saveProfile] –û—á–∏—â–µ–Ω–æ undefined –∑–Ω–∞—á–µ–Ω–Ω—è');
      await setDoc(doc(db, 'users', user.uid), cleanedProfile);
      console.log('üü° [useUserData.saveProfile] –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω setProfile');
      setProfile(profile);
      console.log('üü° [useUserData.saveProfile] –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–ª–∞–≥ justSaved');
      setJustSaved(true);
      console.log('‚úÖ [useUserData.saveProfile] –ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå [useUserData.saveProfile] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ:', error);
      throw error;
    }
  };

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
  const saveWorkoutLog = async (log: WorkoutLog): Promise<WorkoutLog> => {
    console.log('[saveWorkoutLog] –ü–æ—á–∞—Ç–æ–∫. –û—Ç—Ä–∏–º–∞–Ω–æ –ª–æ–≥:', log);
    if (!user) {
      console.error('[saveWorkoutLog] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π.');
      throw new Error('User not authenticated');
    }

    try {
      let finalLog: WorkoutLog;
      let logRef;

      if (log.id) {
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –ª–æ–≥—É
        console.log(`[saveWorkoutLog] –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –ª–æ–≥ –∑ ID: ${log.id}`);
        logRef = doc(db, 'workoutLogs', log.id);
        finalLog = { ...log, userId: user.uid };
      } else {
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ª–æ–≥—É
        const newLogId = `${user.uid}_${Date.now()}`;
        console.log(`[saveWorkoutLog] –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ª–æ–≥ –∑ ID: ${newLogId}`);
        logRef = doc(db, 'workoutLogs', newLogId);
        finalLog = { ...log, id: newLogId, userId: user.uid };
      }
      
      // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è Firestore
      const dateForFirestore = finalLog.date instanceof Date
        ? {
            seconds: Math.floor(finalLog.date.getTime() / 1000),
            nanoseconds: (finalLog.date.getTime() % 1000) * 1e6
          }
        : finalLog.date;

      const cleanedLog = removeUndefined({ ...finalLog, date: dateForFirestore });
      
      await setDoc(logRef, cleanedLog, { merge: true }); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ merge: true –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      setWorkoutLogs(prevLogs => {
        const existingIndex = prevLogs.findIndex(log => log.id === finalLog.id);
        if (existingIndex >= 0) {
          // –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –ª–æ–≥
          const updatedLogs = [...prevLogs];
          updatedLogs[existingIndex] = cleanedLog as WorkoutLog;
          return updatedLogs;
        } else {
          // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –ª–æ–≥ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —Å–ø–∏—Å–∫—É
          return [cleanedLog as WorkoutLog, ...prevLogs];
        }
      });
      
      return cleanedLog as WorkoutLog;

    } catch (error) {
      console.error('[saveWorkoutLog] –î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
      throw error;
    }
  };

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
  const saveWorkoutPlan = async (plan: DailyWorkoutPlan[] | null, forceRefetch: boolean = false): Promise<DailyWorkoutPlan[] | undefined> => {
    if (!user) throw new Error('User not authenticated');
    
    if (plan) {
      try {
        const cleanedPlan = cleanWorkoutPlanForFirestore(plan);
        const docRef = doc(db, 'workoutPlans', user.uid);
        await setDoc(docRef, { plan: cleanedPlan });
        setWorkoutPlan(cleanedPlan);
        return cleanedPlan;
      } catch (error) {
        console.error('Error saving workout plan:', error);
        throw error;
      }
    }

    if (forceRefetch) {
      try {
        const docRef = doc(db, 'workoutPlans', user.uid);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
          const fetchedPlan = docSnap.data().plan as DailyWorkoutPlan[];
          setWorkoutPlan(fetchedPlan);
          return fetchedPlan;
        }
      } catch (error) {
        console.error('Error refetching workout plan:', error);
      }
    }
  };

  return {
    profile,
    workoutLogs,
    workoutPlan,
    loading,
    saveProfile,
    saveWorkoutLog,
    saveWorkoutPlan
  };
}; 