import { GoogleGenerativeAI } from "@google/generative-ai";
import { UserProfile, DailyWorkoutPlan, WorkoutLog, Exercise, WellnessCheck, AdaptiveWorkoutPlan, WellnessRecommendation } from '../types';
import { v4 as uuidv4 } from 'uuid';
import { 
  getUkrainianGoal, 
  getUkrainianBodyType, 
  getUkrainianGender, 
  getUkrainianMuscleGroup, 
  getUkrainianExperienceLevel,
  UI_TEXT, 
  GEMINI_MODELS
} from '../constants';
import { withQuotaManagement, shouldEnableAIFeature, quotaManager, getSmartModel } from '../utils/apiQuotaManager';
import { addBaseRecommendations, validateWorkoutSafety } from './injuryValidationService';
import { HealthProfileService } from './healthProfileService';
import { generateNewAdaptiveWorkout } from './newAdaptiveWorkout';

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –≤–∞—Ä—ñ–∞—Ü—ñ–π –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É
const getUkrainianVariationType = (variationType: string): string => {
  switch (variationType) {
    case 'progression': return UI_TEXT.progression;
    case 'regression': return UI_TEXT.regression;
    case 'alternative': return UI_TEXT.alternative;
    default: return UI_TEXT.alternative;
  }
};

const getUkrainianDifficulty = (difficulty: string): string => {
  switch (difficulty) {
    case 'beginner': return UI_TEXT.beginner;
    case 'intermediate': return UI_TEXT.intermediate;
    case 'advanced': return UI_TEXT.advanced;
    default: return UI_TEXT.intermediate;
  }
};

export const getApiKey = (): string | null => {
  return (import.meta as any).env.VITE_API_KEY || null;
};

let ai: GoogleGenerativeAI | null = null;
const apiKey = getApiKey();
if (apiKey) {
  try {
      ai = new GoogleGenerativeAI(apiKey);
  } catch (e) {
      console.error("Failed to initialize GoogleGenerativeAI instance:", e);
      ai = null; 
  }
}

const constructPlanPrompt = (profile: UserProfile): string => {
  const { gender, bodyType, goal, trainingFrequency, name, targetMuscleGroups, height, weight, age, experienceLevel, healthProfile } = profile;
  
  const userNamePart = name ? `–¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —ñ–º'—è ${name}` : '';
  const genderText = getUkrainianGender(gender);
  const bodyTypeText = getUkrainianBodyType(bodyType);
  const goalText = getUkrainianGoal(goal);
  const experienceLevelText = getUkrainianExperienceLevel(experienceLevel);
  const targetMuscleGroupsText = targetMuscleGroups.length > 0 
    ? `–∑ –æ—Å–æ–±–ª–∏–≤–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ ${targetMuscleGroups.map(group => getUkrainianMuscleGroup(group)).join(', ')}`
    : "—ñ–∑ –∑–∞–≥–∞–ª—å–Ω–∏–º —Ä–æ–∑–≤–∏—Ç–∫–æ–º –≤—Å—ñ—Ö –≥—Ä—É–ø –º'—è–∑—ñ–≤";

  // –û–±—Ä–æ–±–ª—è—î–º–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤'—è
  const activeConditions = healthProfile?.conditions?.filter(c => c.isActive) || [];
  const currentLimitations = healthProfile?.currentLimitations || [];
  
  console.log('üè• [constructPlanPrompt] –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–±–ª–µ–º –∑–¥–æ—Ä–æ–≤\'—è:', {
    totalConditions: healthProfile?.conditions?.length || 0,
    activeConditions: activeConditions.length,
    inactiveConditions: (healthProfile?.conditions?.length || 0) - activeConditions.length,
    currentLimitations: currentLimitations.length,
    activeConditionsDetails: activeConditions.map(c => ({
      condition: c.condition,
      severity: c.severity,
      type: c.type,
      affectedAreas: c.affectedAreas
    })),
    currentLimitationsDetails: currentLimitations
  });
  
  let healthConstraintsText = '';
  if (activeConditions.length > 0 || currentLimitations.length > 0) {
    console.log('üö® [constructPlanPrompt] –î–û–î–ê–Ñ–ú–û –ü–†–û–ë–õ–ï–ú–ò –ó–î–û–†–û–í\'–Ø –î–û –ü–†–û–ú–ü–¢–£!');
    healthConstraintsText = '\n\n**üö® –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û - –ü–†–û–ë–õ–ï–ú–ò –ó–î–û–†–û–í\'–Ø:**\n';
    
    if (activeConditions.length > 0) {
      healthConstraintsText += `**–ê–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤'—è (${activeConditions.length}):**\n`;
      activeConditions.forEach(condition => {
        const severityText = condition.severity === 'severe' ? 'üî¥ –°–ï–†–ô–û–ó–ù–ê' : 
                           condition.severity === 'moderate' ? 'üü° –ü–û–ú–Ü–†–ù–ê' : 'üü¢ –õ–ï–ì–ö–ê';
        const typeText = condition.type === 'chronic' ? '—Ö—Ä–æ–Ω—ñ—á–Ω–∞' : 
                        condition.type === 'temporary' ? '—Ç–∏–º—á–∞—Å–æ–≤–∞' : '–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è';
        
        healthConstraintsText += `- ${severityText} ${typeText} –ø—Ä–æ–±–ª–µ–º–∞: "${condition.condition}"\n`;
        if (condition.affectedAreas.length > 0) {
          healthConstraintsText += `  –£—Ä–∞–∂–µ–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ: ${condition.affectedAreas.join(', ')}\n`;
        }
        if (condition.notes) {
          healthConstraintsText += `  –ü—Ä–∏–º—ñ—Ç–∫–∏: ${condition.notes}\n`;
        }
      });
    }
    
    if (currentLimitations.length > 0) {
      healthConstraintsText += `**–ü–æ—Ç–æ—á–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è:** ${currentLimitations.join(', ')}\n`;
    }
    
    healthConstraintsText += `
**–û–ë–û–í'–Ø–ó–ö–û–í–Ü –í–ò–ú–û–ì–ò –î–õ–Ø –ë–ï–ó–ü–ï–ö–ò:**
1. **–£–ù–ò–ö–ê–ô** –≤–ø—Ä–∞–≤, —â–æ –º–æ–∂—É—Ç—å –ø–æ–≥—ñ—Ä—à–∏—Ç–∏ –∑–∞–∑–Ω–∞—á–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏
2. **–ê–î–ê–ü–¢–£–ô** –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –æ–±–º–µ–∂–µ–Ω—å
3. **–í–ö–õ–Æ–ß–ò** —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ–π–Ω—ñ/–ø—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏—á–Ω—ñ –≤–ø—Ä–∞–≤–∏ –¥–µ –º–æ–∂–ª–∏–≤–æ
4. **–ó–ú–ï–ù–®–ò** —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –¥–ª—è —É—Ä–∞–∂–µ–Ω–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π
5. **–î–û–î–ê–ô** –¥–æ–¥–∞—Ç–∫–æ–≤—É —Ä–æ–∑–º–∏–Ω–∫—É –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –∑–æ–Ω
6. –£ –ø–æ–ª—ñ "notes" –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è **–û–ë–û–í'–Ø–ó–ö–û–í–û** –≤–∫–∞–∂–∏ —è–∫ –≤—Ä–∞—Ö–æ–≤–∞–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤'—è`;
    
    console.log('üìù [constructPlanPrompt] –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ–∫—Å—Ç –æ–±–º–µ–∂–µ–Ω—å –∑–¥–æ—Ä–æ–≤\'—è:', {
      textLength: healthConstraintsText.length,
      preview: healthConstraintsText.substring(0, 200) + '...'
    });
  } else {
    console.log('‚úÖ [constructPlanPrompt] –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –∑–¥–æ—Ä–æ–≤\'—è - –≥–µ–Ω–µ—Ä—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –ø–ª–∞–Ω');
  }

  return `–¢–∏ ‚Äî –≤–∏—Å–æ–∫–æ–∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å. –¢–≤–æ—è –º–µ—Ç–∞ ‚Äî —Ä–æ–∑—Ä–æ–±–∏—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π, –±–µ–∑–ø–µ—á–Ω–∏–π —Ç–∞ –ª–æ–≥—ñ—á–Ω–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —É —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–º—É –∑–∞–ª—ñ ${userNamePart}.

**–î—ñ–π —è–∫ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–µ—Ä:**
*   **–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—ñ–∑–∞—Ü—ñ—è:** –ü–ª–∞–Ω –º–∞—î –±—É—Ç–∏ –≥–ª–∏–±–æ–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –≤—Å—ñ –Ω–∞–¥–∞–Ω—ñ –¥–∞–Ω—ñ.
*   **–ë–µ–∑–ø–µ–∫–∞ —Ç–∞ —Ç–µ—Ö–Ω—ñ–∫–∞:** –ó–∞–≤–∂–¥–∏ –Ω–∞–≥–æ–ª–æ—à—É–π –Ω–∞ –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏ —Ç–∞ –±–µ–∑–ø–µ–∫–∏.
*   **–†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ—Å—Ç—å:** –ù–µ —É—Å–∫–ª–∞–¥–Ω—é–π —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –±–µ–∑ –ø–æ—Ç—Ä–µ–±–∏, –æ—Å–æ–±–ª–∏–≤–æ —è–∫—â–æ —Ü—ñ–ª—å ‚Äî –∑–∞–≥–∞–ª—å–Ω–∞ —Ñ—ñ–∑–∏—á–Ω–∞ —Ñ–æ—Ä–º–∞ –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –±—É—Ç–∏ –Ω–æ–≤–∞—á–∫–æ–º.
*   **–ú–æ—Ç–∏–≤–∞—Ü—ñ—è:** –¢–≤–æ—ó –æ–ø–∏—Å–∏ –º–∞—é—Ç—å –±—É—Ç–∏ —á—ñ—Ç–∫–∏–º–∏ —Ç–∞ –º–æ—Ç–∏–≤—É—é—á–∏–º–∏.
*   **–ö—É–ª—å—Ç—É—Ä–Ω–∞ —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å:** –£–Ω–∏–∫–∞–π –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞–∑–≤ –≤–ø—Ä–∞–≤, —è–∫—ñ –º–∞—é—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ –∫–æ–Ω–æ—Ç–∞—Ü—ñ—ó –∞–±–æ –∞—Å–æ—Ü—ñ–∞—Ü—ñ—ó –∑ –∫—Ä–∞—ó–Ω–∞–º–∏-–∞–≥—Ä–µ—Å–æ—Ä–∞–º–∏, –æ—Å–æ–±–ª–∏–≤–æ "—Ä–æ—Å—ñ–π—Å—å–∫—ñ" –≤–ø—Ä–∞–≤–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ñ –∞–±–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –Ω–∞–∑–≤–∏.

**–í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:**
*   –°—Ç–∞—Ç—å: ${genderText}
*   –í—ñ–∫: ${age} —Ä–æ–∫—ñ–≤
*   –¢–∏–ø —Å—Ç–∞—Ç—É—Ä–∏: ${bodyTypeText}
*   –ì–æ–ª–æ–≤–Ω–∞ —Ñ—ñ—Ç–Ω–µ—Å-—Ü—ñ–ª—å: ${goalText}
*   –ë–∞–∂–∞–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: ${trainingFrequency} —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å
*   –†—ñ–≤–µ–Ω—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏: ${experienceLevelText}
*   –ó—Ä—ñ—Å—Ç: ${height} —Å–º
*   –í–∞–≥–∞: ${weight} –∫–≥
*   –ë–∞–∂–∞–Ω–∏–π –∞–∫—Ü–µ–Ω—Ç: ${targetMuscleGroupsText}${healthConstraintsText}

**–í–∏–º–æ–≥–∏ –¥–æ –ø–ª–∞–Ω—É:**
1.  **–°—Ç—Ä—É–∫—Ç—É—Ä–∞:** –†–æ–∑–±–∏–π –ø–ª–∞–Ω —Ç–æ–Ω–æ –Ω–∞ ${trainingFrequency} —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–Ω—ñ(–≤), –Ω—ñ –±—ñ–ª—å—à–µ –Ω—ñ –º–µ–Ω—à–µ. –ö–æ–∂–µ–Ω –¥–µ–Ω—å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —á—ñ—Ç–∫—É –º–µ—Ç—É —ñ, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ, —Ñ–æ–∫—É—Å—É–≤–∞—Ç–∏—Å—è –Ω–∞ —Ü—ñ–ª—å–æ–≤—ñ–π –≥—Ä—É–ø–∏ –º'—è–∑—ñ–≤, –∑–∞–±–µ–∑–ø–µ—á—É—é—á–∏ –ø—Ä–∏ —Ü—å–æ–º—É –¥–æ—Å—Ç–∞—Ç–Ω—ñ–π —á–∞—Å –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏.
2.  **–†–æ–∑–º–∏–Ω–∫–∞ —Ç–∞ –ó–∞–º–∏–Ω–∫–∞:** –î–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è –Ω–∞–¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ —Ä–æ–∑–º–∏–Ω–∫–∏ (5-10 —Ö–≤–∏–ª–∏–Ω, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ª–µ–≥–∫–µ –∫–∞—Ä–¥—ñ–æ, –¥–∏–Ω–∞–º—ñ—á–Ω–∞ —Ä–æ–∑—Ç—è–∂–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ä–æ–±–æ—á–∏—Ö –≥—Ä—É–ø) —Ç–∞ –∑–∞–º–∏–Ω–∫–∏ (5-10 —Ö–≤–∏–ª–∏–Ω, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å—Ç–∞—Ç–∏—á–Ω–∞ —Ä–æ–∑—Ç—è–∂–∫–∞ –ø—Ä–æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏—Ö –º'—è–∑—ñ–≤).
3.  **–í–ø—Ä–∞–≤–∏:**
    *   **–ü—ñ–¥–±—ñ—Ä:** –†–µ—Ç–µ–ª—å–Ω–æ –ø—ñ–¥–±–µ—Ä–∏ –≤–ø—Ä–∞–≤–∏, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Å—Ç–∞—Ç—ñ, —Ç–∏–ø—É —Å—Ç–∞—Ç—É—Ä–∏, —Ü—ñ–ª—ñ —Ç–∞ –±–∞–∂–∞–Ω–æ–º—É –∞–∫—Ü–µ–Ω—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–∫–ª—é—á–∞—é –∫–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏ —Ä—É—Ö—É, –ø—Ä–∞–≤–∏–ª—å–Ω–µ –¥–∏—Ö–∞–Ω–Ω—è —Ç–∞ —Ç–∏–ø–æ–≤—ñ –ø–æ–º–∏–ª–∫–∏. –û–ø–∏—Å –º–∞—î –±—É—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–æ—ó –¥–æ–≤–∂–∏–Ω–∏ –¥–ª—è –≤—Å—ñ—Ö –≤–ø—Ä–∞–≤.
    *   **–ù–∞–∑–≤–∞:** –í–∫–∞–∂–∏ —Ç–æ—á–Ω—É —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –Ω–∞–∑–≤—É –∫–æ–∂–Ω–æ—ó –≤–ø—Ä–∞–≤–∏.
    *   **–û–ø–∏—Å –¢–µ—Ö–Ω—ñ–∫–∏:** –ù–∞–¥–∞–π –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π, –∞–ª–µ –±–µ–∑ –∑–∞–π–≤–æ—ó –≤–æ–¥–∏ (–ø—Ä–∏–±–ª–∏–∑–Ω–æ 5-7 —Ä–µ—á–µ–Ω—å) –ø–æ–∫—Ä–æ–∫–æ–≤–∏–π –æ–ø–∏—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–∂–Ω–æ—ó –≤–ø—Ä–∞–≤–∏. –í–∫–ª—é—á–∞—é –∫–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏ —Ä—É—Ö—É, –ø—Ä–∞–≤–∏–ª—å–Ω–µ –¥–∏—Ö–∞–Ω–Ω—è —Ç–∞ —Ç–∏–ø–æ–≤—ñ –ø–æ–º–∏–ª–∫–∏. –û–ø–∏—Å –º–∞—î –±—É—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–æ—ó –¥–æ–≤–∂–∏–Ω–∏ –¥–ª—è –≤—Å—ñ—Ö –≤–ø—Ä–∞–≤.
    *   **–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—Ö–æ–¥—ñ–≤:** –í–∫–∞–∂–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–±–æ—á–∏—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "3-4" –∞–±–æ —á–∏—Å–ª–æ 4 , –≤–∫–∞–∑—É—î—à —Å–∫—ñ–ª—å–∫–∏ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –ø—ñ–¥—Ö–æ–¥—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ü—ñ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞).
    *   **–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω—å:** –í–∫–∞–∂–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω –ø–æ–≤—Ç–æ—Ä–µ–Ω—å, –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –¥–ª—è —Ü—ñ–ª—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "8-12" –¥–ª—è –≥—ñ–ø–µ—Ä—Ç—Ä–æ—Ñ—ñ—ó, "12-15" –¥–ª—è –≤–∏—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ).
    *   **–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫:** –í–∫–∞–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —á–∞—Å –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É –º—ñ–∂ –ø—ñ–¥—Ö–æ–¥–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "60-90 —Å–µ–∫—É–Ω–¥").
    *   **weightType:** –î–ª—è –∫–æ–∂–Ω–æ—ó –≤–ø—Ä–∞–≤–∏ –û–ë–û–í'–Ø–ó–ö–û–í–û –≤–∏–∑–Ω–∞—á —Ç–∏–ø –≤–∞–≥–∏. –¶–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –æ–¥–∏–Ω —ñ–∑ —á–æ—Ç–∏—Ä—å–æ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:
        *   'total' - –¥–ª—è –≤–ø—Ä–∞–≤, –¥–µ –≤–∫–∞–∑—É—î—Ç—å—Å—è –∑–∞–≥–∞–ª—å–Ω–∞ –≤–∞–≥–∞ —Å–Ω–∞—Ä—è–¥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —à—Ç–∞–Ω–≥–∞, —Ç—Ä–µ–Ω–∞–∂–µ—Ä).
        *   'single' - –¥–ª—è –≤–ø—Ä–∞–≤, –¥–µ –≤–∫–∞–∑—É—î—Ç—å—Å—è –≤–∞–≥–∞ –æ–¥–Ω–æ–≥–æ —Å–Ω–∞—Ä—è–¥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≥–∞–Ω—Ç–µ–ª—å, –≥–∏—Ä—è).
        *   'bodyweight' - –¥–ª—è –≤–ø—Ä–∞–≤, —â–æ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –∑ –≤–ª–∞—Å–Ω–æ—é –≤–∞–≥–æ—é —Ç—ñ–ª–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—ñ–¥–∂–∏–º–∞–Ω–Ω—è, –ø—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è, –ø–ª–∞–Ω–∫–∞).
        *   'none' - –¥–ª—è –≤–ø—Ä–∞–≤, –¥–µ –≤–∞–≥–∞ –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ä–æ–∑—Ç—è–∂–∫–∞, –∫–∞—Ä–¥—ñ–æ –Ω–∞ –≤–ª–∞—Å–Ω–æ–º—É —Ç–µ–º–ø—ñ).
    *   **videoSearchQuery:** –ù–∞–¥–∞–π —Ç–æ—á–Ω–∏–π –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è YouTube, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –∑–Ω–∞–π—Ç–∏ —è–∫—ñ—Å–Ω–µ –≤—ñ–¥–µ–æ –∑ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—î—é —Ç–µ—Ö–Ω—ñ–∫–∏ –≤–ø—Ä–∞–≤–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∞–±–æ —Ä–æ—Å—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "—è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–æ–±–∏—Ç–∏ —Å—Ç–∞–Ω–æ–≤—É —Ç—è–≥—É —Ç–µ—Ö–Ω—ñ–∫–∞" –∞–±–æ "–ø—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –∑—ñ —à—Ç–∞–Ω–≥–æ—é —Ç–µ—Ö–Ω—ñ–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"). –Ø–∫—â–æ —è–∫—ñ—Å–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É —Å—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è, –∑–∞–ª–∏—à null.
4.  **–ü—Ä–æ–≥—Ä–µ—Å—ñ—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:** –£ –ø–æ–ª—ñ "notes" –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏, —è–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ–≥—Ä–µ—Å—É–≤–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ù–∞–º–∞–≥–∞–π—Å—è —â–æ—Ç–∏–∂–Ω—è –∑–±—ñ–ª—å—à—É–≤–∞—Ç–∏ —Ä–æ–±–æ—á—É –≤–∞–≥—É –Ω–∞ 1-2.5 –∫–≥ —É –±–∞–∑–æ–≤–∏—Ö –≤–ø—Ä–∞–≤–∞—Ö, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —ñ–¥–µ–∞–ª—å–Ω—É —Ç–µ—Ö–Ω—ñ–∫—É, –∞–±–æ –¥–æ–¥–∞–≤–∞—Ç–∏ 1-2 –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è.").
5.  **–ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å:** –í–ø—Ä–∞–≤–∏ –≤ –∫–æ–∂–Ω–æ–º—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—ñ –º–∞—é—Ç—å –±—É—Ç–∏ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω—ñ –≤ –ª–æ–≥—ñ—á–Ω—ñ–π –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–µ–ª–∏–∫—ñ –º'—è–∑–æ–≤—ñ –≥—Ä—É–ø–∏ –ø–µ—Ä–µ–¥ –º–∞–ª–∏–º–∏, —Å–∫–ª–∞–¥–Ω—ñ—à—ñ –≤–ø—Ä–∞–≤–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É).
6.  **–ü—Ä–∏–º—ñ—Ç–∫–∏ (–∑–∞–≥–∞–ª—å–Ω—ñ –¥–ª—è –¥–Ω—è):** –î–æ–¥–∞–π –±—É–¥—å-—è–∫—ñ —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∞–±–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è —É –ø–æ–ª—ñ "notes".

**–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:**
–ù–∞–¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –í–ò–ö–õ–Æ–ß–ù–û —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON-–º–∞—Å–∏–≤—É –æ–±'—î–∫—Ç—ñ–≤. –ö–æ–∂–µ–Ω –æ–±'—î–∫—Ç —É –º–∞—Å–∏–≤—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –æ–¥–∏–Ω —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π –¥–µ–Ω—å.
–ù–µ –¥–æ–¥–∞–≤–∞–π –∂–æ–¥–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∞–±–æ —Ç–µ–∫—Å—Ç—É –ø–æ–∑–∞ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é. JSON –º–∞—î –±—É—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏–º.

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è:**
{
  "day": <—á–∏—Å–ª–æ>,
  "warmup": "<—Ç–µ–∫—Å—Ç –æ–ø–∏—Å—É —Ä–æ–∑–º–∏–Ω–∫–∏ –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏>",
  "exercises": [
    {
      "name": "<–Ω–∞–∑–≤–∞ –≤–ø—Ä–∞–≤–∏>",
      "description": "<–¥—É–∂–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø–æ–∫—Ä–æ–∫–æ–≤–∏–π –æ–ø–∏—Å —Ç–µ—Ö–Ω—ñ–∫–∏>",
      "sets": "<–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—Ö–æ–¥—ñ–≤, —É —Ñ–æ—Ä–º–∞—Ç—ñ '3-4' –∞–±–æ 4 , –≤–∫–∞–∑—É—î—à —Å–∫—ñ–ª—å–∫–∏ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –ø—ñ–¥—Ö–æ–¥—ñ–≤>",
      "reps": "<–¥—ñ–∞–ø–∞–∑–æ–Ω –ø–æ–≤—Ç–æ—Ä–µ–Ω—å, '8-12'>",
      "rest": "<—á–∞—Å –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É, '60-90 —Å–µ–∫—É–Ω–¥'>",
      "weightType": "<'total' | 'single' | 'bodyweight' | 'none'>",
      "videoSearchQuery": "<–ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è YouTube –∞–±–æ null>"
    }
    // ... —ñ–Ω—à—ñ –≤–ø—Ä–∞–≤–∏
  ],
  "cooldown": "<—Ç–µ–∫—Å—Ç –æ–ø–∏—Å—É –∑–∞–º–∏–Ω–∫–∏ –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏>",
  "notes": "<–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –Ω–æ—Ç–∞—Ç–∫–∏/–ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ –ø—Ä–æ–≥—Ä–µ—Å—ñ—ó —Ç–∞ –¥–Ω—è. –ú–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–º.>"
}

**–ü—Ä–∏–∫–ª–∞–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ (–∑–∞–ø–æ–≤–Ω–∏ —Ä–µ–∞–ª—å–Ω–∏–º, –¥–µ—Ç–∞–ª—å–Ω–∏–º –ø–ª–∞–Ω–æ–º):**
[
  {
    "day": 1,
    "warmup": "5-7 —Ö–≤–∏–ª–∏–Ω –ª–µ–≥–∫–æ–≥–æ –∫–∞—Ä–¥—ñ–æ (–≤–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä –∞–±–æ –±—ñ–≥–æ–≤–∞ –¥–æ—Ä—ñ–∂–∫–∞). –î–∏–Ω–∞–º—ñ—á–Ω–∞ —Ä–æ–∑—Ç—è–∂–∫–∞: –æ–±–µ—Ä—Ç–∞–Ω–Ω—è —Å—É–≥–ª–æ–±–∞–º–∏, –º–∞—Ö–∏ —Ä—É–∫–∞–º–∏ —Ç–∞ –Ω–æ–≥–∞–º–∏, –Ω–∞—Ö–∏–ª–∏ –∫–æ—Ä–ø—É—Å—É.",
    "exercises": [
      {
        "name": "–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –∑—ñ —à—Ç–∞–Ω–≥–æ—é –Ω–∞ –ø–ª–µ—á–∞—Ö",
        "description": "–ü–æ—Å—Ç–∞–≤—Ç–µ –Ω–æ–≥–∏ –Ω–∞ —à–∏—Ä–∏–Ω—ñ –ø–ª–µ—á–µ–π, –Ω–æ—Å–∫–∏ —Ç—Ä–æ—Ö–∏ —Ä–æ–∑–≤–µ–¥–µ–Ω—ñ. –®—Ç–∞–Ω–≥–∞ –ª–µ–∂–∏—Ç—å –Ω–∞ –≤–µ—Ä—Ö–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ —Ç—Ä–∞–ø–µ—Ü—ñ—î–ø–æ–¥—ñ–±–Ω–∏—Ö –º'—è–∑—ñ–≤, –Ω–µ –Ω–∞ —à–∏—ó. –°–ø–∏–Ω–∞ –ø—Ä—è–º–∞ –ø—Ä–æ—Ç—è–≥–æ–º —É—Å—å–æ–≥–æ —Ä—É—Ö—É, –ø–æ–≥–ª—è–¥ —Å–ø—Ä—è–º–æ–≤–∞–Ω–∏–π –≤–ø–µ—Ä–µ–¥. –ù–∞ –≤–¥–∏—Ö—É –ø–æ–≤—ñ–ª—å–Ω–æ –æ–ø—É—Å–∫–∞–π—Ç–µ—Å—è, –∑–≥–∏–Ω–∞—é—á–∏ –∫–æ–ª—ñ–Ω–∞ —Ç–∞ –≤—ñ–¥–≤–æ–¥—è—á–∏ —Ç–∞–∑ –Ω–∞–∑–∞–¥, –Ω—ñ–±–∏ —Å—ñ–¥–∞—î—Ç–µ –Ω–∞ —Å—Ç—ñ–ª–µ—Ü—å. –û–ø—É—Å–∫–∞–π—Ç–µ—Å—å –¥–æ –ø–∞—Ä–∞–ª–µ–ª—ñ —Å—Ç–µ–≥–æ–Ω –∑ –ø—ñ–¥–ª–æ–≥–æ—é –∞–±–æ –≥–ª–∏–±—à–µ, —è–∫—â–æ –¥–æ–∑–≤–æ–ª—è—î –≥–Ω—É—á–∫—ñ—Å—Ç—å —Ç–∞ —Ç–µ—Ö–Ω—ñ–∫–∞. –ù–∞ –≤–∏–¥–∏—Ö—É –ø–æ—Ç—É–∂–Ω–æ –≤–∏—à—Ç–æ–≤—Ö–Ω—ñ—Ç—å—Å—è –ø'—è—Ç–∞–º–∏ –≤—ñ–¥ –ø—ñ–¥–ª–æ–≥–∏, –ø–æ–≤–µ—Ä—Ç–∞—é—á–∏—Å—å —É –≤–∏—Ö—ñ–¥–Ω–µ –ø–æ–ª–æ–∂–µ–Ω–Ω—è. –ö–æ–ª—ñ–Ω–∞ –Ω–µ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏—Ö–æ–¥–∏—Ç–∏ –∑–∞ –ª—ñ–Ω—ñ—é –Ω–æ—Å–∫—ñ–≤ —Ç–∞ –Ω–µ –∑–≤–æ–¥—å—Ç–µ —ó—Ö –≤—Å–µ—Ä–µ–¥–∏–Ω—É. –ü–æ–º–∏–ª–∫–∏: –Ω–∞—Ö–∏–ª –∫–æ—Ä–ø—É—Å—É –≤–ø–µ—Ä–µ–¥, –ø—ñ–¥–π–æ–º –Ω–∞ –Ω–æ—Å–∫–∏, –∑–≤–µ–¥–µ–Ω–Ω—è –∫–æ–ª—ñ–Ω.",
        "sets": "4",
        "reps": "8-12",
        "rest": "90-120 —Å–µ–∫—É–Ω–¥",
        "weightType": "total",
        "videoSearchQuery": "–ø—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –∑—ñ —à—Ç–∞–Ω–≥–æ—é –Ω –ø–ª–µ—á–∞—Ö —Ç–µ—Ö–Ω—ñ–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"
      }
      // ... —ñ–Ω—à—ñ –≤–ø—Ä–∞–≤–∏
    ],
    "cooldown": "–°—Ç–∞—Ç–∏—á–Ω–∞ —Ä–æ–∑—Ç—è–∂–∫–∞ –º'—è–∑—ñ–≤ –Ω—ñ–≥ (–∫–≤–∞–¥—Ä–∏—Ü–µ–ø—Å–∏, –±—ñ—Ü–µ–ø—Å–∏ —Å—Ç–µ–≥–Ω–∞, —Å—ñ–¥–Ω–∏—á–Ω—ñ, –ª–∏—Ç–∫–æ–≤—ñ) –ø–æ 20-30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–æ–∂–Ω—É —Ä–æ–∑—Ç—è–∂–∫—É.",
    "notes": "–°—å–æ–≥–æ–¥–Ω—ñ –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –Ω–æ–≥–∞—Ö. –§–æ–∫—É—Å—É–π—Ç–µ—Å—å –Ω–∞ —ñ–¥–µ–∞–ª—å–Ω—ñ–π —Ç–µ—Ö–Ω—ñ—Ü—ñ. –Ø–∫—â–æ –≤–∏ –Ω–æ–≤–∞—á–æ–∫, –ø–æ—á–Ω—ñ—Ç—å –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º –≥—Ä–∏—Ñ–æ–º –∞–±–æ –ª–µ–≥–∫–æ—é –≤–∞–≥–æ—é –¥–ª—è –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è —Ä—É—Ö—É. –ù–∞–º–∞–≥–∞–π—Ç–µ—Å—å —â–æ—Ç–∏–∂–Ω—è –¥–æ–¥–∞–≤–∞—Ç–∏ 1-2.5–∫–≥ –¥–æ —Ä–æ–±–æ—á–æ—ó –≤–∞–≥–∏, —è–∫—â–æ –≤–∏–∫–æ–Ω—É—î—Ç–µ –≤—Å—ñ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —Ç–µ—Ö–Ω—ñ–∫–æ—é."
  }
  // ... —ñ–Ω—à—ñ –¥–Ω—ñ
]
–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ JSON –≤–∞–ª—ñ–¥–Ω–∏–π, –≤—Å—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –∞ –æ–ø–∏—Å–∏ —Ç–µ—Ö–Ω—ñ–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ñ —Ç–∞ –∫–æ—Ä–∏—Å–Ω—ñ.`;
};

export const generateWorkoutPlan = async (profile: UserProfile, modelName: string = GEMINI_MODELS.WORKOUT_GENERATION): Promise<DailyWorkoutPlan[]> => {
  if (!ai) {
    throw new Error(UI_TEXT.apiKeyMissing);
  }

  console.log('üèãÔ∏è-‚ôÄÔ∏è Starting workout plan generation:', {
    modelName,
    userProfile: {
      name: profile.name,
      goal: profile.goal,
      trainingFrequency: profile.trainingFrequency,
      healthConditions: profile.healthProfile?.conditions?.filter(c => c.isActive)?.length || 0,
      currentLimitations: profile.healthProfile?.currentLimitations?.length || 0
    }
  });

  const prompt = constructPlanPrompt(profile);
  
  // –õ–æ–≥—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
  console.log('üìã [generateWorkoutPlan] –§—ñ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI:', {
    promptLength: prompt.length,
    containsHealthConstraints: prompt.includes('üö® –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û'),
    healthSectionPreview: prompt.includes('üö® –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û') 
      ? prompt.split('üö® –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û')[1]?.substring(0, 300) + '...'
      : '–ù–µ–º–∞—î —Å–µ–∫—Ü—ñ—ó –∑–¥–æ—Ä–æ–≤\'—è'
  });
  
  return withQuotaManagement(async () => {
    // –†–æ–∑—É–º–Ω–∏–π –≤–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ
    const selectedModel = getSmartModel(modelName);
    console.log(`ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–ª–∞–Ω—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–æ–¥–µ–ª—å: ${selectedModel}`);
    
    const model = ai!.getGenerativeModel({ model: selectedModel });
    
    console.log('üöÄ Making API call to generate workout plan...');
    const response = await model.generateContent(prompt);
    const result = await response.response;
    let jsonStr = result.text().trim();
    
    console.log('‚úÖ Received response from API, parsing...', {
      responseLength: jsonStr.length,
      containsHealthNotes: jsonStr.toLowerCase().includes('–∑–¥–æ—Ä–æ–≤') || jsonStr.toLowerCase().includes('–æ–±–º–µ–∂') || jsonStr.toLowerCase().includes('—Ç—Ä–∞–≤–º'),
      firstChars: jsonStr.substring(0, 100)
    });
    
    // –í–∏–¥–∞–ª—è—î–º–æ –º–æ–∂–ª–∏–≤—ñ markdown-—Ä–æ–∑–º—ñ—Ç–∫–∏
    const fenceRegex = /^```(?:json)?\s*\n?(.*?)\n?\s*```$/s;
    const match = jsonStr.match(fenceRegex);
    if (match && match[1]) {
      jsonStr = match[1].trim();
    }

    try {
      const parsedPlan: any[] = JSON.parse(jsonStr); 
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–∑–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      if (!Array.isArray(parsedPlan)) {
        throw new Error("AI –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ –º–∞—Å–∏–≤ –¥–Ω—ñ–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å");
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω –¥–µ–Ω—å
      const basePlan = parsedPlan.map((day, index): DailyWorkoutPlan => {
        if (typeof day.day !== 'number' || !Array.isArray(day.exercises)) {
          throw new Error(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–Ω—è ${index + 1}`);
        }

        return {
          day: day.day,
          notes: day.notes || '',
          exercises: day.exercises.map((ex: any, exIndex: number) => {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –≤–ø—Ä–∞–≤–∏
            if (!ex.name || !ex.description || !ex.sets || !ex.reps || !ex.rest) {
              throw new Error(`–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è —É –≤–ø—Ä–∞–≤—ñ ${exIndex + 1} –¥–Ω—è ${day.day}`);
            }

            return {
              id: uuidv4(),
              name: ex.name || "–ù–µ–≤—ñ–¥–æ–º–∞ –≤–ø—Ä–∞–≤–∞",
              description: ex.description || "–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.",
              sets: ex.sets || "3",
              reps: ex.reps || "10-12",
              rest: ex.rest || "60 —Å–µ–∫—É–Ω–¥",
              weightType: ex.weightType || 'total',
              videoSearchQuery: ex.videoSearchQuery || null,
              targetWeight: ex.targetWeight || null,
              targetReps: ex.targetReps || null,
              recommendation: ex.recommendation || { text: '', action: '' },
              isCompletedDuringSession: false,
              sessionLoggedSets: [],
              sessionSuccess: false,
              notes: ex.notes || null
            };
          })
        };
      });

      // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —á–∏ –ø–ª–∞–Ω –≤—Ä–∞—Ö–æ–≤—É—î –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤'—è
      const healthAnalysis = {
        totalDays: basePlan.length,
        totalExercises: basePlan.reduce((sum, day) => sum + day.exercises.length, 0),
        daysWithHealthNotes: basePlan.filter(day => 
          day.notes && (
            day.notes.toLowerCase().includes('–∑–¥–æ—Ä–æ–≤') ||
            day.notes.toLowerCase().includes('–æ–±–º–µ–∂') ||
            day.notes.toLowerCase().includes('—Ç—Ä–∞–≤–º') ||
            day.notes.toLowerCase().includes('—É–Ω–∏–∫–∞–π') ||
            day.notes.toLowerCase().includes('–∞–¥–∞–ø—Ç')
          )
        ).length,
        exercisesWithHealthConsiderations: basePlan.reduce((count, day) => {
          return count + day.exercises.filter(ex => 
            ex.description && (
              ex.description.toLowerCase().includes('–æ–±–µ—Ä–µ–∂–Ω–æ') ||
              ex.description.toLowerCase().includes('—É–Ω–∏–∫–∞–π') ||
              ex.description.toLowerCase().includes('–∞–¥–∞–ø—Ç') ||
              ex.description.toLowerCase().includes('—Ç—Ä–∞–≤–º')
            )
          ).length;
        }, 0),
        sampleHealthNotes: basePlan
          .filter(day => day.notes && day.notes.toLowerCase().includes('–∑–¥–æ—Ä–æ–≤'))
          .slice(0, 2)
          .map(day => ({ day: day.day, notes: day.notes?.substring(0, 100) + '...' }))
      };
      
      console.log('üéØ Successfully generated workout plan:', healthAnalysis);
      
      if ((profile.healthProfile?.conditions?.filter(c => c.isActive)?.length || 0) > 0) {
        if (healthAnalysis.daysWithHealthNotes > 0) {
          console.log('‚úÖ [–£–°–ü–Ü–•] –ü–ª–∞–Ω –í–†–ê–•–û–í–£–Ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤\'—è!');
        } else {
          console.log('‚ö†Ô∏è [–£–í–ê–ì–ê] –ü–ª–∞–Ω –º–æ–∂–µ –ù–ï –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤\'—è!');
        }
      }

      // –î–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–µ–∑–ø–µ–∫—É
      return basePlan.map(day => ({
        ...day,
        exercises: addBaseRecommendations(validateWorkoutSafety(day.exercises, profile))
      }));
    } catch (e) {
      console.error("Error parsing JSON from AI response:", e);
      console.error("Received string (after processing):", jsonStr);
      console.error("Original AI response text:", result.text());
      throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –≤—ñ–¥ AI. –ú–æ–∂–ª–∏–≤–æ, —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–º—ñ–Ω–∏–≤—Å—è, –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ñ AI.");
    }
  }, undefined, { priority: 'high' });
};

// –ó–ê–°–¢–ê–†–Ü–õ–ê –§–£–ù–ö–¶–Ü–Ø - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ generateNewAdaptiveWorkout
export const generateAdaptiveWorkout = async (
  userProfile: UserProfile,
  originalPlan: DailyWorkoutPlan,
  wellnessCheck: WellnessCheck,
  workoutHistory: WorkoutLog[]
): Promise<AdaptiveWorkoutPlan> => {
  console.log('‚ö†Ô∏è [DEPRECATED] Using old generateAdaptiveWorkout - redirecting to new function');
  return generateNewAdaptiveWorkout(userProfile, originalPlan, wellnessCheck, workoutHistory);
};

export const generateWellnessRecommendations = async (
  userProfile: UserProfile,
  wellnessCheck: WellnessCheck,
  workoutHistory: WorkoutLog[]
): Promise<WellnessRecommendation[]> => {
  console.log('üìä [WELLNESS] Starting wellness recommendations generation:', {
    userProfile: {
      name: userProfile.name,
      goal: userProfile.goal,
      experienceLevel: userProfile.experienceLevel
    },
    wellnessCheck: {
      energyLevel: wellnessCheck.energyLevel,
      sleepQuality: wellnessCheck.sleepQuality,
      stressLevel: wellnessCheck.stressLevel,
      motivation: wellnessCheck.motivation,
      fatigue: wellnessCheck.fatigue
    },
    historyCount: workoutHistory.length
  });

  if (!ai) {
    console.error('‚ùå [WELLNESS] AI not initialized');
    throw new Error(UI_TEXT.apiKeyMissing);
  }

  console.log('ü§ñ [WELLNESS] AI initialized successfully');

  try {
    const model = ai.getGenerativeModel({ 
      model: GEMINI_MODELS.LIGHT_TASKS,
      generationConfig: {
        temperature: 0.3,
        topK: 20,
        topP: 0.8,
        maxOutputTokens: 2000
      }
    });

    const prompt = `–¢–∏ - –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ñ—ñ—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä —Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑ –∑–¥–æ—Ä–æ–≤'—è. –ù–∞–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è.

–ü–†–û–§–Ü–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê:
- –Ü–º'—è: ${userProfile.name}
- –ú–µ—Ç–∞: ${userProfile.goal}
- –î–æ—Å–≤—ñ–¥: ${userProfile.experienceLevel}

–ü–û–¢–û–ß–ù–ï –°–ê–ú–û–ü–û–ß–£–¢–¢–Ø:
- –ï–Ω–µ—Ä–≥—ñ—è: ${wellnessCheck.energyLevel}
- –°–æ–Ω: ${wellnessCheck.sleepQuality}
- –°—Ç—Ä–µ—Å: ${wellnessCheck.stressLevel}
- –ú–æ—Ç–∏–≤–∞—Ü—ñ—è: ${wellnessCheck.motivation}/10
- –í—Ç–æ–º–∞: ${wellnessCheck.fatigue}/10
${wellnessCheck.notes ? `- –ù–æ—Ç–∞—Ç–∫–∏: "${wellnessCheck.notes}"` : ''}

–ù–∞–¥–∞–π 2-4 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —É JSON —Ñ–æ—Ä–º–∞—Ç—ñ:
[
  {
    "type": "energy|recovery|motivation|stress",
    "title": "–ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫",
    "description": "–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó",
    "actions": ["–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –¥—ñ—è 1", "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –¥—ñ—è 2"],
    "priority": "high|medium|low"
  }
]`;

    console.log('üìù [WELLNESS] Sending prompt to AI:', {
      promptLength: prompt.length,
      userProfileKeys: Object.keys(userProfile),
      wellnessKeys: Object.keys(wellnessCheck)
    });

    const response = await model.generateContent(prompt);
    const result = await response.response;
    let jsonStr = result.text().trim();

    console.log('‚úÖ [WELLNESS] Received response from AI:', {
      responseLength: jsonStr.length,
      firstChars: jsonStr.substring(0, 100)
    });

    // –í–∏–¥–∞–ª—è—î–º–æ –º–æ–∂–ª–∏–≤—ñ markdown-—Ä–æ–∑–º—ñ—Ç–∫–∏
    const fenceRegex = /^```(?:json)?\s*\n?(.*?)\n?\s*```$/s;
    const match = jsonStr.match(fenceRegex);
    if (match && match[1]) {
      jsonStr = match[1].trim();
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ü–µ –≤–∞–ª—ñ–¥–Ω–∏–π JSON –º–∞—Å–∏–≤
    if (!jsonStr.startsWith('[') || !jsonStr.endsWith(']')) {
      console.log(' ‚ö†Ô∏è [WELLNESS] JSON –Ω–µ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É –º–∞—Å–∏–≤—É, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏');
      
      // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ JSON –º–∞—Å–∏–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      const arrayMatch = jsonStr.match(/\[[\s\S]*\]/);
      if (arrayMatch) {
        jsonStr = arrayMatch[0];
      } else {
        throw new Error('–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥ AI');
      }
    }

    try {
      const recommendations: WellnessRecommendation[] = JSON.parse(jsonStr);
      
      if (!Array.isArray(recommendations)) {
        throw new Error('AI –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ –º–∞—Å–∏–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π');
      }

      console.log('‚úÖ [WELLNESS] Successfully parsed recommendations:', recommendations.length);
      return recommendations;

    } catch (parseError) {
      console.error('‚ùå [WELLNESS] JSON parsing failed:', parseError);
      console.error('Raw JSON string:', jsonStr);
      throw new Error('–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤—ñ–¥ AI');
    }

  } catch (error: any) {
    console.error(' ‚ùå [WELLNESS] Error generating wellness recommendations:', error);
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ API
    if (
      (error.message && error.message.toLowerCase().includes("quota")) ||
      (error.message && error.message.toLowerCase().includes("rate limit")) ||
      (error.message && error.message.toLowerCase().includes("429")) ||
      (error.message && (
        error.message.toLowerCase().includes("overload") ||
        error.message.toLowerCase().includes("unavailable") ||
        error.message.toLowerCase().includes("service unavailable")
      ))
    ) {
      throw new Error(UI_TEXT.aiOverloaded);
    }
    
    // –î–ª—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫ —Ç–∞–∫–æ–∂ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ –∑–∞–º—ñ—Å—Ç—å –≤–∏–∫–∏–¥–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
    console.warn('üîÑ [WELLNESS] Returning empty recommendations due to service error:', error.message);
    return [];
  }
};

export const generateWorkoutAnalysis = async ({
  userProfile,
  dayPlan,
  lastWorkoutLog,
  previousWorkoutLogs = []
}: {
  userProfile: UserProfile;
  dayPlan: DailyWorkoutPlan;
  lastWorkoutLog: WorkoutLog | null;
  previousWorkoutLogs?: WorkoutLog[];
}): Promise<{
  updatedPlan: DailyWorkoutPlan;
  recommendation: {
    text: string;
    action: string;
  };
  dailyRecommendations: {
    exerciseName: string;
    recommendation: string;
    suggestedWeight?: number;
    suggestedReps?: number;
    suggestedSets?: number;
    reason: string;
  }[];
}> => {
  console.log('üìä [ANALYSIS] Starting workout analysis');
  
  if (!ai) {
    throw new Error(UI_TEXT.apiKeyMissing);
  }

  // –ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –±–µ–∑ AI –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
  const dailyRecommendations = dayPlan.exercises.map(exercise => ({
    exerciseName: exercise.name,
    recommendation: "–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—è –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
    reason: "–ë–∞–∑–æ–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è",
    action: "maintain" as const
  }));

  return {
    updatedPlan: dayPlan,
    recommendation: {
      text: "–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ!",
      action: "maintain"
    },
    dailyRecommendations
  };
};

export const generateExerciseVariations = async (
  exerciseName: string,
  userProfile: UserProfile,
  reason: string = "general"
): Promise<any[]> => {
  console.log('üîÑ [VARIATIONS] Generating variations for:', exerciseName);
  
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏
  return [];
};

export const shouldVaryExercise = (
  exerciseName: string,
  userProfile: UserProfile,
  workoutHistory: WorkoutLog[]
): boolean => {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ workoutHistory —ñ—Å–Ω—É—î —Ç–∞ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
  if (!workoutHistory || !Array.isArray(workoutHistory)) {
    return false;
  }
  
  // –ü—Ä–æ—Å—Ç–∞ –ª–æ–≥—ñ–∫–∞ - –≤–∞—Ä—ñ—é–≤–∞—Ç–∏ –∫–æ–∂–Ω—É 5-—Ç—É –≤–ø—Ä–∞–≤—É
  return workoutHistory.length % 5 === 0;
};
