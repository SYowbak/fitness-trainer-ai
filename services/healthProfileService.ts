import { HealthProfile, HealthCondition, UserProfile, WellnessCheck } from '../types';
import { v4 as uuidv4 } from 'uuid';

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª–µ–º –∑–¥–æ—Ä–æ–≤'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
export class HealthProfileService {
  
  /**
   * –°—Ç–≤–æ—Ä—é—î –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∑–¥–æ—Ä–æ–≤'—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  static createInitialHealthProfile(): HealthProfile {
    return {
      conditions: [],
      currentLimitations: [],
      recoveryProgress: {},
      systemMemory: {
        rememberedFacts: [],
        adaptationHistory: []
      }
    };
  }

  /**
   * –î–æ–¥–∞—î –Ω–æ–≤–µ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è/—Ç—Ä–∞–≤–º—É –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é
   */
  static addHealthCondition(
    healthProfile: HealthProfile,
    condition: Omit<HealthCondition, 'id'>
  ): HealthProfile {
    const newCondition: HealthCondition = {
      ...condition,
      id: uuidv4()
    };

    const updatedProfile = {
      ...healthProfile,
      conditions: [...healthProfile.conditions, newCondition]
    };

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è
    return HealthProfileService.updateCurrentLimitations(updatedProfile);
  }

  /**
   * –û–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–æ–≥—Ä–µ—Å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è)
   */
  static updateConditionProgress(
    healthProfile: HealthProfile,
    conditionId: string,
    progressPercentage: number,
    milestones: string[] = []
  ): HealthProfile {
    const updatedProfile = {
      ...healthProfile,
      recoveryProgress: {
        ...healthProfile.recoveryProgress,
        [conditionId]: {
          progressPercentage,
          lastUpdated: new Date(),
          milestones: [
            ...(healthProfile.recoveryProgress[conditionId]?.milestones || []),
            ...milestones
          ]
        }
      }
    };

    return HealthProfileService.updateCurrentLimitations(updatedProfile);
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤—É—î –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–¥—É–∂–∞–≤)
   */
  static deactivateCondition(
    healthProfile: HealthProfile,
    conditionId: string
  ): HealthProfile {
    const updatedProfile = {
      ...healthProfile,
      conditions: healthProfile.conditions.map(condition =>
        condition.id === conditionId
          ? { ...condition, isActive: false }
          : condition
      )
    };

    return HealthProfileService.updateCurrentLimitations(updatedProfile);
  }

  /**
   * –û–Ω–æ–≤–ª—é—î –ø–æ—Ç–æ—á–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω—å
   */
  static updateCurrentLimitations(healthProfile: HealthProfile): HealthProfile {
    const activeConditions = healthProfile.conditions.filter(c => c.isActive);
    const limitations: string[] = [];

    activeConditions.forEach(condition => {
      // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ —É—Ä–∞–∂–µ–Ω–Ω—è
      limitations.push(...condition.affectedAreas);
      
      // –î–æ–¥–∞—î–º–æ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å–µ—Ä–π–æ–∑–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
      if (condition.severity === 'severe' && condition.type === 'chronic') {
        // –î–ª—è —Ö—Ä–æ–Ω—ñ—á–Ω–∏—Ö —Å–µ—Ä–π–æ–∑–Ω–∏—Ö - –¥–æ–¥–∞—î–º–æ –æ–¥–∏–Ω –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
        limitations.push(`—Å–µ—Ä–π–æ–∑–Ω–∞ —Ö—Ä–æ–Ω—ñ—á–Ω–∞ ${condition.affectedAreas[0]}`);
      } else if (condition.severity === 'severe') {
        // –î–ª—è —Å–µ—Ä–π–æ–∑–Ω–∏—Ö - –¥–æ–¥–∞—î–º–æ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç—è–∂–∫–æ—Å—Ç—ñ
        limitations.push(`—Å–µ—Ä–π–æ–∑–Ω–∞ ${condition.affectedAreas[0]}`);
      }
    });

    return {
      ...healthProfile,
      currentLimitations: [...new Set(limitations)] // –≤–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
    };
  }

  /**
   * –ê–Ω–∞–ª—ñ–∑—É—î –Ω–æ—Ç–∞—Ç–∫–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è —Ç–∞ –≤–∏—è–≤–ª—è—î —Ç–∏–º—á–∞—Å–æ–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏
   */
  static analyzeWellnessNotes(notes: string): string[] {
    if (!notes) return [];

    const lowerNotes = notes.toLowerCase();
    const temporaryIssues: string[] = [];

    // –ú–∞–ø–∞ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º
    const issueKeywords = {
      '—Å–ø–∏–Ω–∞': ['—Å–ø–∏–Ω–∞', '—Å–ø–∏–Ω—É', '—Å–ø–∏–Ω—ñ', '–ø–æ–ø–µ—Ä–µ–∫', '—Ö—Ä–µ–±–µ—Ç'],
      '–∫–æ–ª—ñ–Ω–æ': ['–∫–æ–ª—ñ–Ω–æ', '–∫–æ–ª—ñ–Ω–∞', '–∫–æ–ª—ñ–Ω'],
      '–ø–ª–µ—á–µ': ['–ø–ª–µ—á–µ', '–ø–ª–µ—á—ñ', '–ø–ª–µ—á–µ–π'],
      '—à–∏—è': ['—à–∏—è', '—à–∏—é', '—à–∏—ó'],
      '–≥–æ–ª–æ–≤–∞': ['–≥–æ–ª–æ–≤–∞', '–≥–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å', '–º—ñ–≥—Ä–µ–Ω—å'],
      '–≤—Ç–æ–º–∞': ['–≤—Ç–æ–º–∞', '–≤—Ç–æ–º–ª–µ–Ω–∏–π', '–≤—Ç–æ–º–ª–µ–Ω–∞', '–≤–∏—Å–Ω–∞–∂–µ–Ω–∏–π'],
      '–±—ñ–ª—å': ['–±–æ–ª–∏—Ç—å', '–±—ñ–ª—å', '–±–æ–ª—é—á–∏–π', '–±–æ–ª—é—á–∞']
    };

    Object.entries(issueKeywords).forEach(([issue, keywords]) => {
      if (keywords.some(keyword => lowerNotes.includes(keyword))) {
        temporaryIssues.push(issue);
      }
    });

    return temporaryIssues;
  }

  /**
   * –î–æ–¥–∞—î –∑–∞–ø–∏—Å –¥–æ –ø–∞–º'—è—Ç—ñ —Å–∏—Å—Ç–µ–º–∏
   */
  static addToSystemMemory(
    healthProfile: HealthProfile,
    fact: string,
    adaptationReason?: string,
    adaptations?: string[]
  ): HealthProfile {
    const updatedMemory = {
      rememberedFacts: [...healthProfile.systemMemory.rememberedFacts],
      adaptationHistory: [...healthProfile.systemMemory.adaptationHistory]
    };

    // –î–æ–¥–∞—î–º–æ —Ñ–∞–∫—Ç, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
    if (!updatedMemory.rememberedFacts.includes(fact)) {
      updatedMemory.rememberedFacts.push(fact);
    }

    // –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –∞–¥–∞–ø—Ç–∞—Ü—ñ—é
    if (adaptationReason && adaptations) {
      updatedMemory.adaptationHistory.push({
        date: new Date(),
        reason: adaptationReason,
        adaptations
      });
    }

    return {
      ...healthProfile,
      systemMemory: updatedMemory
    };
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –ø–æ—Ç–æ—á–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è (–ø–æ—Å—Ç—ñ–π–Ω—ñ + —Ç–∏–º—á–∞—Å–æ–≤—ñ)
   */
  static getAllCurrentLimitations(
    userProfile: UserProfile,
    wellnessCheck?: WellnessCheck
  ): string[] {
    const limitations: string[] = [];

    // –î–æ–¥–∞—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω—å–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    if (userProfile.healthConstraints) {
      limitations.push(...userProfile.healthConstraints);
    }

    // –î–æ–¥–∞—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –∑ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∑–¥–æ—Ä–æ–≤'—è
    if (userProfile.healthProfile) {
      // –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è
      limitations.push(...userProfile.healthProfile.currentLimitations);
      
      // –í–ê–ñ–õ–ò–í–û: –î–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤'—è —è–∫ –æ–±–º–µ–∂–µ–Ω–Ω—è
      const activeConditions = userProfile.healthProfile.conditions?.filter(c => c.isActive) || [];
      activeConditions.forEach(condition => {
        // –î–æ–¥–∞—î–º–æ –Ω–∞–∑–≤—É –ø—Ä–æ–±–ª–µ–º–∏
        limitations.push(condition.condition);
        // –î–æ–¥–∞—î–º–æ —É—Ä–∞–∂–µ–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ
        limitations.push(...condition.affectedAreas);
      });
    }

    // –î–æ–¥–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è –∑ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è
    if (wellnessCheck?.notes) {
      const temporaryIssues = this.analyzeWellnessNotes(wellnessCheck.notes);
      limitations.push(...temporaryIssues);
    }

    return [...new Set(limitations)]; // –≤–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
  }

  /**
   * –ì–µ–Ω–µ—Ä—É—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å —Å—Ç–∞–Ω—É –∑–¥–æ—Ä–æ–≤'—è –¥–ª—è AI
   */
  static generateHealthSummaryForAI(userProfile: UserProfile, wellnessCheck?: WellnessCheck): string {
    const limitations = this.getAllCurrentLimitations(userProfile, wellnessCheck);
    
    if (limitations.length === 0) {
      return "üè• –°–¢–ê–ù –ó–î–û–†–û–í'–Ø: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –≤—ñ–¥–æ–º–∏—Ö –æ–±–º–µ–∂–µ–Ω—å –∑–¥–æ—Ä–æ–≤'—è.";
    }

    let summary = "üè• –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û - –°–¢–ê–ù –ó–î–û–†–û–í'–Ø:\n";
    
    // –ê–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤'—è
    const activeConditions = userProfile.healthProfile?.conditions?.filter(c => c.isActive) || [];
    if (activeConditions.length > 0) {
      summary += `üö® –ê–ö–¢–ò–í–ù–Ü –ü–†–û–ë–õ–ï–ú–ò –ó–î–û–†–û–í'–Ø (${activeConditions.length}):\n`;
      activeConditions.forEach(condition => {
        const severityText = condition.severity === 'severe' ? 'üî¥ –°–ï–†–ô–û–ó–ù–ê' : 
                           condition.severity === 'moderate' ? 'üü° –ü–û–ú–Ü–†–ù–ê' : 'üü¢ –õ–ï–ì–ö–ê';
        const typeText = condition.type === 'chronic' ? '—Ö—Ä–æ–Ω—ñ—á–Ω–∞' : 
                        condition.type === 'temporary' ? '—Ç–∏–º—á–∞—Å–æ–≤–∞' : '–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è';
        
        summary += `‚Ä¢ ${severityText} ${typeText}: "${condition.condition}"\n`;
        if (condition.affectedAreas.length > 0) {
          summary += `  –£—Ä–∞–∂–µ–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ: ${condition.affectedAreas.join(', ')}\n`;
        }
        if (condition.notes) {
          summary += `  –ü—Ä–∏–º—ñ—Ç–∫–∏: ${condition.notes}\n`;
        }
      });
    }
    
    // –ü–æ—Å—Ç—ñ–π–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è
    const permanentLimitations = userProfile.healthProfile?.currentLimitations || userProfile.healthConstraints || [];
    if (permanentLimitations.length > 0) {
      summary += `‚Ä¢ –ü–æ—Å—Ç—ñ–π–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è: ${permanentLimitations.join(', ')}\n`;
    }

    // –¢–∏–º—á–∞—Å–æ–≤—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è
    if (wellnessCheck?.notes) {
      const temporaryIssues = this.analyzeWellnessNotes(wellnessCheck.notes);
      if (temporaryIssues.length > 0) {
        summary += `‚Ä¢ –¢–∏–º—á–∞—Å–æ–≤—ñ (—Å—å–æ–≥–æ–¥–Ω—ñ): ${temporaryIssues.join(', ')}\n`;
        summary += `‚Ä¢ –î–µ—Ç–∞–ª—ñ: "${wellnessCheck.notes}"\n`;
      }
    }

    // –ü–∞–º'—è—Ç—å —Å–∏—Å—Ç–µ–º–∏
    if (userProfile.healthProfile?.systemMemory.rememberedFacts.length) {
      summary += `‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º'—è—Ç–∞—î: ${userProfile.healthProfile.systemMemory.rememberedFacts.join(', ')}\n`;
    }

    summary += `\n‚ö†Ô∏è –û–ë–û–í'–Ø–ó–ö–û–í–û: –ê–¥–∞–ø—Ç—É–π –≤—Å—ñ –≤–ø—Ä–∞–≤–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ü–∏—Ö –ø—Ä–æ–±–ª–µ–º –∑–¥–æ—Ä–æ–≤'—è!`;

    return summary;
  }

  /**
   * –û—á–∏—â–∞—î –ø–∞–º'—è—Ç—å —Å–∏—Å—Ç–µ–º–∏ (–≤–∏–¥–∞–ª—è—î –≤—Å—ñ –∑–∞–ø–∞–º'—è—Ç–æ–≤–∞–Ω—ñ —Ñ–∞–∫—Ç–∏ —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—é –∞–¥–∞–ø—Ç–∞—Ü—ñ–π)
   */
  static clearSystemMemory(healthProfile: HealthProfile): HealthProfile {
    return {
      ...healthProfile,
      systemMemory: {
        rememberedFacts: [],
        adaptationHistory: []
      }
    };
  }

  /**
   * –û—á–∏—â–∞—î —Ç—ñ–ª—å–∫–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∞–¥–∞–ø—Ç–∞—Ü—ñ–π, –∑–∞–ª–∏—à–∞—é—á–∏ –∑–∞–ø–∞–º'—è—Ç–æ–≤–∞–Ω—ñ —Ñ–∞–∫—Ç–∏
   */
  static clearAdaptationHistory(healthProfile: HealthProfile): HealthProfile {
    return {
      ...healthProfile,
      systemMemory: {
        ...healthProfile.systemMemory,
        adaptationHistory: []
      }
    };
  }

  /**
   * –û—á–∏—â–∞—î —Ç—ñ–ª—å–∫–∏ –∑–∞–ø–∞–º'—è—Ç–æ–≤–∞–Ω—ñ —Ñ–∞–∫—Ç–∏, –∑–∞–ª–∏—à–∞—é—á–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∞–¥–∞–ø—Ç–∞—Ü—ñ–π
   */
  static clearRememberedFacts(healthProfile: HealthProfile): HealthProfile {
    return {
      ...healthProfile,
      systemMemory: {
        ...healthProfile.systemMemory,
        rememberedFacts: []
      }
    };
  }

  /**
   * –ú—ñ–≥—Ä—É—î —Å—Ç–∞—Ä—ñ healthConstraints –≤ –Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç
   */
  static migrateOldHealthConstraints(userProfile: UserProfile): UserProfile {
    if (!userProfile.healthConstraints || userProfile.healthProfile) {
      return userProfile; // –≤–∂–µ –º—ñ–≥—Ä–æ–≤–∞–Ω–æ –∞–±–æ –Ω–µ–º–∞—î —â–æ –º—ñ–≥—Ä—É–≤–∞—Ç–∏
    }

    const healthProfile = this.createInitialHealthProfile();
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—Ç–∞—Ä—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è –≤ –Ω–æ–≤—ñ —É–º–æ–≤–∏
    userProfile.healthConstraints.forEach(constraint => {
      const condition: Omit<HealthCondition, 'id'> = {
        type: 'chronic', // –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Å—Ç–∞—Ä—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è - —Ö—Ä–æ–Ω—ñ—á–Ω—ñ
        condition: `–ø—Ä–æ–±–ª–µ–º–∞ –∑ ${constraint}`,
        severity: 'moderate',
        affectedAreas: [constraint],
        startDate: new Date(), // –Ω–µ –∑–Ω–∞—î–º–æ —Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏
        isActive: true,
        notes: '–ú—ñ–≥—Ä–æ–≤–∞–Ω–æ –∑—ñ —Å—Ç–∞—Ä–æ—ó —Å–∏—Å—Ç–µ–º–∏'
      };

      healthProfile.conditions.push({
        ...condition,
        id: uuidv4()
      });
    });

    const updatedHealthProfile = HealthProfileService.updateCurrentLimitations(healthProfile);

    return {
      ...userProfile,
      healthProfile: updatedHealthProfile
    };
  }
}
