import { UserProfile, DailyWorkoutPlan, WorkoutLog, ExerciseRecommendation } from '../types';
import { generateWorkoutAnalysis } from './geminiService';
import { isOnline } from '../utils/offlineUtils';
import { quotaManager } from '../utils/apiQuotaManager';

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑ AI
 * –ê–Ω–∞–ª—ñ–∑—É—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–∞ –≥–µ–Ω–µ—Ä—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
 */
export class BackgroundWorkoutAnalysisService {
  private static instance: BackgroundWorkoutAnalysisService;
  private analysisQueue: Map<string, WorkoutLog> = new Map();
  private isProcessing = false;

  private constructor() {}

  static getInstance(): BackgroundWorkoutAnalysisService {
    if (!BackgroundWorkoutAnalysisService.instance) {
      BackgroundWorkoutAnalysisService.instance = new BackgroundWorkoutAnalysisService();
    }
    return BackgroundWorkoutAnalysisService.instance;
  }

  /**
   * –î–æ–¥–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ —á–µ—Ä–≥—É –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
   */
  async queueWorkoutForAnalysis(
    workoutLog: WorkoutLog,
    userProfile: UserProfile,
    dayPlan: DailyWorkoutPlan,
    previousLogs: WorkoutLog[],
    saveWorkoutLog: (log: WorkoutLog) => Promise<WorkoutLog>
  ): Promise<void> {
    console.log('üîÑ [BackgroundAnalysis] –î–æ–¥–∞—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ —á–µ—Ä–≥—É –∞–Ω–∞–ª—ñ–∑—É:', workoutLog.id);
    
    if (!workoutLog.id) {
      console.error('‚ùå [BackgroundAnalysis] –ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –±–µ–∑ ID');
      return;
    }

    // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —â–æ –∞–Ω–∞–ª—ñ–∑ –æ—á—ñ–∫—É—î—Ç—å—Å—è
    const updatedLog = {
      ...workoutLog,
      analysisStatus: 'pending' as const,
      analysisStartedAt: new Date()
    };

    try {
      await saveWorkoutLog(updatedLog);
      this.analysisQueue.set(workoutLog.id, {
        log: updatedLog,
        userProfile,
        dayPlan,
        previousLogs,
        saveWorkoutLog
      } as any);

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É —á–µ—Ä–≥–∏
      this.processQueue();
    } catch (error) {
      console.error('‚ùå [BackgroundAnalysis] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤ —á–µ—Ä–≥—É:', error);
    }
  }

  /**
   * –û–±—Ä–æ–±–ª—è—î —á–µ—Ä–≥—É –∞–Ω–∞–ª—ñ–∑—É
   */
  private async processQueue(): Promise<void> {
    if (this.isProcessing || this.analysisQueue.size === 0) {
      return;
    }

    this.isProcessing = true;
    console.log('üîÑ [BackgroundAnalysis] –ü–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É —á–µ—Ä–≥–∏, –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:', this.analysisQueue.size);

    for (const [logId, queueItem] of this.analysisQueue.entries()) {
      try {
        await this.analyzeWorkout(queueItem as any);
        this.analysisQueue.delete(logId);
      } catch (error) {
        console.error(`‚ùå [BackgroundAnalysis] –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è ${logId}:`, error);
        // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –Ω–µ–≤–¥–∞–ª–∏–π –∞–Ω–∞–ª—ñ–∑
        await this.markAnalysisAsFailed(queueItem as any, error as Error);
        this.analysisQueue.delete(logId);
      }
    }

    this.isProcessing = false;
    console.log('‚úÖ [BackgroundAnalysis] –û–±—Ä–æ–±–∫–∞ —á–µ—Ä–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  /**
   * –ê–Ω–∞–ª—ñ–∑—É—î –æ–¥–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
   */
  private async analyzeWorkout(queueItem: {
    log: WorkoutLog;
    userProfile: UserProfile;
    dayPlan: DailyWorkoutPlan;
    previousLogs: WorkoutLog[];
    saveWorkoutLog: (log: WorkoutLog) => Promise<WorkoutLog>;
  }): Promise<void> {
    const { log, userProfile, dayPlan, previousLogs, saveWorkoutLog } = queueItem;
    
    console.log('üß† [BackgroundAnalysis] –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:', log.id);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–µ–º–æ —Ä–æ–±–∏—Ç–∏ AI –∑–∞–ø–∏—Ç–∏
    if (!isOnline()) {
      console.log('üìµ [BackgroundAnalysis] –û—Ñ–ª–∞–π–Ω - –≤—ñ–¥–∫–ª–∞–¥–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑');
      return;
    }

    if (!quotaManager.canMakeRequest()) {
      console.log('‚ö†Ô∏è [BackgroundAnalysis] –õ—ñ–º—ñ—Ç AI –∑–∞–ø–∏—Ç—ñ–≤ - –≤—ñ–¥–∫–ª–∞–¥–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑');
      return;
    }

    // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —â–æ –∞–Ω–∞–ª—ñ–∑ —Ä–æ–∑–ø–æ—á–∞—Ç–æ
    const analyzingLog = {
      ...log,
      analysisStatus: 'analyzing' as const
    };
    await saveWorkoutLog(analyzingLog);

    try {
      // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä–æ–∑—É–º–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑ AI
      const analysisResult = await this.generateIntelligentAnalysis(
        userProfile,
        dayPlan,
        log,
        previousLogs
      );

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É
      const completedLog = {
        ...log,
        analysisStatus: 'completed' as const,
        analysisCompletedAt: new Date(),
        nextWorkoutRecommendations: analysisResult.nextWorkoutRecommendations,
        recommendation: analysisResult.overallRecommendation
      };

      await saveWorkoutLog(completedLog);
      console.log('‚úÖ [BackgroundAnalysis] –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –¥–ª—è:', log.id);

    } catch (error) {
      console.error('‚ùå [BackgroundAnalysis] –ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É:', error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä—É—î —Ä–æ–∑—É–º–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ AI
   */
  private async generateIntelligentAnalysis(
    userProfile: UserProfile,
    dayPlan: DailyWorkoutPlan,
    workoutLog: WorkoutLog,
    previousLogs: WorkoutLog[]
  ): Promise<{
    nextWorkoutRecommendations: ExerciseRecommendation[];
    overallRecommendation: { text: string; action: string };
  }> {
    console.log('üß† [BackgroundAnalysis] –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä–æ–∑—É–º–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑ AI');

    // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
    const analysisPrompt = this.createAnalysisPrompt(userProfile, dayPlan, workoutLog, previousLogs);
    
    try {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Å–µ—Ä–≤—ñ—Å, –∞–ª–µ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
      const result = await generateWorkoutAnalysis({
        userProfile,
        dayPlan,
        lastWorkoutLog: workoutLog,
        previousWorkoutLogs: previousLogs,
        customPrompt: analysisPrompt
      });

      // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
      const nextWorkoutRecommendations = this.processRecommendationsForNextWorkout(
        result.dailyRecommendations,
        dayPlan,
        workoutLog
      );

      return {
        nextWorkoutRecommendations,
        overallRecommendation: result.recommendation
      };

    } catch (error) {
      console.error('‚ùå [BackgroundAnalysis] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó AI –∞–Ω–∞–ª—ñ–∑—É:', error);
      
      // Fallback - —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
      return this.createFallbackRecommendations(dayPlan, workoutLog);
    }
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
   */
  private createAnalysisPrompt(
    userProfile: UserProfile,
    dayPlan: DailyWorkoutPlan,
    workoutLog: WorkoutLog,
    previousLogs: WorkoutLog[]
  ): string {
    const completedExercises = workoutLog.loggedExercises || [];
    const skippedExercises = dayPlan.exercises.filter(ex => 
      !completedExercises.some(logged => logged.exerciseName === ex.name)
    );

    return `
–ê–ù–ê–õ–Ü–ó –¢–†–ï–ù–£–í–ê–ù–ù–Ø –î–õ–Ø –ù–ê–°–¢–£–ü–ù–û–á –°–ï–°–Ü–á:

–ü–†–û–§–Ü–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê:
- –†—ñ–≤–µ–Ω—å: ${userProfile.experienceLevel}
- –ú–µ—Ç–∞: ${userProfile.goal}
- –ü—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤'—è: ${userProfile.healthProfile?.conditions?.filter(c => c.isActive).map(c => c.condition).join(', ') || '–ù–µ–º–∞—î'}

–í–ò–ö–û–ù–ê–ù–ï –¢–†–ï–ù–£–í–ê–ù–ù–Ø (–î–µ–Ω—å ${workoutLog.dayCompleted}):
- –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${Math.floor((workoutLog.duration || 0) / 60)} —Ö–≤–∏–ª–∏–Ω
- –í–∏–∫–æ–Ω–∞–Ω–æ –≤–ø—Ä–∞–≤: ${completedExercises.length} –∑ ${dayPlan.exercises.length}
- –°–∞–º–æ–ø–æ—á—É—Ç—Ç—è: ${workoutLog.wellnessCheck ? `–ï–Ω–µ—Ä–≥—ñ—è: ${workoutLog.wellnessCheck.energyLevel}, –ú–æ—Ç–∏–≤–∞—Ü—ñ—è: ${workoutLog.wellnessCheck.motivation}/10` : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

–î–ï–¢–ê–õ–Ü –í–ò–ö–û–ù–ê–ù–ù–Ø (–ö–û–ù–ö–†–ï–¢–ù–Ü –¶–ò–§–†–ò):
${completedExercises.map(ex => {
  const totalVolume = ex.loggedSets?.reduce((sum, set) => 
    sum + ((set.weightUsed || 0) * (set.repsAchieved || 0)), 0) || 0;
  
  const setsDetails = ex.loggedSets?.map((set, index) => 
    `–ü—ñ–¥—Ö—ñ–¥ ${index + 1}: ${set.repsAchieved || 0} –ø–æ–≤—Ç. @ ${set.weightUsed || 0}–∫–≥`
  ).join(', ') || '–î–µ—Ç–∞–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ';
  
  return `- ${ex.exerciseName}:
    * –í—Å—å–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—ñ–≤: ${ex.loggedSets?.length || 0}
    * –î–µ—Ç–∞–ª—ñ: ${setsDetails}
    * –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±'—î–º: ${totalVolume}–∫–≥`;
}).join('\n')}

${skippedExercises.length > 0 ? `–ü–†–û–ü–£–©–ï–ù–Ü –í–ü–†–ê–í–ò:\n${skippedExercises.map(ex => `- ${ex.name}: ${ex.sets} –ø—ñ–¥—Ö–æ–¥—ñ–≤ –ø–æ ${ex.reps}`).join('\n')}` : ''}

–Ü–°–¢–û–†–Ü–Ø (–æ—Å—Ç–∞–Ω–Ω—ñ ${Math.min(3, previousLogs.length)} —Ç—Ä–µ–Ω—É–≤–∞–Ω—å):
${previousLogs.slice(0, 3).map(log => {
  const logDate = log.date instanceof Date ? log.date : new Date(log.date.seconds * 1000);
  return `- ${logDate.toLocaleDateString()}: ${log.loggedExercises?.length || 0} –≤–ø—Ä–∞–≤, ${Math.floor((log.duration || 0) / 60)} —Ö–≤`;
}).join('\n')}

–ó–ê–í–î–ê–ù–ù–Ø:
–¢–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–µ—Ä, —è–∫–∏–π –∑–Ω–∞—î —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –î–∞–π –ñ–ò–í–Ü, –ü–ï–†–°–û–ù–ê–õ–Ü–ó–û–í–ê–ù–Ü —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:

1. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –ø—Ä–æ–≥—Ä–µ—Å –ø–æ –∫–æ–∂–Ω—ñ–π –≤–ø—Ä–∞–≤—ñ –ö–û–ù–ö–†–ï–¢–ù–û –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
2. –í—Ä–∞—Ö—É–π –ø—Ä–æ–ø—É—â–µ–Ω—ñ –≤–ø—Ä–∞–≤–∏ —Ç–∞ –¥–∞–π –ø–æ—Ä–∞–¥–∏ —è–∫ —ó—Ö —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏
3. –ê–¥–∞–ø—Ç—É–π –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –†–ï–ê–õ–¨–ù–û–ì–û –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
4. –í—Ä–∞—Ö—É–π —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è —Ç–∞ –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤'—è
5. –î–∞–π –ö–û–ù–ö–†–ï–¢–ù–Ü, –ü–ï–†–°–û–ù–ê–õ–¨–ù–Ü —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ù–ê–°–¢–£–ü–ù–û–ì–û —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è

–°–¢–ò–õ–¨ –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–ô:
- –ì–æ–≤–æ—Ä–∏ —è–∫ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ç—Ä–µ–Ω–µ—Ä, —è–∫–∏–π –∑–Ω–∞—î —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Å–æ–±–∏—Å—Ç–æ
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ü–∏—Ñ—Ä–∏ –∑ –π–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
- –ë—É–¥—å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞ –ø–æ —Å—É—Ç—ñ - –º–∞–∫—Å–∏–º—É–º 2-3 —Ä–µ—á–µ–Ω–Ω—è –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é
- –ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ—é –º–æ–≤–æ—é, —è–∫ —Ä–µ–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–µ—Ä –≤ –∑–∞–ª—ñ
- –ú–æ—Ç–∏–≤—É–π, –∞–ª–µ –Ω–µ –ø–µ—Ä–µ–±—ñ–ª—å—à—É–π - —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ –æ—Ü—ñ–Ω—é–π –ø—Ä–æ–≥—Ä–µ—Å

–§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü JSON:
{
  "recommendations": [
    {
      "exerciseName": "–Ω–∞–∑–≤–∞ –≤–ø—Ä–∞–≤–∏",
      "recommendation": "–ö–û–ù–ö–†–ï–¢–ù–ê –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –∑ –º–æ–∂–Ω–∞ —Ç—Ä–æ—Ö–∏ –∑ —Ü–∏—Ñ—Ä–∞–º–∏ —Ç–∞ –º–æ—Ç–∏–≤–∞—Ü—ñ—î—é",
      "reason": "–î–µ—Ç–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ß–û–ú–£ —Å–∞–º–µ —Ç–∞–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –π–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è",
      "suggestedWeight": —á–∏—Å–ª–æ_–∞–±–æ_null,
      "suggestedReps": "–¥—ñ–∞–ø–∞–∑–æ–Ω_–∞–±–æ_null",
      "suggestedSets": —á–∏—Å–ª–æ_–∞–±–æ_null,
      "action": "increase_weight/decrease_weight/maintain/focus_technique"
    }
  ],
  "overallRecommendation": {
    "text": "–ó–∞–≥–∞–ª—å–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ –º–æ—Ç–∏–≤–∞—Ü—ñ—î—é",
    "action": "maintain"
  }
}

–ü–†–ò–ö–õ–ê–î –•–û–†–û–®–û–á –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:
"–í—ñ–¥–º—ñ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ –ø—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è–º–∏! –¢–∏ –≤–ø–µ–≤–Ω–µ–Ω–æ –≤–∏–∫–æ–Ω–∞–≤ –≤—Å—ñ 4 –ø—ñ–¥—Ö–æ–¥–∏ –ø–æ 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω—å –∑ 60–∫–≥. –¢–≤–æ—è —Ç–µ—Ö–Ω—ñ–∫–∞ —Å—Ç–∞–±—ñ–ª—å–Ω–∞, —Ç–æ–º—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—ñ —Å–ø—Ä–æ–±—É–π –∑–±—ñ–ª—å—à–∏—Ç–∏ –≤–∞–≥—É –¥–æ 62.5–∫–≥. –¶–µ –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –ø—Ä–æ–≥—Ä–µ—Å—É–≤–∞—Ç–∏ –¥–æ —Ç–≤–æ—î—ó –º–µ—Ç–∏ –Ω–∞–±–æ—Ä—É –º'—è–∑–æ–≤–æ—ó –º–∞—Å–∏."

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û:
- –ó–ê–í–ñ–î–ò –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–û–ß–ù–Ü —Ü–∏—Ñ—Ä–∏ –∑ "–î–ï–¢–ê–õ–Ü –í–ò–ö–û–ù–ê–ù–ù–Ø"
- –ù–ï –≤–∏–≥–∞–¥—É–π —Ü–∏—Ñ—Ä–∏ - –±–µ—Ä–∏ —Ç—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–æ–±–∏–≤ 70–∫–≥ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –≤–∞–≥—É —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ –¥–æ –π–æ–≥–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
- –í—Ä–∞—Ö–æ–≤—É–π –†–ï–ê–õ–¨–ù–£ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—Ö–æ–¥—ñ–≤ —Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
- –ó–±—ñ–ª—å—à—É–π –≤–∞–≥—É –∑–≥—ñ–¥–Ω–æ –ø—Ä–∞–≤–µ–ª—å–Ω–∏—Ö –º–µ—Ç–æ–¥–∏–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–º—ñ–≥ –≤–∏–∫–æ–Ω–∞—Ç–∏ –≤—Å—ñ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∑–º–µ–Ω—à–∏—Ç–∏ –≤–∞–≥—É

–£–ù–ò–ö–ê–ô:
- –ó–∞–≥–∞–ª—å–Ω–∏—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø—É "–ø—ñ–¥—Ç—Ä–∏–º—É–π—Ç–µ –ø–æ—Ç–æ—á–Ω—É –≤–∞–≥—É"
- –ù–µ—Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö —Å—Ç—Ä–∏–±–∫—ñ–≤ —É –≤–∞–∑—ñ (–±—ñ–ª—å—à–µ 10–∫–≥)
- –Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö —Ü–∏—Ñ—Ä –∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
`;
  }

  /**
   * –û–±—Ä–æ–±–ª—è—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
   */
  private processRecommendationsForNextWorkout(
    dailyRecommendations: any[],
    dayPlan: DailyWorkoutPlan,
    workoutLog: WorkoutLog
  ): ExerciseRecommendation[] {
    const completedExercises = workoutLog.loggedExercises || [];
    const recommendations: ExerciseRecommendation[] = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –≤–ø—Ä–∞–≤
    dailyRecommendations.forEach(rec => {
      recommendations.push({
        exerciseName: rec.exerciseName,
        recommendation: rec.recommendation,
        suggestedWeight: rec.suggestedWeight,
        suggestedReps: rec.suggestedReps,
        suggestedSets: rec.suggestedSets,
        reason: rec.reason || '–ù–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è',
        action: rec.action || 'maintain'
      });
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –≤–ø—Ä–∞–≤
    const skippedExercises = dayPlan.exercises.filter(ex => 
      !completedExercises.some(logged => logged.exerciseName === ex.name)
    );

    skippedExercises.forEach(exercise => {
      recommendations.push({
        exerciseName: exercise.name,
        recommendation: `–í–ø—Ä–∞–≤—É –±—É–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ –≤ –º–∏–Ω—É–ª–æ–º—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—ñ. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ —ó—ó –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞–∑ –¥–ª—è –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É.`,
        reason: '–í–ø—Ä–∞–≤–∞ –±—É–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞',
        action: 'maintain'
      });
    });

    return recommendations;
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î –±–∞–∑–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —è–∫—â–æ AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
   */
  private createFallbackRecommendations(
    dayPlan: DailyWorkoutPlan,
    workoutLog: WorkoutLog
  ): {
    nextWorkoutRecommendations: ExerciseRecommendation[];
    overallRecommendation: { text: string; action: string };
  } {
    const completedExercises = workoutLog.loggedExercises || [];
    const recommendations: ExerciseRecommendation[] = [];

    // –ë–∞–∑–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –≤–ø—Ä–∞–≤
    completedExercises.forEach(loggedEx => {
      const avgWeight = loggedEx.loggedSets?.reduce((sum, set) => sum + (set.weightUsed || 0), 0) / (loggedEx.loggedSets?.length || 1);
      const avgReps = loggedEx.loggedSets?.reduce((sum, set) => sum + (set.repsAchieved || 0), 0) / (loggedEx.loggedSets?.length || 1);
      
      recommendations.push({
        exerciseName: loggedEx.exerciseName,
        recommendation: loggedEx.completedSuccessfully 
          ? '–í–ø—Ä–∞–≤–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ —Ç—Ä–æ—Ö–∏ –∑–±—ñ–ª—å—à–∏—Ç–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.'
          : '–í–ø—Ä–∞–≤–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ –∑ —Ç—Ä—É–¥–Ω–æ—â–∞–º–∏. –ó–æ—Å–µ—Ä–µ–¥—å—Ç–µ—Å—è –Ω–∞ —Ç–µ—Ö–Ω—ñ—Ü—ñ —Ç–∞ –ø–æ—Å—Ç—É–ø–æ–≤–æ –∑–±—ñ–ª—å—à—É–π—Ç–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.',
        suggestedWeight: avgWeight > 0 ? Math.round(avgWeight * 1.025) : undefined,
        reason: '–ë–∞–∑–æ–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è',
        action: loggedEx.completedSuccessfully ? 'increase_weight' : 'maintain'
      });
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –≤–ø—Ä–∞–≤
    const skippedExercises = dayPlan.exercises.filter(ex => 
      !completedExercises.some(logged => logged.exerciseName === ex.name)
    );

    skippedExercises.forEach(exercise => {
      recommendations.push({
        exerciseName: exercise.name,
        recommendation: '–í–ø—Ä–∞–≤—É –±—É–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ —ó—ó –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—ñ –¥–ª—è –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É.',
        reason: '–í–ø—Ä–∞–≤–∞ –±—É–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞',
        action: 'maintain'
      });
    });

    return {
      nextWorkoutRecommendations: recommendations,
      overallRecommendation: {
        text: '–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ—ó –≤–ø—Ä–∞–≤–∏.',
        action: 'maintain'
      }
    };
  }

  /**
   * –ü–æ–∑–Ω–∞—á–∞—î –∞–Ω–∞–ª—ñ–∑ —è–∫ –Ω–µ–≤–¥–∞–ª–∏–π
   */
  private async markAnalysisAsFailed(
    queueItem: {
      log: WorkoutLog;
      saveWorkoutLog: (log: WorkoutLog) => Promise<WorkoutLog>;
    },
    error: Error
  ): Promise<void> {
    const { log, saveWorkoutLog } = queueItem;
    
    const failedLog = {
      ...log,
      analysisStatus: 'failed' as const,
      analysisCompletedAt: new Date()
    };

    try {
      await saveWorkoutLog(failedLog);
      console.log('‚ö†Ô∏è [BackgroundAnalysis] –ê–Ω–∞–ª—ñ–∑ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –Ω–µ–≤–¥–∞–ª–∏–π:', log.id);
    } catch (saveError) {
      console.error('‚ùå [BackgroundAnalysis] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ–≤–¥–∞–ª–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É:', saveError);
    }
  }

  /**
   * –ü–æ–≤—Ç–æ—Ä—é—î –Ω–µ–≤–¥–∞–ª—ñ –∞–Ω–∞–ª—ñ–∑–∏ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–µ—Ä–µ–∂—ñ
   */
  async retryFailedAnalyses(
    workoutLogs: WorkoutLog[],
    userProfile: UserProfile,
    workoutPlan: any[],
    saveWorkoutLog: (log: WorkoutLog) => Promise<WorkoutLog>
  ): Promise<void> {
    const failedLogs = workoutLogs.filter(log => 
      log.analysisStatus === 'failed' || log.analysisStatus === 'pending'
    );

    if (failedLogs.length === 0) {
      return;
    }

    console.log('üîÑ [BackgroundAnalysis] –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –Ω–µ–≤–¥–∞–ª—ñ –∞–Ω–∞–ª—ñ–∑–∏:', failedLogs.length);

    for (const log of failedLogs) {
      if (!log.dayCompleted) continue;
      
      const dayPlan = workoutPlan.find(day => day.day === log.dayCompleted);
      if (!dayPlan) continue;

      const previousLogs = workoutLogs.filter(l => 
        l.id !== log.id && 
        l.analysisStatus === 'completed'
      ).slice(0, 5);

      await this.queueWorkoutForAnalysis(
        log,
        userProfile,
        dayPlan,
        previousLogs,
        saveWorkoutLog
      );
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
   */
  getRecommendationsForDay(workoutLogs: WorkoutLog[], dayNumber: number): ExerciseRecommendation[] {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è
    const lastAnalyzedLog = workoutLogs
      .filter(log => 
        log.dayCompleted === dayNumber && 
        log.analysisStatus === 'completed' &&
        log.nextWorkoutRecommendations
      )
      .sort((a, b) => {
        const dateA = a.date instanceof Date ? a.date : new Date(a.date.seconds * 1000);
        const dateB = b.date instanceof Date ? b.date : new Date(b.date.seconds * 1000);
        return dateB.getTime() - dateA.getTime();
      })[0];

    return lastAnalyzedLog?.nextWorkoutRecommendations || [];
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ singleton instance
export const backgroundAnalysisService = BackgroundWorkoutAnalysisService.getInstance();
