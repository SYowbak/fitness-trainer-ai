import { UserProfile, DailyWorkoutPlan, WorkoutLog, WorkoutAnalysisResult, Exercise, ExerciseRecommendation } from '../types';
import { generateWorkoutAnalysis, generateExerciseVariations, shouldVaryExercise } from './geminiService';

export const analyzeWorkout = async (
  userProfile: UserProfile,
  dayPlan: DailyWorkoutPlan,
  lastWorkoutLog: WorkoutLog | null,
  previousWorkoutLogs: WorkoutLog[] = []
): Promise<WorkoutAnalysisResult> => {
  try {
    console.log('üîç Starting workout analysis...', {
      dayNumber: dayPlan.day,
      exerciseCount: dayPlan.exercises.length,
      hasLastLog: !!lastWorkoutLog
    });
    
    const analysis = await generateWorkoutAnalysis({
      userProfile,
      dayPlan,
      lastWorkoutLog,
      previousWorkoutLogs
    });

    console.log('‚úÖ Workout analysis completed successfully');
    
    // Ensure all recommendations have the required action field
    const processedRecommendations: ExerciseRecommendation[] = analysis.dailyRecommendations.map(rec => ({
      exerciseName: rec.exerciseName,
      recommendation: rec.recommendation,
      suggestedWeight: rec.suggestedWeight,
      suggestedReps: rec.suggestedReps,
      suggestedSets: rec.suggestedSets,
      reason: rec.reason,
      action: (rec as any).action || 'maintain' // Ensure action field exists
    }));
    
    return {
      updatedPlan: analysis.updatedPlan,
      recommendation: analysis.recommendation,
      dailyRecommendations: processedRecommendations
    };
  } catch (error) {
    console.error('‚ö†Ô∏è Error during workout analysis:', error);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ fallback –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–º—ñ—Å—Ç—å –≤–∏–∫–∏–¥–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
    const fallbackResult: WorkoutAnalysisResult = {
      updatedPlan: {
        ...dayPlan,
        notes: dayPlan.notes || '–ü–ª–∞–Ω –∑–∞–ª–∏—à–µ–Ω–æ –±–µ–∑ –∑–º—ñ–Ω'
      },
      recommendation: {
        text: '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –ø–ª–∞–Ω–æ–º.',
        action: 'maintain'
      },
      dailyRecommendations: dayPlan.exercises.map(ex => ({
        exerciseName: ex.name,
        recommendation: '–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –ø–ª–∞–Ω–æ–º',
        action: 'maintain',
        reason: '–ê–Ω–∞–ª—ñ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'
      }))
    };
    
    console.log('üîÑ Returning fallback analysis result');
    return fallbackResult;
  }
};

export const getExerciseVariations = async (
  userProfile: UserProfile,
  exercise: Exercise,
  workoutHistory: WorkoutLog[],
  targetMuscleGroup: string
): Promise<Exercise[]> => {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∞—Ä—ñ—é–≤–∞—Ç–∏ –≤–ø—Ä–∞–≤—É
    if (shouldVaryExercise(exercise.name, userProfile, workoutHistory)) {
      const variations = await generateExerciseVariations(
        exercise.name,
        userProfile,
        `variation for ${targetMuscleGroup}`
      );
      return variations;
    }
    return [];
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–∞—Ä—ñ–∞—Ü—ñ–π –≤–ø—Ä–∞–≤:', error);
    return [];
  }
};

export const analyzeProgressTrends = (workoutHistory: WorkoutLog[]): {
  overallProgress: 'improving' | 'plateau' | 'declining';
  strengthProgress: number;
  enduranceProgress: number;
  consistencyScore: number;
} => {
  if (workoutHistory.length < 2) {
    return {
      overallProgress: 'plateau',
      strengthProgress: 0,
      enduranceProgress: 0,
      consistencyScore: 0
    };
  }

  // –°–æ—Ä—Ç—É—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –Ω–∞–π–Ω–æ–≤—ñ—à–∏—Ö –¥–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏—Ö
  const sortedWorkouts = [...workoutHistory].sort((a, b) => {
    const dateA = a.date instanceof Date ? a.date : new Date(a.date.seconds * 1000);
    const dateB = b.date instanceof Date ? b.date : new Date(b.date.seconds * 1000);
    return dateB.getTime() - dateA.getTime();
  });

  // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ –Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–æ—é —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é (–±—ñ–ª—å—à–µ 3 –≥–æ–¥–∏–Ω) - –π–º–æ–≤—ñ—Ä–Ω–æ –∑–∞–±—É—Ç—ñ
  const filteredWorkouts = sortedWorkouts.filter(workout => {
    // –Ø–∫—â–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –±—ñ–ª—å—à–µ 3 –≥–æ–¥–∏–Ω (10800 —Å–µ–∫—É–Ω–¥), –≤–≤–∞–∂–∞—î–º–æ —ó—ó –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ—é
    // –¢–∞–∫–æ–∂ –≤–∫–ª—é—á–∞—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –±–µ–∑ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ (—Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏)
    return !workout.duration || workout.duration <= 10800;
  });

  // –Ø–∫—â–æ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–ª–∏—à–∏–ª–æ—Å—è –º–µ–Ω—à–µ 2 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ
  const validWorkouts = filteredWorkouts.length >= 2 ? filteredWorkouts : sortedWorkouts;
  
  // –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (–∞–±–æ –º–µ–Ω—à–µ, —è–∫—â–æ —ó—Ö –º–µ–Ω—à–µ)
  const recentWorkouts = validWorkouts.slice(0, Math.min(10, validWorkouts.length));
  
  // –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –¥–≤—ñ –≥—Ä—É–ø–∏ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
  const newerHalf = recentWorkouts.slice(0, Math.ceil(recentWorkouts.length / 2));
  const olderHalf = recentWorkouts.slice(Math.ceil(recentWorkouts.length / 2));

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–µ—Ç—Ä–∏–∫ –≥—Ä—É–ø–∏
  const calculateGroupMetrics = (workouts: WorkoutLog[]) => {
    let totalWeight = 0;
    let totalReps = 0;
    let totalSets = 0;
    let completedWorkouts = 0;
    let totalVolume = 0; // –≤–∞–≥–∞ √ó –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤

    workouts.forEach(workout => {
      if (workout.loggedExercises && Array.isArray(workout.loggedExercises) && workout.loggedExercises.length > 0) {
        completedWorkouts++;
        workout.loggedExercises.forEach(exercise => {
          if (exercise.loggedSets && Array.isArray(exercise.loggedSets)) {
            exercise.loggedSets.forEach(set => {
              // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ completed –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ
              if (set.weightUsed !== null && set.weightUsed !== undefined && set.repsAchieved !== null && set.repsAchieved !== undefined) {
                totalWeight += set.weightUsed;
                totalReps += set.repsAchieved;
                totalSets++;
                totalVolume += set.weightUsed * set.repsAchieved;
              }
            });
          }
        });
      }
    });

    return {
      avgWeightPerSet: totalSets > 0 ? totalWeight / totalSets : 0,
      avgRepsPerSet: totalSets > 0 ? totalReps / totalSets : 0,
      avgVolumePerSet: totalSets > 0 ? totalVolume / totalSets : 0,
      completionRate: workouts.length > 0 ? (completedWorkouts / workouts.length) * 100 : 0,
      totalSets
    };
  };

  const newerMetrics = calculateGroupMetrics(newerHalf);
  const olderMetrics = calculateGroupMetrics(olderHalf);

  // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
  const weightImprovement = olderMetrics.avgWeightPerSet > 0 
    ? ((newerMetrics.avgWeightPerSet - olderMetrics.avgWeightPerSet) / olderMetrics.avgWeightPerSet) * 100 
    : (newerMetrics.avgWeightPerSet > 0 ? 100 : 0); // –Ø–∫—â–æ —Å—Ç–∞—Ä–µ –∑–Ω–∞—á–µ–Ω–Ω—è 0, –∞ –Ω–æ–≤–µ > 0, —Ç–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è 100%
  
  const repsImprovement = olderMetrics.avgRepsPerSet > 0 
    ? ((newerMetrics.avgRepsPerSet - olderMetrics.avgRepsPerSet) / olderMetrics.avgRepsPerSet) * 100 
    : (newerMetrics.avgRepsPerSet > 0 ? 100 : 0); // –Ø–∫—â–æ —Å—Ç–∞—Ä–µ –∑–Ω–∞—á–µ–Ω–Ω—è 0, –∞ –Ω–æ–≤–µ > 0, —Ç–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è 100%
    
  const volumeImprovement = olderMetrics.avgVolumePerSet > 0 
    ? ((newerMetrics.avgVolumePerSet - olderMetrics.avgVolumePerSet) / olderMetrics.avgVolumePerSet) * 100 
    : (newerMetrics.avgVolumePerSet > 0 ? 100 : 0); // –Ø–∫—â–æ —Å—Ç–∞—Ä–µ –∑–Ω–∞—á–µ–Ω–Ω—è 0, –∞ –Ω–æ–≤–µ > 0, —Ç–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è 100%

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–∫—Ä–∞—â–µ–Ω—å
  let overallProgress: 'improving' | 'plateau' | 'declining';
  
  // –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—É (–≤–∞–≥–∞ –º–∞—î –±—ñ–ª—å—à–∏–π –≤–ø–ª–∏–≤ –¥–ª—è —Å–∏–ª–æ–≤–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å)
  const combinedProgress = (weightImprovement * 0.4) + (repsImprovement * 0.3) + (volumeImprovement * 0.3);
  
  console.log('üìä Progress Analysis:', {
    weightImprovement: Math.round(weightImprovement * 100) / 100,
    repsImprovement: Math.round(repsImprovement * 100) / 100,
    volumeImprovement: Math.round(volumeImprovement * 100) / 100,
    combinedProgress: Math.round(combinedProgress * 100) / 100,
    newerMetrics,
    olderMetrics
  });
  
  if (combinedProgress > 5) {
    overallProgress = 'improving';
  } else if (combinedProgress < -5) {
    overallProgress = 'declining';
  } else {
    overallProgress = 'plateau';
  }

  // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å
  const consistencyScore = Math.min(100, newerMetrics.completionRate);

  return {
    overallProgress,
    strengthProgress: Math.round(weightImprovement * 10) / 10, // –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∞–≥–∏
    enduranceProgress: Math.round(repsImprovement * 10) / 10, // –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
    consistencyScore: Math.round(consistencyScore)
  };
}; 