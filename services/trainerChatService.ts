import { GoogleGenerativeAI } from '@google/generative-ai';
import { UserProfile, DailyWorkoutPlan } from '../types';
import { UI_TEXT, GEMINI_MODELS } from '../constants';
import { withQuotaManagement, shouldEnableAIFeature, getSmartModel } from '../utils/apiQuotaManager';
import { generateNewExercise, regenerateExercise } from './workoutEditService';
import { v4 as uuidv4 } from 'uuid';

const ai = new GoogleGenerativeAI((import.meta as any).env.VITE_API_KEY || '');

interface TrainerAction {
  type: 'chat' | 'modify_workout' | 'replace_exercise' | 'add_exercise' | 'remove_exercise' | 'modify_exercise_params' | 'confirm_action';
  data?: any;
}

interface TrainerResponse {
  message: string;
  action?: TrainerAction;
  modifiedPlan?: DailyWorkoutPlan;
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤–∏—á–∞–π–Ω–∏—Ö (–Ω–µ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏—Ö) –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —á–∞—Ç—É
const generateRegularChatResponse = async (
  userProfile: UserProfile,
  userMessage: string,
  conversationHistory: Array<{ role: 'user' | 'assistant'; content: string }>,
  todaysWorkout?: DailyWorkoutPlan | null
): Promise<TrainerResponse> => {
  const recentHistory = conversationHistory.slice(-4); // –û—Å—Ç–∞–Ω–Ω—ñ 4 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  
  const chatPrompt = `–¢–∏ - —Ä–æ–∑—É–º–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –∑—Ä–æ–∑—É–º—ñ–ª–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ.

–ü—Ä–æ—Ñ—ñ–ª—å: –í—ñ–∫ ${userProfile.age}, —Ü—ñ–ª—å: ${userProfile.goal}

${todaysWorkout ? `–ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: ${todaysWorkout.exercises.map(e => `${e.name} (${e.sets} –ø—ñ–¥—Ö–æ–¥–∏, ${e.reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω—å, –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ ${e.rest})`).join(', ')}` : ''}

${recentHistory.length > 0 ? `–û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n${recentHistory.map(msg => `${msg.role === 'user' ? '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á' : '–¢—Ä–µ–Ω–µ—Ä'}: ${msg.content}`).join('\n')}\n` : ''}

–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${userMessage}

–ú–û–ñ–õ–ò–í–û–°–¢–Ü –†–û–ó–£–ú–ù–û–ì–û –¢–†–ï–ù–ï–†–ê:
üîß –ú–û–î–ò–§–Ü–ö–ê–¶–Ü–Ø –¢–†–ï–ù–£–í–ê–ù–¨:
- –ó–∞–º—ñ–Ω–∞ –≤–ø—Ä–∞–≤: "–∑–∞–º—ñ–Ω–∏ –ø—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –Ω–∞ –∂–∏–º –Ω–æ–≥–∞–º–∏"
- –ó–º—ñ–Ω–∞ –ø—ñ–¥—Ö–æ–¥—ñ–≤: "–∑—Ä–æ–±–∏ 4 –ø—ñ–¥—Ö–æ–¥–∏ –∑–∞–º—ñ—Å—Ç—å 3 –¥–ª—è –∂–∏–º—É"
- –ó–º—ñ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å: "–∑–±—ñ–ª—å—à –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –¥–æ 15 –¥–ª—è –≤—ñ–¥–∂–∏–º–∞–Ω—å"
- –ó–º—ñ–Ω–∞ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É: "–∑–º–µ–Ω—à –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ –¥–æ 45 —Å–µ–∫—É–Ω–¥"
- –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–ª—å–æ–≤–æ—ó –≤–∞–≥–∏: "–≤—Å—Ç–∞–Ω–æ–≤–∏ —Ü—ñ–ª—å–æ–≤—É –≤–∞–≥—É 60–∫–≥ –¥–ª—è –ø—Ä–∏—Å—ñ–¥–∞–Ω—å"
- –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–ø—Ä–∞–≤: "–¥–æ–¥–∞–π –≤–ø—Ä–∞–≤—É –Ω–∞ —Ç—Ä–∏—Ü–µ–ø—Å"
- –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤–ø—Ä–∞–≤: "–ø—Ä–∏–±–µ—Ä–∏ –ø–ª–∞–Ω–∫—É"

üìä –ê–ù–ê–õ–Ü–ó –¢–ê –ü–û–†–ê–î–ò:
- –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–≥—Ä–µ—Å—É: "—è–∫ –º—ñ–π –ø—Ä–æ–≥—Ä–µ—Å?", "—â–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏?"
- –¢–µ—Ö–Ω—ñ–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: "—è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–æ–±–∏—Ç–∏ –∂–∏–º –ª–µ–∂–∞—á–∏?"
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –≤–∞–∑—ñ: "—è–∫—É –≤–∞–≥—É –≤–∑—è—Ç–∏ –¥–ª—è –ø—Ä–∏—Å—ñ–¥–∞–Ω—å?"
- –ü–æ—Ä–∞–¥–∏ –ø–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—é: "—è–∫ –∫—Ä–∞—â–µ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏ –º—ñ–∂ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏?"

üí° –ú–û–¢–ò–í–ê–¶–Ü–Ø –¢–ê –ü–Ü–î–¢–†–ò–ú–ö–ê:
- –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—ñ –ø–æ—Ä–∞–¥–∏
- –ü–æ—è—Å–Ω–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—ñ –≤–ø—Ä–∞–≤
- –î–æ–ø–æ–º–æ–≥–∞ –∑ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–æ—é

–í–ê–ñ–õ–ò–í–û: –ü–µ—Ä–µ–¥ –±—É–¥—å-—è–∫–∏–º–∏ –∑–º—ñ–Ω–∞–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ó–ê–í–ñ–î–ò —É—Ç–æ—á–Ω—é–π —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–æ —Ç–∏ –∑—Ä–æ–∑—É–º—ñ–≤ —ñ —á–µ–∫–∞–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è!

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –¥—Ä—É–∂–Ω—å–æ —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ. –ë—É–¥—å —Ä–æ–∑—É–º–Ω–∏–º –ø–æ–º—ñ—á–Ω–∏–∫–æ–º, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∞—Ç-–±–æ—Ç–æ–º!`;

  return withQuotaManagement(async () => {
    const selectedModel = getSmartModel(GEMINI_MODELS.CHAT);
    console.log(`–ß–∞—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–æ–¥–µ–ª—å: ${selectedModel}`);
    
    const model = ai!.getGenerativeModel({ model: selectedModel });
    const response = await model.generateContent(chatPrompt);
    const result = await response.response;
    
    return {
      message: result.text()
    };
  }, { message: '–ü—Ä–æ–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ AI. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.' }, { 
    priority: 'high',
    bypassQuotaInDev: true,
  skipOnQuotaExceeded: false  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ false –¥–ª—è —á–∞—Ç—É ‚Äî —Ö–æ—á–µ–º–æ, —â–æ–± –ø—Ä–∞—Ü—é–≤–∞–ª–æ
  });
};

// –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —á–∞—Ç –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
const generateEnhancedChatResponse = async (
  userProfile: UserProfile,
  userMessage: string,
  conversationHistory: Array<{ role: 'user' | 'assistant'; content: string }>,
  todaysWorkout?: DailyWorkoutPlan | null,
  currentWorkoutPlan?: DailyWorkoutPlan[] | null,
  context?: { wantsAnalysis?: boolean; wantsTechnique?: boolean; wantsMotivation?: boolean }
): Promise<TrainerResponse> => {
  const recentHistory = conversationHistory.slice(-4);
  
  let contextPrompt = `–¢–∏ - —Ä–æ–∑—É–º–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä –∑ –≥–ª–∏–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–Ω—è–º–∏. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ —Ç–∞ –∫–æ—Ä–∏—Å–Ω–æ.

–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: –í—ñ–∫ ${userProfile.age}, —Ü—ñ–ª—å: ${userProfile.goal}`;

  if (todaysWorkout) {
    contextPrompt += `\n\n–ü–æ—Ç–æ—á–Ω–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:
${todaysWorkout.exercises.map((e, i) => `${i + 1}. ${e.name}
   - –ü—ñ–¥—Ö–æ–¥–∏: ${e.sets}, –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è: ${e.reps}
   - –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫: ${e.rest}
   - –û–ø–∏—Å: ${e.description.substring(0, 100)}...`).join('\n')}`;
  }

  if (currentWorkoutPlan) {
    contextPrompt += `\n\n–ó–∞–≥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω: ${currentWorkoutPlan.length} —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–Ω—ñ–≤`;
  }

  if (recentHistory.length > 0) {
    contextPrompt += `\n\n–û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n${recentHistory.map(msg => 
      `${msg.role === 'user' ? '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á' : '–¢—Ä–µ–Ω–µ—Ä'}: ${msg.content}`
    ).join('\n')}`;
  }

  contextPrompt += `\n\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${userMessage}`;

  if (context?.wantsAnalysis) {
    contextPrompt += `\n\nüéØ –§–û–ö–£–° –ù–ê –ê–ù–ê–õ–Ü–ó–Ü:
- –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –ø–æ—Ç–æ—á–Ω–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
- –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
- –í–∫–∞–∂–∏ –Ω–∞ —Å–∏–ª—å–Ω—ñ —Ç–∞ —Å–ª–∞–±–∫—ñ —Å—Ç–æ—Ä–æ–Ω–∏
- –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—É`;
  }

  if (context?.wantsTechnique) {
    contextPrompt += `\n\nüèãÔ∏è –§–û–ö–£–° –ù–ê –¢–ï–•–ù–Ü–¶–Ü:
- –î–∞–π –¥–µ—Ç–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ —Ç–µ—Ö–Ω—ñ–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
- –í–∫–∞–∂–∏ –Ω–∞ —Ç–∏–ø–æ–≤—ñ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ —è–∫ —ó—Ö —É–Ω–∏–∫–Ω—É—Ç–∏
- –ü–æ—è—Å–Ω–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –¥–∏—Ö–∞–Ω–Ω—è —Ç–∞ –ø–æ–ª–æ–∂–µ–Ω–Ω—è —Ç—ñ–ª–∞
- –î–∞–π –ø–æ—Ä–∞–¥–∏ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è`;
  }

  if (context?.wantsMotivation) {
    contextPrompt += `\n\nüí™ –§–û–ö–£–° –ù–ê –ú–û–¢–ò–í–ê–¶–Ü–á:
- –î–∞–π –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É
- –ü–æ—è—Å–Ω–∏ –∫–æ—Ä–∏—Å—Ç—å –≤—ñ–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
- –î–æ–ø–æ–º–æ–∂–∏ –ø–æ–¥–æ–ª–∞—Ç–∏ –ª—ñ–Ω—å –∞–±–æ –≤—Ç–æ–º—É
- –ù–∞–≥–∞–¥–∞–π –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ç–∞ —Ü—ñ–ª—ñ`;
  }

  contextPrompt += `\n\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –±—É–¥—å –∫–æ—Ä–∏—Å–Ω–∏–º —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–º. –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏!`;

  return withQuotaManagement(async () => {
    const selectedModel = getSmartModel(GEMINI_MODELS.CHAT);
    console.log(`–†–æ–∑—à–∏—Ä–µ–Ω–∏–π —á–∞—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–æ–¥–µ–ª—å: ${selectedModel}`);
    
    const model = ai!.getGenerativeModel({ model: selectedModel });
    const response = await model.generateContent(contextPrompt);
    const result = await response.response;
    
    return {
      message: result.text()
    };
  }, { message: '–ü—Ä–æ–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ AI. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.' }, { 
    priority: 'medium',
    bypassQuotaInDev: true,
    skipOnQuotaExceeded: false
  });
};

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–º—ñ–Ω —É –ø–ª–∞–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
const handleWorkoutModification = async (
  userProfile: UserProfile,
  userMessage: string,
  todaysWorkout: DailyWorkoutPlan,
  currentWorkoutPlan: DailyWorkoutPlan[],
  conversationHistory: Array<{ role: 'user' | 'assistant'; content: string }>
): Promise<TrainerResponse> => {
  const modificationPrompt = `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:

"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${userMessage}"

–ü–æ—Ç–æ—á–Ω—ñ –≤–ø—Ä–∞–≤–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:
${todaysWorkout.exercises.map((ex, i) => `${i + 1}. ${ex.name}
   - –ü—ñ–¥—Ö–æ–¥–∏: ${ex.sets}
   - –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è: ${ex.reps}
   - –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫: ${ex.rest}
   - –¶—ñ–ª—å–æ–≤–∞ –≤–∞–≥–∞: ${ex.targetWeight || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: ${ex.recommendation?.text || '–Ω–µ–º–∞—î'}`).join('\n')}

–í–∏–∑–Ω–∞—á –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥—ñ—é:
1. replace_exercise: –∑–∞–º—ñ–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≤–ø—Ä–∞–≤–∏
2. add_exercise: –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –≤–ø—Ä–∞–≤–∏  
3. remove_exercise: –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–ø—Ä–∞–≤–∏
4. modify_exercise_params: –∑–º—ñ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤–ø—Ä–∞–≤–∏ (–ø—ñ–¥—Ö–æ–¥–∏, –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è, –≤–∞–≥–∞, –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫)
5. confirm_action: –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—ñ—ó (—è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –∑–º—ñ–Ω–∏)
6. chat: –ø—Ä–æ—Å—Ç–æ —Ä–æ–∑–º–æ–≤–∞

–í–ê–ñ–õ–ò–í–û: –î–ª—è –±—É–¥—å-—è–∫–∏—Ö –∑–º—ñ–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ó–ê–í–ñ–î–ò —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–∏—Ç—É–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!

–î–ª—è modify_exercise_params –¥–æ–¥–∞–π –ø–æ–ª—è: "exercise_name", "sets", "reps", "rest", "target_weight", "recommendations", "confirmation_needed": true

–ü–†–ò–ö–õ–ê–î–ò JSON –í–Ü–î–ü–û–í–Ü–î–ï–ô:
- –ó–º—ñ–Ω–∞ –ø—ñ–¥—Ö–æ–¥—ñ–≤: {"action": "modify_exercise_params", "exercise_name": "–ñ–∏–º –ª–µ–∂–∞—á–∏", "sets": "4", "confirmation_needed": true}
- –ó–º—ñ–Ω–∞ –≤–∞–≥–∏: {"action": "modify_exercise_params", "exercise_name": "–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è", "target_weight": "70–∫–≥", "confirmation_needed": true}
- –ó–º—ñ–Ω–∞ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É: {"action": "modify_exercise_params", "exercise_name": "–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è", "rest": "45 —Å–µ–∫—É–Ω–¥", "confirmation_needed": true}
- –ó–∞–º—ñ–Ω–∞ –≤–ø—Ä–∞–≤–∏: {"action": "replace_exercise", "exercise_name": "–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è", "reason": "–ë—ñ–ª—å –≤ –∫–æ–ª—ñ–Ω–∞—Ö", "confirmation_needed": true}

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û: 
1. –ó–ê–í–ñ–î–ò –ø–æ–≤–µ—Ä—Ç–∞–π –¢–Ü–õ–¨–ö–ò –≤–∞–ª—ñ–¥–Ω–∏–π JSON –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É!
2. –ù–ï –¥–æ–¥–∞–≤–∞–π –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –∞–±–æ –ø—ñ—Å–ª—è JSON!
3. –Ø–∫—â–æ –≤–ø—Ä–∞–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–∞–π–±–ª–∏–∂—á—É –∑–∞ –Ω–∞–∑–≤–æ—é!

–í—ñ–¥–ø–æ–≤—ñ–¥—å JSON: {"action": "modify_exercise_params", "exercise_name": "–ù–∞–∑–≤–∞ –≤–ø—Ä–∞–≤–∏", "sets": "3", "reps": "10-12", "rest": "60 —Å–µ–∫—É–Ω–¥", "target_weight": "50", "recommendations": "–ù–æ–≤—ñ –ø–æ—Ä–∞–¥–∏", "reason": "–ü—Ä–∏—á–∏–Ω–∞", "confirmation_needed": true}`;

  try {
    const analysisResult = await withQuotaManagement(async () => {
      const selectedModel = getSmartModel(GEMINI_MODELS.ANALYSIS);
      const model = ai!.getGenerativeModel({ model: selectedModel });
      const response = await model.generateContent(modificationPrompt);
      return response.response.text();
    }, null, { 
      priority: 'high',
      bypassQuotaInDev: true,
  skipOnQuotaExceeded: false  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ false –¥–ª—è –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ–π ‚Äî —Ö–æ—á–µ–º–æ, —â–æ–± –ø—Ä–∞—Ü—é–≤–∞–ª–æ
    });

  // –ü–∞—Ä—Å–∏–º–æ JSON-–≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if (!analysisResult) {
      return {
        message: `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏: "–∑–∞–º—ñ–Ω–∏ –≤–ø—Ä–∞–≤—É [–Ω–∞–∑–≤–∞] –Ω–∞ —ñ–Ω—à—É" –∞–±–æ "–¥–æ–¥–∞–π –≤–ø—Ä–∞–≤—É".`
      };
    }
    
    let cleanResponse = analysisResult.replace(/```json|```/g, '').trim();
    
  // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏—Ç—è–≥—Ç–∏ JSON –∑ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const jsonMatch = cleanResponse.match(/\{[^}]*\}/);
    if (jsonMatch) {
      cleanResponse = jsonMatch[0];
    }
    
  let parsedAction: any;
    
    console.log('ü§ñ [handleWorkoutModification] AI –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', {
      rawResponse: analysisResult.substring(0, 200) + '...',
      cleanResponse: cleanResponse.substring(0, 200) + '...',
      isValidJSON: cleanResponse.startsWith('{') && cleanResponse.endsWith('}')
    });
    
    try {
      parsedAction = JSON.parse(cleanResponse);
      console.log('‚úÖ [handleWorkoutModification] –†–æ–∑–ø–∞—Ä—Å–∏–ª–∏ JSON:', {
        action: parsedAction.action,
        exerciseName: parsedAction.exercise_name,
        confirmationNeeded: parsedAction.confirmation_needed
      });
    } catch (parseError) {
      console.error('‚ùå [handleWorkoutModification] JSON parse error:', parseError, 'Response:', cleanResponse);
      
  // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–º—ñ—Ä –∑ —Ç–µ–∫—Å—Ç—É
      if (analysisResult.toLowerCase().includes('–∑–∞–º—ñ–Ω–∏') || analysisResult.toLowerCase().includes('–∑–∞–º—ñ–Ω')) {
        return {
          message: `–Ø —Ä–æ–∑—É–º—ñ—é —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —â–æ—Å—å –∑–∞–º—ñ–Ω–∏—Ç–∏, –∞–ª–µ –Ω–µ –º–æ–∂—É —Ç–æ—á–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏: "–∑–∞–º—ñ–Ω–∏ [–Ω–∞–∑–≤–∞ –≤–ø—Ä–∞–≤–∏] –Ω–∞ —ñ–Ω—à—É"`
        };
      }
      
      return {
        message: `–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç –±—ñ–ª—å—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ.`
      };
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if (!parsedAction.action) {
      return {
        message: `–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –¥—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –±—ñ–ª—å—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏.`
      };
    }

    // Handle different actions
    switch (parsedAction.action) {
      case 'replace_exercise': {
        const exerciseIndex = todaysWorkout.exercises.findIndex(ex => 
          ex.name.toLowerCase().includes(parsedAction.exercise_name.toLowerCase()) ||
          parsedAction.exercise_name.toLowerCase().includes(ex.name.toLowerCase())
        );

        if (exerciseIndex === -1) {
          return {
            message: `–ù–µ –∑–Ω–∞–π—à–æ–≤ –≤–ø—Ä–∞–≤—É "${parsedAction.exercise_name}". –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç, –≤–∫–∞–∑–∞–≤—à–∏ —Ç–æ—á–Ω—É –Ω–∞–∑–≤—É.`
          };
        }

        // Generate a replacement exercise
        try {
          const newExercise = await regenerateExercise(
            userProfile, 
            currentWorkoutPlan, 
            todaysWorkout.day, 
            exerciseIndex
          );

          const modifiedWorkout: DailyWorkoutPlan = {
            ...todaysWorkout,
            exercises: todaysWorkout.exercises.map((ex, i) => 
              i === exerciseIndex ? newExercise : ex
            )
          };

          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
          pendingModification = {
            actionType: 'replace_exercise',
            data: { originalIndex: exerciseIndex, newExercise },
            modifiedWorkout
          };

          return {
            message: `ü§î –Ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑—Ä–æ–∑—É–º—ñ–≤? –í–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ "${todaysWorkout.exercises[exerciseIndex].name}" –Ω–∞ "${newExercise.name}" (–î–µ–Ω—å ${modifiedWorkout.day})?\n\nüìù –ù–∞–ø–∏—à—ñ—Ç—å "—Ç–∞–∫" –∞–±–æ "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é" –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω, –∞–±–æ "–Ω—ñ" –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.`,
            action: {
              type: 'confirm_action',
              data: { originalIndex: exerciseIndex, newExercise }
            }
          };
        } catch (error) {
          return {
            message: `–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–º—ñ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.`
          };
        }
      }

      case 'add_exercise': {
        try {
          const newExercise = await generateNewExercise(
            userProfile,
            currentWorkoutPlan,
            todaysWorkout.day
          );

          const modifiedWorkout: DailyWorkoutPlan = {
            ...todaysWorkout,
            exercises: [...todaysWorkout.exercises, newExercise]
          };

          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
          pendingModification = {
            actionType: 'add_exercise',
            data: { newExercise },
            modifiedWorkout
          };

          return {
            message: `ü§î –Ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑—Ä–æ–∑—É–º—ñ–≤? –í–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –≤–ø—Ä–∞–≤—É: "${newExercise.name}" –¥–æ –î–Ω—è ${modifiedWorkout.day}?\n\nüìù –ù–∞–ø–∏—à—ñ—Ç—å "—Ç–∞–∫" –∞–±–æ "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é" –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω, –∞–±–æ "–Ω—ñ" –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.`,
            action: {
              type: 'confirm_action',
              data: { newExercise }
            }
          };
        } catch (error) {
          return {
            message: `–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –≤–ø—Ä–∞–≤—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.`
          };
        }
      }

      case 'remove_exercise': {
        const exerciseIndex = todaysWorkout.exercises.findIndex(ex => 
          ex.name.toLowerCase().includes(parsedAction.exercise_name.toLowerCase()) ||
          parsedAction.exercise_name.toLowerCase().includes(ex.name.toLowerCase())
        );

        if (exerciseIndex === -1) {
          return {
            message: `–ù–µ –∑–Ω–∞–π—à–æ–≤ –≤–ø—Ä–∞–≤—É "${parsedAction.exercise_name}".`
          };
        }

        if (todaysWorkout.exercises.length <= 1) {
          return {
            message: `–ù–µ –º–æ–∂—É –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –≤–ø—Ä–∞–≤—É. –ú—ñ–Ω—ñ–º—É–º 1 –≤–ø—Ä–∞–≤–∞ –Ω–∞ –¥–µ–Ω—å.`
          };
        }

        const modifiedWorkout: DailyWorkoutPlan = {
          ...todaysWorkout,
          exercises: todaysWorkout.exercises.filter((_, i) => i !== exerciseIndex)
        };

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        pendingModification = {
          actionType: 'remove_exercise',
          data: { removedIndex: exerciseIndex },
          modifiedWorkout
        };

        return {
          message: `ü§î –Ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑—Ä–æ–∑—É–º—ñ–≤? –í–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–ø—Ä–∞–≤—É "${todaysWorkout.exercises[exerciseIndex].name}" –∑ –î–Ω—è ${modifiedWorkout.day}?\n\nüìù –ù–∞–ø–∏—à—ñ—Ç—å "—Ç–∞–∫" –∞–±–æ "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é" –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω, –∞–±–æ "–Ω—ñ" –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.`,
          action: {
            type: 'confirm_action',
            data: { removedIndex: exerciseIndex }
          }
        };
      }

      case 'modify_exercise_params': {
        const exerciseIndex = todaysWorkout.exercises.findIndex(ex => 
          ex.name.toLowerCase().includes(parsedAction.exercise_name.toLowerCase()) ||
          parsedAction.exercise_name.toLowerCase().includes(ex.name.toLowerCase())
        );

        if (exerciseIndex === -1) {
          return {
            message: `–ù–µ –∑–Ω–∞–π—à–æ–≤ –≤–ø—Ä–∞–≤—É "${parsedAction.exercise_name}". –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç, –≤–∫–∞–∑–∞–≤—à–∏ —Ç–æ—á–Ω—É –Ω–∞–∑–≤—É.`
          };
        }

        const originalExercise = todaysWorkout.exercises[exerciseIndex];
        const updatedExercise = {
          ...originalExercise,
          // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –ø–æ–ª—è, —è–∫—ñ –±—É–ª–∏ –∑–º—ñ–Ω–µ–Ω—ñ
          sets: parsedAction.sets || originalExercise.sets,
          reps: parsedAction.reps || originalExercise.reps,
          rest: parsedAction.rest || originalExercise.rest,
          targetWeight: parsedAction.target_weight ? Number(parsedAction.target_weight.replace(/[^\d.]/g, '')) : originalExercise.targetWeight,
          recommendation: parsedAction.recommendations ? {
            text: parsedAction.recommendations,
            action: "updated"
          } : originalExercise.recommendation,
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ –ø–æ–ª—è –±–µ–∑ –∑–º—ñ–Ω
          id: originalExercise.id,
          name: originalExercise.name,
          description: originalExercise.description,
          weightType: originalExercise.weightType,
          videoSearchQuery: originalExercise.videoSearchQuery,
          targetReps: originalExercise.targetReps,
          isCompletedDuringSession: originalExercise.isCompletedDuringSession,
          sessionLoggedSets: originalExercise.sessionLoggedSets,
          sessionSuccess: originalExercise.sessionSuccess,
          isSkipped: originalExercise.isSkipped,
          notes: originalExercise.notes
        };

        const modifiedWorkout: DailyWorkoutPlan = {
          ...todaysWorkout,
          exercises: todaysWorkout.exercises.map((ex, i) => 
            i === exerciseIndex ? updatedExercise : ex
          )
        };

        // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω–∏
        const changes = [];
        if (parsedAction.sets && parsedAction.sets !== originalExercise.sets) {
          changes.push(`–ø—ñ–¥—Ö–æ–¥–∏: ${originalExercise.sets} ‚Üí ${parsedAction.sets}`);
        }
        if (parsedAction.reps && parsedAction.reps !== originalExercise.reps) {
          changes.push(`–ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è: ${originalExercise.reps} ‚Üí ${parsedAction.reps}`);
        }
        if (parsedAction.rest && parsedAction.rest !== originalExercise.rest) {
          changes.push(`–≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫: ${originalExercise.rest} ‚Üí ${parsedAction.rest}`);
        }
        if (parsedAction.target_weight) {
          const newWeight = Number(parsedAction.target_weight.replace(/[^\d.]/g, ''));
          if (newWeight !== originalExercise.targetWeight) {
            changes.push(`—Ü—ñ–ª—å–æ–≤–∞ –≤–∞–≥–∞: ${originalExercise.targetWeight || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'} ‚Üí ${newWeight}–∫–≥`);
          }
        }
        if (parsedAction.recommendations) {
          const currentRecommendation = originalExercise.recommendation?.text || '–Ω–µ–º–∞—î';
          if (parsedAction.recommendations !== currentRecommendation) {
            changes.push(`—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: –æ–Ω–æ–≤–ª–µ–Ω–æ`);
          }
        }

        const changesText = changes.length > 0 ? `${changes.join(', ')}` : '–ø–∞—Ä–∞–º–µ—Ç—Ä–∏';

        // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è
        if (parsedAction.confirmation_needed !== false) {
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ñ–π –∑–º—ñ–Ω–Ω—ñ–π
          console.log('üíæ [modify_exercise_params] –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:', {
            exerciseIndex,
            originalName: originalExercise.name,
            updatedName: updatedExercise.name,
            changes: changes,
            workoutDay: modifiedWorkout.day,
            exercisesCount: modifiedWorkout.exercises.length
          });

          pendingModification = {
            actionType: 'modify_exercise_params',
            data: { 
              exerciseIndex, 
              originalExercise, 
              updatedExercise,
              changes: changes
            },
            modifiedWorkout
          };

          return {
            message: `ü§î –Ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑—Ä–æ–∑—É–º—ñ–≤? –í–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –¥–ª—è "${originalExercise.name}" (–î–µ–Ω—å ${modifiedWorkout.day}): ${changesText}?\n\nüìù –ù–∞–ø–∏—à—ñ—Ç—å "—Ç–∞–∫" –∞–±–æ "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é" –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω, –∞–±–æ "–Ω—ñ" –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.`,
            action: {
              type: 'confirm_action',
              data: { 
                pendingAction: 'modify_exercise_params',
                exerciseIndex, 
                originalExercise, 
                updatedExercise,
                changes: changes,
                modifiedWorkout
              }
            }
          };
        }

        return {
          message: `‚úÖ –û–Ω–æ–≤–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è "${originalExercise.name}". –ó–º—ñ–Ω–µ–Ω–æ: ${changesText}. ${parsedAction.message || parsedAction.reason || ''}`,
          action: {
            type: 'modify_exercise_params',
            data: { 
              exerciseIndex, 
              originalExercise, 
              updatedExercise,
              changes: changes
            }
          },
          modifiedPlan: modifiedWorkout
        };
      }

      case 'confirm_action': {
        return {
          message: `–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥—ñ—é –Ω–∞–ø–∏—Å–∞–≤—à–∏ "—Ç–∞–∫" –∞–±–æ "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é", –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞–≤—à–∏ "–Ω—ñ" –∞–±–æ "—Å–∫–∞—Å—É–≤–∞—Ç–∏".`
        };
      }

      default:
        return await generateRegularChatResponse(
          userProfile,
          userMessage,
          conversationHistory,
          todaysWorkout
        );
    }
  } catch (error) {
    console.error('Error in workout modification:', error);
    return {
      message: `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏: "–∑–∞–º—ñ–Ω–∏ –≤–ø—Ä–∞–≤—É [–Ω–∞–∑–≤–∞] –Ω–∞ —ñ–Ω—à—É" –∞–±–æ "–¥–æ–¥–∞–π –≤–ø—Ä–∞–≤—É".`
    };
  }
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –∑–º—ñ–Ω
let pendingModification: any = null;

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—Ö–æ–∂–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤ (0-1, –¥–µ 1 ‚Äî —ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ)
const calculateStringSimilarity = (str1: string, str2: string): number => {
  const longer = str1.length > str2.length ? str1 : str2;
  const shorter = str1.length > str2.length ? str2 : str1;
  
  if (longer.length === 0) return 1.0;
  
  // –û–±—á–∏—Å–ª—é—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
  const editDistance = levenshteinDistance(longer, shorter);
  return (longer.length - editDistance) / longer.length;
};

// –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ñ–¥—Å—Ç–∞–Ω—ñ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
const levenshteinDistance = (str1: string, str2: string): number => {
  const matrix = [];
  
  for (let i = 0; i <= str2.length; i++) {
    matrix[i] = [i];
  }
  
  for (let j = 0; j <= str1.length; j++) {
    matrix[0][j] = j;
  }
  
  for (let i = 1; i <= str2.length; i++) {
    for (let j = 1; j <= str1.length; j++) {
      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1, // substitution
          matrix[i][j - 1] + 1,     // insertion
          matrix[i - 1][j] + 1      // deletion
        );
      }
    }
  }
  
  return matrix[str2.length][str1.length];
};

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –≤–ø—Ä–∞–≤–∏ –≤ –ø–ª–∞–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
const findExerciseInPlan = (userMessage: string, workoutPlan: DailyWorkoutPlan[]): DailyWorkoutPlan | null => {
  const message = userMessage.toLowerCase();
  
  console.log('üîç [findExerciseInPlan] –®—É–∫–∞—î–º–æ –≤–ø—Ä–∞–≤—É –¥–ª—è:', message);
  
  // –û—á–∏—â–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å–ª—ñ–≤-–¥—ñ–π (—â–æ–± –ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –Ω–∞–∑–≤—É –≤–ø—Ä–∞–≤–∏)
  const cleanMessage = message.replace(/–∑–∞–º—ñ–Ω|–∑–∞–º—ñ–Ω–∏|–¥–æ–¥–∞–π|–ø—Ä–∏–±–µ—Ä|–∑—Ä–æ–±–∏|–¥–ª—è|–Ω–∞/g, '').trim();
  
  // –ó–Ω–∞–π—Ç–∏ –¥–µ–Ω—å, —â–æ –º—ñ—Å—Ç–∏—Ç—å –≤–ø—Ä–∞–≤—É, —è–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  let bestMatch: { day: DailyWorkoutPlan; similarity: number; exercise: string } | null = null;
  
  for (const day of workoutPlan) {
    for (const exercise of day.exercises) {
      const exerciseName = exercise.name.toLowerCase();
      
  // –û–±—á–∏—Å–ª–∏—Ç–∏ —Å—Ö–æ–∂—ñ—Å—Ç—å –º—ñ–∂ –æ—á–∏—â–µ–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —ñ –Ω–∞–∑–≤–æ—é –≤–ø—Ä–∞–≤–∏
      const fullSimilarity = calculateStringSimilarity(cleanMessage, exerciseName);
      
  // –¢–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ö–æ–∂—ñ—Å—Ç—å –æ–∫—Ä–µ–º–∏—Ö —Å–ª—ñ–≤
      const exerciseWords = exerciseName.split(' ');
      const messageWords = cleanMessage.split(' ').filter(word => word.length > 2);
      
      let maxWordSimilarity = 0;
      for (const messageWord of messageWords) {
        for (const exerciseWord of exerciseWords) {
          const wordSimilarity = calculateStringSimilarity(messageWord, exerciseWord);
          maxWordSimilarity = Math.max(maxWordSimilarity, wordSimilarity);
        }
      }
      
  // –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π –±–∞–ª: 70% ‚Äî –ø–æ–≤–Ω–∞ —Å—Ö–æ–∂—ñ—Å—Ç—å + 30% ‚Äî –Ω–∞–π–∫—Ä–∞—â–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å–ª–æ–≤–∞
      const combinedSimilarity = fullSimilarity * 0.7 + maxWordSimilarity * 0.3;
      
      if (combinedSimilarity > 0.3) { // Minimum threshold
        console.log('üéØ [findExerciseInPlan] –ö–∞–Ω–¥–∏–¥–∞—Ç:', {
          day: day.day,
          exercise: exercise.name,
          fullSimilarity: Math.round(fullSimilarity * 100),
          maxWordSimilarity: Math.round(maxWordSimilarity * 100),
          combinedSimilarity: Math.round(combinedSimilarity * 100)
        });
        
        if (!bestMatch || combinedSimilarity > bestMatch.similarity) {
          bestMatch = { day, similarity: combinedSimilarity, exercise: exercise.name };
        }
      }
    }
  }
  
  if (bestMatch) {
    console.log('‚úÖ [findExerciseInPlan] –ù–∞–π–∫—Ä–∞—â–∏–π –∑–±—ñ–≥:', {
      day: bestMatch.day.day,
      exercise: bestMatch.exercise,
      similarity: Math.round(bestMatch.similarity * 100) + '%'
    });
    return bestMatch.day;
  }
  
  console.log('‚ùå [findExerciseInPlan] –ù–µ –∑–Ω–∞–π—à–ª–∏ –≤–ø—Ä–∞–≤—É –≤ –∂–æ–¥–Ω–æ–º—É –¥–Ω—ñ');
  return null;
};

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—å/—Å–∫–∞—Å—É–≤–∞–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const handleConfirmation = (
  userMessage: string,
  conversationHistory: Array<{ role: 'user' | 'assistant'; content: string }>
): TrainerResponse | null => {
  // –®—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—Ä–µ–Ω–µ—Ä–∞ –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
  const lastAssistantMessage = conversationHistory
    .slice()
    .reverse()
    .find(msg => msg.role === 'assistant' && msg.content.includes('üìù –ù–∞–ø–∏—à—ñ—Ç—å "—Ç–∞–∫"'));

  if (!lastAssistantMessage || !pendingModification) return null;

  const confirmationKeywords = ['—Ç–∞–∫', '–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é', '–∑–≥–æ–¥–µ–Ω', '–∑–≥–æ–¥–Ω–∞', '–¥–æ–±—Ä–µ', '–æ–∫–µ–π', 'ok', '–¥–∞', 'yes'];
  const cancelKeywords = ['–Ω—ñ', '—Å–∫–∞—Å—É–≤–∞—Ç–∏', '–≤—ñ–¥–º—ñ–Ω–∞', '–Ω–µ —Ç—Ä–µ–±–∞', 'no', 'cancel'];

  const isConfirmation = confirmationKeywords.some(keyword => 
    userMessage.toLowerCase().includes(keyword)
  );
  
  const isCancellation = cancelKeywords.some(keyword => 
    userMessage.toLowerCase().includes(keyword)
  );

  if (isConfirmation && pendingModification) {
    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏
    console.log('üîß [handleConfirmation] –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏:', {
      actionType: pendingModification.actionType,
      hasModifiedWorkout: !!pendingModification.modifiedWorkout,
      workoutDay: pendingModification.modifiedWorkout?.day,
      exercisesCount: pendingModification.modifiedWorkout?.exercises?.length
    });

    const result = {
      message: `‚úÖ –ó—Ä–æ–∑—É–º—ñ–ª–æ! –ó–∞—Å—Ç–æ—Å–æ–≤—É—é –∑–º—ñ–Ω–∏...`,
      action: {
        type: pendingModification.actionType,
        data: pendingModification.data
      },
      modifiedPlan: pendingModification.modifiedWorkout
    };
    
    // –û—á–∏—â—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏
    pendingModification = null;
    return result;
  } else if (isCancellation) {
    // –°–∫–∞—Å–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏
    pendingModification = null;
    return {
      message: `‚ùå –ó—Ä–æ–∑—É–º—ñ–ª–æ, —Å–∫–∞—Å–æ–≤—É—é –∑–º—ñ–Ω–∏. –©–æ —â–µ –º–æ–∂—É –¥–ª—è –≤–∞—Å –∑—Ä–æ–±–∏—Ç–∏?`
    };
  }

  return null;
};

export const generateTrainerResponse = async ({
  userProfile,
  userMessage,
  conversationHistory = [],
  currentWorkoutPlan = null,
  activeDay = null
}: {
  userProfile: UserProfile;
  userMessage: string;
  conversationHistory?: Array<{ role: 'user' | 'assistant'; content: string }>;
  currentWorkoutPlan?: DailyWorkoutPlan[] | null;
  activeDay?: number | null;
}): Promise<TrainerResponse> => {
  if (!ai) {
    throw new Error(UI_TEXT.apiKeyMissing);
  }

  // Check if chat feature is enabled based on quota
  if (!shouldEnableAIFeature('chat')) {
    throw new Error(UI_TEXT.aiOverloaded);
  }

  // Check if this is a confirmation/cancellation response
  const confirmationResponse = handleConfirmation(userMessage, conversationHistory);
  if (confirmationResponse) {
    return confirmationResponse;
  }

  // Get current day's workout if available
  let todaysWorkout = currentWorkoutPlan && activeDay ? 
    currentWorkoutPlan.find(day => day.day === activeDay) : null;

  // If no active day but user wants modification, try to find the exercise in any day
  if (!todaysWorkout && currentWorkoutPlan && currentWorkoutPlan.length > 0) {
    // Try to find which day contains the exercise mentioned in the message
    const foundDay = findExerciseInPlan(userMessage, currentWorkoutPlan);
    if (foundDay) {
      todaysWorkout = foundDay;
      console.log('üîç [generateTrainerResponse] –ó–Ω–∞–π—à–ª–∏ –≤–ø—Ä–∞–≤—É –≤ –¥–Ω—ñ:', {
        selectedDay: foundDay.day,
        exercisesCount: foundDay.exercises.length
      });
    } else {
      // Use first available day as fallback
      todaysWorkout = currentWorkoutPlan[0];
      console.log('üîÑ [generateTrainerResponse] –ù–µ –∑–Ω–∞–π—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –≤–ø—Ä–∞–≤—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à–∏–π –¥–µ–Ω—å:', {
        selectedDay: currentWorkoutPlan[0].day,
        exercisesCount: currentWorkoutPlan[0].exercises.length
      });
    }
  }

  // Detect different types of requests
  const modificationKeywords = [
    '–∑–∞–º—ñ–Ω', '–∑–º—ñ–Ω', '—ñ–Ω—à', '–±–æ–ª–∏—Ç—å', '–±—ñ–ª—å', '—Ç—Ä–∞–≤–º', '–Ω–µ –º–æ–∂—É', '–≤–∞–∂–∫–æ', 
    '—Å–∫–ª–∞–¥–Ω–æ', '–¥–æ–¥–∞–π', '–ø—Ä–∏–±–µ—Ä', '–≤–∏–ª—É—á', '—É–±–µ—Ä', '–Ω–∞–ø—Ä—è–∂–∫', '–ª—ñ–∫—Ç',
    '–ø—ñ–¥—Ö–æ–¥', '–ø–æ–≤—Ç–æ—Ä–µ–Ω', '–≤—ñ–¥–ø–æ—á–∏–Ω', '–≤–∞–≥–∞', '–∫–≥', '—Å–µ–∫—É–Ω–¥', '—Ö–≤–∏–ª–∏–Ω',
    '–∑–±—ñ–ª—å—à', '–∑–º–µ–Ω—à', '–±—ñ–ª—å—à–µ', '–º–µ–Ω—à–µ', '–ª–µ–≥—à–µ', '–≤–∞–∂—á–µ', '—à–≤–∏–¥—à–µ', '–ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ',
    '—Ä–µ–∫–æ–º–µ–Ω–¥', '–ø–æ—Ä–∞–¥', '—Ü—ñ–ª—å–æ–≤', '–≤—Å—Ç–∞–Ω–æ–≤', '–∑—Ä–æ–±–∏'
  ];
  
  console.log('üîç [generateTrainerResponse] –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—é:', {
    userMessage: userMessage.toLowerCase(),
    foundKeywords: modificationKeywords.filter(keyword => 
      userMessage.toLowerCase().includes(keyword)
    ),
    wantsModification: modificationKeywords.some(keyword => 
      userMessage.toLowerCase().includes(keyword)
    ),
    hasTodaysWorkout: !!todaysWorkout
  });

  const analysisKeywords = [
    '–ø—Ä–æ–≥—Ä–µ—Å', '–ø–æ–∫—Ä–∞—â', '–∞–Ω–∞–ª—ñ–∑', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–¥–æ—Å—è–≥–Ω–µ–Ω',
    '—è–∫ —Å–ø—Ä–∞–≤', '—â–æ –Ω–æ–≤–æ–≥–æ', '—è–∫ —ñ–¥—É', '—á–∏ –¥–æ–±—Ä–µ', '–æ—Ü—ñ–Ω'
  ];

  const techniqueKeywords = [
    '—Ç–µ—Ö–Ω—ñ–∫–∞', '—è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ', '—è–∫ —Ä–æ–±–∏—Ç–∏', '–ø–æ—è—Å–Ω–∏', '–ø–æ–∫–∞–∂', '–Ω–∞–≤—á–∏',
    '–ø—Ä–∞–≤–∏–ª—å–Ω', '–ø–æ–º–∏–ª–∫', '–¥–∏—Ö–∞–Ω–Ω—è', '–ø–æ–ª–æ–∂–µ–Ω–Ω—è'
  ];

  const motivationKeywords = [
    '–º–æ—Ç–∏–≤–∞—Ü', '–ª—ñ–Ω—å', '–Ω–µ —Ö–æ—á–µ—Ç—å—Å—è', '–≤–∞–∂–∫–æ –ø–æ—á–∞—Ç–∏', '–≤—Ç–æ–º–∏–≤—Å—è', '–∑–¥–∞–≤—Å—è',
    '–Ω–∞–≤—ñ—â–æ', '–∫–æ—Ä–∏—Å—Ç—å', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–∫–æ–ª–∏ –±—É–¥–µ', '–ø—ñ–¥—Ç—Ä–∏–º–∫'
  ];
  
  const wantsModification = modificationKeywords.some(keyword => 
    userMessage.toLowerCase().includes(keyword)
  );

  const wantsAnalysis = analysisKeywords.some(keyword => 
    userMessage.toLowerCase().includes(keyword)
  );

  const wantsTechnique = techniqueKeywords.some(keyword => 
    userMessage.toLowerCase().includes(keyword)
  );

  const wantsMotivation = motivationKeywords.some(keyword => 
    userMessage.toLowerCase().includes(keyword)
  );

  // Handle different types of requests with priority
  if (wantsModification && todaysWorkout) {
    console.log('‚úÖ [generateTrainerResponse] –í–∏–∫–ª–∏–∫–∞—î–º–æ handleWorkoutModification');
    return await handleWorkoutModification(
      userProfile, 
      userMessage, 
      todaysWorkout, 
      currentWorkoutPlan!,
      conversationHistory
    );
  } else if (wantsModification && !todaysWorkout) {
    console.log('‚ö†Ô∏è [generateTrainerResponse] –•–æ—á—É—Ç—å –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—é, –∞–ª–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è');
  } else {
    console.log('‚ÑπÔ∏è [generateTrainerResponse] –ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —è–∫ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—é, –π–¥–µ–º–æ –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —á–∞—Ç—É');
  }

  // Enhanced chat with context awareness
  if (wantsAnalysis || wantsTechnique || wantsMotivation) {
    return await generateEnhancedChatResponse(
      userProfile,
      userMessage,
      conversationHistory,
      todaysWorkout,
      currentWorkoutPlan,
      { wantsAnalysis, wantsTechnique, wantsMotivation }
    );
  }

  // Regular chat response
  return await generateRegularChatResponse(
    userProfile,
    userMessage,
    conversationHistory,
    todaysWorkout
  );
};