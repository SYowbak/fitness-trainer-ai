import React, { useState, useEffect } from 'react';
import { offlineTestSuite } from '../utils/offlineTestUtils';
import { getOfflineQueue } from '../utils/offlineUtils';

interface SystemStatusBarProps {
  isNetworkOnline: boolean;
}

const SystemStatusBar: React.FC<SystemStatusBarProps> = ({ isNetworkOnline }) => {
  const [showDetails, setShowDetails] = useState(false);
  const [offlineQueueCount, setOfflineQueueCount] = useState(0);
  const [networkQuality, setNetworkQuality] = useState<{
    speed: 'fast' | 'medium' | 'slow' | 'offline';
    effectiveType: string;
    downlink: number;
  }>({ speed: 'medium', effectiveType: 'unknown', downlink: 0 });
  const [offlineHealthStatus, setOfflineHealthStatus] = useState({ healthy: true, score: 100, issues: [] as string[] });
  const [healthTestsRun, setHealthTestsRun] = useState(false);

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤
  useEffect(() => {
    const updateStatuses = () => {
      // –û—Ñ–ª–∞–π–Ω —á–µ—Ä–≥–∞
      const queue = getOfflineQueue();
      setOfflineQueueCount(queue.length);

      // –Ø–∫—ñ—Å—Ç—å –º–µ—Ä–µ–∂—ñ
      if (isNetworkOnline) {
        if ('connection' in navigator) {
          const connection = (navigator as any).connection;
          const effectiveType = connection?.effectiveType || 'unknown';
          const downlink = connection?.downlink || 0;
          let speed: 'fast' | 'medium' | 'slow' | 'offline' = 'medium';
          
          // –ë—ñ–ª—å—à —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –ª–æ–≥—ñ–∫–∞
          if (downlink > 5) {
            speed = 'fast';
          } else if (downlink > 1) {
            speed = 'medium';
          } else if (downlink > 0) {
            speed = 'slow';
          } else {
            // –Ø–∫—â–æ downlink –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞ effectiveType
            if (effectiveType === '4g') {
              speed = 'fast';
            } else if (effectiveType === '3g') {
              speed = 'medium';
            } else if (effectiveType === '2g') {
              speed = 'slow';
            } else {
              speed = 'medium'; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            }
          }
          
          // –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –¥–∞–Ω–∏—Ö
          if (networkQuality.effectiveType !== effectiveType || Math.abs(networkQuality.downlink - downlink) > 0.5) {
            console.log('üåê Network changed:', { effectiveType, downlink, speed });
          }

          setNetworkQuality({ speed, effectiveType, downlink });
        } else {
          // –Ø–∫—â–æ Network API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
          console.log('üåê Network API not available, using fallback');
          setNetworkQuality({ speed: 'medium', effectiveType: 'unknown', downlink: 0 });
        }
      } else {
        setNetworkQuality({ speed: 'offline', effectiveType: 'offline', downlink: 0 });
      }

      // –û—Ñ–ª–∞–π–Ω –∑–¥–æ—Ä–æ–≤'—è - –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
      if (!healthTestsRun) {
        offlineTestSuite.runAllTests().then(() => {
          const healthStatus = offlineTestSuite.getOverallStatus();
          setOfflineHealthStatus(healthStatus);
          setHealthTestsRun(true);
        });
      } else {
        const healthStatus = offlineTestSuite.getOverallStatus();
        setOfflineHealthStatus(healthStatus);
      }
    };

    updateStatuses();
    const interval = setInterval(updateStatuses, 5000);
    return () => clearInterval(interval);
  }, [isNetworkOnline, healthTestsRun]);

  const getNetworkIcon = () => {
    if (!isNetworkOnline) return 'fa-exclamation-triangle'; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω—É —ñ–∫–æ–Ω–∫—É
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Ä—ñ–∑–Ω—ñ —ñ–∫–æ–Ω–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –º–µ—Ä–µ–∂—ñ
    if (networkQuality.effectiveType === 'wifi') return 'fa-wifi';
    if (networkQuality.effectiveType === '4g') return 'fa-signal';
    if (networkQuality.effectiveType === '3g') return 'fa-signal';
    if (networkQuality.effectiveType === '2g') return 'fa-signal';
    
    return 'fa-wifi'; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
  };

  const getNetworkColor = () => {
    if (!isNetworkOnline) return 'text-red-300';
    switch (networkQuality.speed) {
      case 'fast': return 'text-green-300';
      case 'medium': return 'text-yellow-300';
      case 'slow': return 'text-orange-300';
      default: return 'text-red-300';
    }
  };

  const getNetworkTitle = () => {
    if (!isNetworkOnline) return '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º';
    
    const type = networkQuality.effectiveType === 'unknown' ? '–ù–µ–≤—ñ–¥–æ–º–æ' : 
                 networkQuality.effectiveType === 'wifi' ? 'WiFi' : 
                 networkQuality.effectiveType.toUpperCase();
    
    const speedText = networkQuality.speed === 'fast' ? '–®–≤–∏–¥–∫–∞' : 
                     networkQuality.speed === 'medium' ? '–°–µ—Ä–µ–¥–Ω—è' : '–ü–æ–≤—ñ–ª—å–Ω–∞';
    
    let title = `${type} - ${speedText} –º–µ—Ä–µ–∂–∞`;
    
    if (networkQuality.downlink > 0) {
      title += ` (${networkQuality.downlink.toFixed(1)} Mbps)`;
    } else if (networkQuality.effectiveType === 'unknown') {
      title += ' (–¥–∞–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ)';
    }
    
    return title;
  };

  return (
    <div className="flex items-center space-x-1 relative">
      {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–µ—Ä–µ–∂—ñ */}
      <div 
        className={`w-5 h-5 rounded-full flex items-center justify-center transition-all duration-300 cursor-pointer border-2 relative ${
          isNetworkOnline 
            ? networkQuality.speed === 'fast' ? 'bg-green-900/50 border-green-500/70 hover:bg-green-800/60' :
              networkQuality.speed === 'medium' ? 'bg-yellow-900/50 border-yellow-500/70 hover:bg-yellow-800/60' :
              'bg-orange-900/50 border-orange-500/70 hover:bg-orange-800/60'
            : 'bg-red-900/50 border-red-500/70 hover:bg-red-800/60 animate-pulse'
        }`}
        title={getNetworkTitle()}
        onClick={() => setShowDetails(!showDetails)}
      >
        {!isNetworkOnline ? (
          <span className="absolute inset-0 flex items-center justify-center text-red-300 text-[10px] font-bold leading-none">‚ö†</span>
        ) : (
          <i className={`absolute inset-0 flex items-center justify-center fas ${getNetworkIcon()} text-[10px] ${getNetworkColor()} leading-none`}></i>
        )}
      </div>

      {/* –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó */}
      {offlineQueueCount > 0 && (
        <div 
          className="w-5 h-5 rounded-full flex items-center justify-center bg-blue-900/50 hover:bg-blue-800/60 border-2 border-blue-500/70 cursor-pointer transition-all duration-300 relative"
          title={`–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è: ${offlineQueueCount} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ —á–µ—Ä–∑—ñ`}
          onClick={() => setShowDetails(!showDetails)}
        >
          <i className="absolute inset-0 flex items-center justify-center fas fa-sync text-[10px] text-blue-300 animate-spin leading-none"></i>
          {offlineQueueCount > 0 && (
            <div className="absolute -top-1 -right-1 w-3 h-3 bg-blue-500 rounded-full flex items-center justify-center">
              <span className="text-[6px] text-white font-bold">{offlineQueueCount > 9 ? '9+' : offlineQueueCount}</span>
            </div>
          )}
        </div>
      )}

      {/* –û—Ñ–ª–∞–π–Ω –∑–¥–æ—Ä–æ–≤'—è */}
      {(process.env.NODE_ENV === 'development' || !offlineHealthStatus.healthy) && (
        <div 
          className={`w-5 h-5 rounded-full flex items-center justify-center cursor-pointer transition-all duration-300 border-2 relative ${
            offlineHealthStatus.healthy 
              ? 'bg-green-900/50 border-green-500/70 hover:bg-green-800/60' 
              : 'bg-red-900/50 border-red-500/70 hover:bg-red-800/60 animate-pulse'
          }`}
          title={`–°–∏—Å—Ç–µ–º–∞: ${offlineHealthStatus.healthy ? '–ó–¥–æ—Ä–æ–≤–∞' : offlineHealthStatus.issues.join(', ')} (${offlineHealthStatus.score}%)`}
          onClick={() => setShowDetails(!showDetails)}
        >
          <i className={`absolute inset-0 flex items-center justify-center fas ${offlineHealthStatus.healthy ? 'fa-check-circle' : 'fa-exclamation-triangle'} text-[10px] leading-none ${
            offlineHealthStatus.healthy ? 'text-green-300' : 'text-red-300'
          }`}></i>
        </div>
      )}

      {/* –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
      {showDetails && (
        <div className="absolute top-6 right-0 bg-gray-900 text-white rounded-lg shadow-xl p-3 min-w-48 text-xs border border-fitness-gold-600/30 z-[70]">
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <span className="text-fitness-gold-400">–ú–µ—Ä–µ–∂–∞:</span>
              <span className={isNetworkOnline ? 'text-green-400' : 'text-red-400'}>
                {isNetworkOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}
              </span>
            </div>
            
            {isNetworkOnline && (
              <>
                <div className="flex items-center justify-between">
                  <span className="text-fitness-gold-400">–¢–∏–ø:</span>
                  <span className="text-white">
                    {networkQuality.effectiveType === 'unknown' ? '–ù–µ–≤—ñ–¥–æ–º–æ' :
                     networkQuality.effectiveType === 'wifi' ? 'WiFi' : 
                     networkQuality.effectiveType.toUpperCase()}
                  </span>
                </div>
                
                <div className="flex items-center justify-between">
                  <span className="text-fitness-gold-400">–®–≤–∏–¥–∫—ñ—Å—Ç—å:</span>
                  <span className="text-white">
                    {networkQuality.downlink > 0 ? 
                      `${networkQuality.downlink.toFixed(1)} Mbps` : 
                      '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
                    }
                  </span>
                </div>

                <div className="flex items-center justify-between">
                  <span className="text-fitness-gold-400">API –ø—ñ–¥—Ç—Ä–∏–º–∫–∞:</span>
                  <span className="text-white">
                    {'connection' in navigator ? '–î–æ—Å—Ç—É–ø–Ω–æ' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}
                  </span>
                </div>
              </>
            )}

            {offlineQueueCount > 0 && (
              <div className="flex items-center justify-between">
                <span className="text-fitness-gold-400">–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è:</span>
                <span className="text-blue-400">{offlineQueueCount} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤</span>
              </div>
            )}

            {(process.env.NODE_ENV === 'development' || !offlineHealthStatus.healthy) && (
              <div className="flex items-center justify-between">
                <span className="text-fitness-gold-400">–°–∏—Å—Ç–µ–º–∞:</span>
                <span className={offlineHealthStatus.healthy ? 'text-green-400' : 'text-red-400'}>
                  {offlineHealthStatus.healthy ? '–ó–¥–æ—Ä–æ–≤–∞' : `${offlineHealthStatus.score}%`}
                </span>
              </div>
            )}

            {!offlineHealthStatus.healthy && offlineHealthStatus.issues.length > 0 && (
              <div className="mt-2 p-2 bg-red-900/30 rounded border border-red-500/50">
                <div className="text-red-300 text-[10px] font-semibold mb-1">–ü—Ä–æ–±–ª–µ–º–∏:</div>
                {offlineHealthStatus.issues.map((issue, index) => (
                  <div key={index} className="text-red-300 text-[10px]">‚Ä¢ {issue}</div>
                ))}
              </div>
            )}
          </div>
          
          <button
            onClick={() => setShowDetails(false)}
            className="absolute top-1 right-1 text-fitness-gold-400 hover:text-white bg-gray-800/50 hover:bg-gray-700/50 rounded-full w-4 h-4 flex items-center justify-center"
          >
            <i className="fas fa-times text-[8px]"></i>
          </button>
        </div>
      )}
    </div>
  );
};

export default SystemStatusBar;
