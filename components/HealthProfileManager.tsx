import React, { useState, useEffect, FC } from 'react';
import { UserProfile, HealthCondition } from '../types';
import { HealthProfileService } from '../services/healthProfileService';

interface HealthProfileManagerProps {
  userProfile: UserProfile;
  existingProfile?: UserProfile | null;
  onUpdateProfile: (profile: UserProfile) => void;
  onDirectSave: (profile: UserProfile) => void;
  onAdaptExistingPlan?: (profile: UserProfile) => void;
  hasExistingPlan?: boolean;
}

export const HealthProfileManager: FC<HealthProfileManagerProps> = ({
  userProfile,
  existingProfile,
  onUpdateProfile,
  onDirectSave,
  onAdaptExistingPlan,
  hasExistingPlan = false
}) => {
  const [isAddingCondition, setIsAddingCondition] = useState(false);
  const [newCondition, setNewCondition] = useState({
    condition: '',
    type: 'temporary' as 'chronic' | 'temporary' | 'recovering',
    severity: 'moderate' as 'mild' | 'moderate' | 'severe',
    affectedAreas: '',
    notes: ''
  });

  // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —ñ—Å–Ω—É—é—á–∏–π –∞–±–æ –Ω–æ–≤–∏–π
  const initialProfile = existingProfile || userProfile;
  // –ú—ñ–≥—Ä—É—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  const migratedProfile = HealthProfileService.migrateOldHealthConstraints(initialProfile);
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∑–¥–æ—Ä–æ–≤'—è –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
  const [currentProfile, setCurrentProfile] = useState<UserProfile>(migratedProfile);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ currentProfile –∑ –ø–µ—Ä–µ–¥–∞–Ω–∏–º userProfile (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç userProfile)
  useEffect(() => {
    const newProfile = userProfile || existingProfile;
    const migratedNewProfile = HealthProfileService.migrateOldHealthConstraints(newProfile);
    setCurrentProfile(migratedNewProfile);
  }, [userProfile, existingProfile]);
  
  const healthProfile = currentProfile.healthProfile || HealthProfileService.createInitialHealthProfile();
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∑–ø–µ—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∑–¥–æ—Ä–æ–≤'—è –∑ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
  const safeHealthProfile = {
    ...healthProfile,
    conditions: healthProfile.conditions || [],
    currentLimitations: healthProfile.currentLimitations || [],
    systemMemory: healthProfile.systemMemory || { rememberedFacts: [], adaptationHistory: [] }
  };

  const handleAddCondition = async () => {
    if (!newCondition.condition.trim()) return;

    console.log('üîµ [handleAddCondition] –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –ø—Ä–æ–±–ª–µ–º—É:', newCondition);

    const conditionToAdd: any = {
      condition: newCondition.condition.trim(),
      type: newCondition.type,
      severity: newCondition.severity,
      affectedAreas: newCondition.affectedAreas.split(',').map(area => area.trim()).filter(area => area),
      startDate: new Date(),
      isActive: true
    };

    // –î–æ–¥–∞—î–º–æ notes —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î —Ç–µ–∫—Å—Ç
    if (newCondition.notes.trim()) {
      conditionToAdd.notes = newCondition.notes.trim();
    }

    console.log('üîµ [handleAddCondition] –°—Ç–≤–æ—Ä–µ–Ω–æ –æ–±\'—î–∫—Ç –ø—Ä–æ–±–ª–µ–º–∏:', conditionToAdd);
    console.log('üîµ [handleAddCondition] –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∑–¥–æ—Ä–æ–≤\'—è:', safeHealthProfile);

    const updatedHealthProfile = HealthProfileService.addHealthCondition(safeHealthProfile, conditionToAdd);
    
    console.log('üîµ [handleAddCondition] –û–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∑–¥–æ—Ä–æ–≤\'—è:', updatedHealthProfile);
    
    // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü—ñ—è –ø–ª–∞–Ω—É
    if (updatedHealthProfile.planAdaptationStatus) {
      updatedHealthProfile.planAdaptationStatus.needsReAdaptation = true;
    }
    
    const updatedProfile = { ...currentProfile, healthProfile: updatedHealthProfile };

    // –ú–∏—Ç—Ç—î–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ UI
    setIsAddingCondition(false);
    setNewCondition({ condition: '', type: 'temporary', severity: 'moderate', affectedAreas: '', notes: '' });

    try {
      await onDirectSave(updatedProfile);
      console.log('‚úÖ [HealthProfileManager.handleAddCondition] –ü—Ä–æ–±–ª–µ–º—É –∑–¥–æ—Ä–æ–≤\'—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ, –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü—ñ—è –ø–ª–∞–Ω—É');
    } catch (error) {
      console.error('‚ùå [HealthProfileManager.handleAddCondition] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ:', error);
    }
  };

  const handleDeactivateCondition = async (conditionId: string) => {
    
    // –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ —É–º–æ–≤—É –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ –∑–¥–æ—Ä–æ–≤'—è
    const updatedHealthProfile = HealthProfileService.deactivateCondition(
      safeHealthProfile,
      conditionId
    );

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∑ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ—é —É–º–æ–≤–æ—é
    const updatedProfile = {
      ...currentProfile,
      healthProfile: updatedHealthProfile
    };

    // –ú–∏—Ç—Ç—î–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ UI
    setCurrentProfile(updatedProfile);
    
    try {
      await onDirectSave(updatedProfile);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—Ä–æ–±–ª–µ–º–∏:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ. –ó–º—ñ–Ω–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ, –∞–ª–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.');
    }
  };

  const handleDeleteCondition = async (conditionId: string) => {
    console.log('üóëÔ∏è [handleDeleteCondition] –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±–ª–µ–º—É:', conditionId);
    
    // –ü–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±–ª–µ–º—É –∑ –º–∞—Å–∏–≤—É
    const updatedHealthProfile = {
      ...safeHealthProfile,
      conditions: safeHealthProfile.conditions.filter(c => c.id !== conditionId)
    };

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è
    const finalHealthProfile = HealthProfileService.updateCurrentLimitations(updatedHealthProfile);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
    const updatedProfile = {
      ...currentProfile,
      healthProfile: finalHealthProfile
    };

    // –ú–∏—Ç—Ç—î–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ UI
    setCurrentProfile(updatedProfile);
    
    try {
      await onDirectSave(updatedProfile);
      console.log('‚úÖ [handleDeleteCondition] –ü—Ä–æ–±–ª–µ–º—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå [handleDeleteCondition] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ. –ó–º—ñ–Ω–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ, –∞–ª–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.');
    }
  };

  const handleClearMemory = async (type: 'facts' | 'history' | 'all') => {
    let confirmMessage = '';
    let updatedHealthProfile = { ...safeHealthProfile };

    switch (type) {
      case 'facts':
        confirmMessage = '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∑–∞–ø–∞–º\'—è—Ç–æ–≤–∞–Ω—ñ —Ñ–∞–∫—Ç–∏? –°–∏—Å—Ç–µ–º–∞ –∑–∞–±—É–¥–µ –≤—Å–µ, —â–æ –∑–Ω–∞–ª–∞ –ø—Ä–æ –≤–∞—Å.';
        if (confirm(confirmMessage)) {
          updatedHealthProfile = HealthProfileService.clearRememberedFacts(safeHealthProfile);
        } else {
          return;
        }
        break;
      case 'history':
        confirmMessage = '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∞–¥–∞–ø—Ç–∞—Ü—ñ–π? –¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–º—ñ–Ω–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.';
        if (confirm(confirmMessage)) {
          updatedHealthProfile = HealthProfileService.clearAdaptationHistory(safeHealthProfile);
        } else {
          return;
        }
        break;
      case 'all':
        confirmMessage = '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—Å—Ç–∏—Ç–∏ –ø–∞–º\'—è—Ç—å —Å–∏—Å—Ç–µ–º–∏? –¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –í–°–Ü –∑–∞–ø–∞–º\'—è—Ç–æ–≤–∞–Ω—ñ —Ñ–∞–∫—Ç–∏ —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—é –∞–¥–∞–ø—Ç–∞—Ü—ñ–π. –¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏!';
        if (confirm(confirmMessage)) {
          updatedHealthProfile = HealthProfileService.clearSystemMemory(safeHealthProfile);
        } else {
          return;
        }
        break;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∑ –Ω–æ–≤–∏–º —Å—Ç–∞–Ω–æ–º –ø–∞–º'—è—Ç—ñ
    const updatedProfile = {
      ...currentProfile,
      healthProfile: updatedHealthProfile
    };
    
    // –ú–∏—Ç—Ç—î–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ UI
    setCurrentProfile(updatedProfile);
    
    try {
      await onDirectSave(updatedProfile);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –ø–∞–º\'—è—Ç—ñ:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ. –ó–º—ñ–Ω–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ, –∞–ª–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.');
    }
  };
  
  const activeConditions = safeHealthProfile.conditions.filter(c => c.isActive);
  const inactiveConditions = safeHealthProfile.conditions.filter(c => !c.isActive);
  

  return (
    <div className="space-y-4">
      <div className="bg-gray-800/50 p-4 rounded-lg border border-gray-700">
        <h3 className="text-lg font-medium text-gray-200 mb-3">–ü—Ä–æ—Ñ—ñ–ª—å –∑–¥–æ—Ä–æ–≤'—è</h3>
        
        {/* –ü–æ—Ç–æ—á–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è */}
        <div className="bg-gray-700/50 border border-gray-600 rounded-lg p-4 mb-4">
          <h4 className="font-medium text-gray-200 mb-2 text-sm">–ü–æ—Ç–æ—á–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è:</h4>
          {safeHealthProfile.currentLimitations.length > 0 ? (
            <div className="flex flex-wrap gap-2">
              {safeHealthProfile.currentLimitations.map((limitation, index) => (
                <span key={index} className="px-2 py-1 bg-red-600/30 text-red-200 border border-red-500 rounded-full text-xs">
                  {limitation}
                </span>
              ))}
            </div>
          ) : (
            <p className="text-gray-400 text-xs">–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ–±–º–µ–∂–µ–Ω—å</p>
          )}
        </div>

        {/* –°—Ç–∞—Ç—É—Å –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó –ø–ª–∞–Ω—É */}
        {safeHealthProfile.planAdaptationStatus && (
          <div className={`border rounded-lg p-3 mb-4 ${
            safeHealthProfile.planAdaptationStatus.needsReAdaptation 
              ? 'bg-yellow-900/30 border-yellow-600' 
              : 'bg-green-900/30 border-green-600'
          }`}>
            <div className="flex items-center justify-between">
              <div>
                <h4 className={`font-medium text-sm ${
                  safeHealthProfile.planAdaptationStatus.needsReAdaptation 
                    ? 'text-yellow-200' 
                    : 'text-green-200'
                }`}>
                  {safeHealthProfile.planAdaptationStatus.needsReAdaptation 
                    ? '‚ö†Ô∏è –ü–ª–∞–Ω –ø–æ—Ç—Ä–µ–±—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è' 
                    : '‚úÖ –ü–ª–∞–Ω –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–æ –ø—ñ–¥ –≤–∞—à—ñ –ø—Ä–æ–±–ª–µ–º–∏'}
                </h4>
                <p className={`text-xs mt-1 ${
                  safeHealthProfile.planAdaptationStatus.needsReAdaptation 
                    ? 'text-yellow-300' 
                    : 'text-green-300'
                }`}>
                  {safeHealthProfile.planAdaptationStatus.needsReAdaptation 
                    ? '–î–æ–¥–∞–Ω–æ –Ω–æ–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤\'—è. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó –Ω–∏–∂—á–µ.' 
                    : `–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${new Date(safeHealthProfile.planAdaptationStatus.lastAdaptedDate).toLocaleDateString('uk-UA')}`}
                </p>
                
                {/* –ü–æ–∫–∞–∑—É—î–º–æ –∞–¥–∞–ø—Ç–æ–≤–∞–Ω—ñ —Ç–∞ –Ω–µ–∞–¥–∞–ø—Ç–æ–≤–∞–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ */}
                {(() => {
                  const activeConditionNames = activeConditions.map(c => c.condition);
                  const adaptedConditions = safeHealthProfile.planAdaptationStatus.adaptedConditions;
                  const notAdaptedConditions = activeConditionNames.filter(condition => 
                    !adaptedConditions.includes(condition)
                  );
                  
                  return (
                    <div className="mt-2 space-y-2">
                      {/* –ê–¥–∞–ø—Ç–æ–≤–∞–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ */}
                      {adaptedConditions.length > 0 && (
                        <div>
                          <p className="text-xs text-gray-400 mb-1">–ê–¥–∞–ø—Ç–æ–≤–∞–Ω–æ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –ø–ª–∞–Ω—ñ:</p>
                          <div className="flex flex-wrap gap-1">
                            {adaptedConditions.map((condition, index) => (
                              <span key={index} className="px-2 py-1 rounded-full text-xs bg-green-700/50 text-green-200 border border-green-600">
                                ‚úÖ {condition}
                              </span>
                            ))}
                          </div>
                        </div>
                      )}
                      
                      {/* –ù–µ–∞–¥–∞–ø—Ç–æ–≤–∞–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ */}
                      {notAdaptedConditions.length > 0 && (
                        <div>
                          <p className="text-xs text-yellow-400 mb-1">–ü–æ—Ç—Ä–µ–±—É—é—Ç—å –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó:</p>
                          <div className="flex flex-wrap gap-1">
                            {notAdaptedConditions.map((condition, index) => (
                              <span key={index} className="px-2 py-1 rounded-full text-xs bg-yellow-700/50 text-yellow-200 border border-yellow-600">
                                ‚ö†Ô∏è {condition}
                              </span>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  );
                })()}
              </div>
            </div>
          </div>
        )}

        {/* –ü–∞–º'—è—Ç—å —Å–∏—Å—Ç–µ–º–∏ */}
        {safeHealthProfile.systemMemory.rememberedFacts.length > 0 && (
          <details className="bg-gray-700/50 border border-gray-600 rounded-lg mb-4">
            <summary className="p-3 cursor-pointer hover:bg-gray-700 rounded-lg transition-colors">
              <span className="text-gray-200 font-medium text-sm">
                –°–∏—Å—Ç–µ–º–∞ –ø–∞–º'—è—Ç–∞—î –ø—Ä–æ –≤–∞—Å ({safeHealthProfile.systemMemory.rememberedFacts.length})
              </span>
            </summary>
            <div className="p-3 pt-0">
              <div className="flex justify-end mb-2">
                <button
                  onClick={() => handleClearMemory('facts')}
                  className="text-red-400 hover:text-red-300 text-xs px-2 py-1 rounded border border-red-400 hover:border-red-300"
                  title="–û—á–∏—Å—Ç–∏—Ç–∏ –∑–∞–ø–∞–º'—è—Ç–æ–≤–∞–Ω—ñ —Ñ–∞–∫—Ç–∏"
                >
                  –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–∞–∫—Ç–∏
                </button>
              </div>
              <ul className="text-xs text-gray-300 space-y-1">
                {safeHealthProfile.systemMemory.rememberedFacts.map((fact, index) => (
                  <li key={index}>‚Ä¢ {fact}</li>
                ))}
              </ul>
            </div>
          </details>
        )}

        {/* –Ü—Å—Ç–æ—Ä—ñ—è –∞–¥–∞–ø—Ç–∞—Ü—ñ–π */}
        {safeHealthProfile.systemMemory.adaptationHistory.length > 0 && (
          <details className="bg-gray-700/50 border border-gray-600 rounded-lg mb-4">
            <summary className="p-3 cursor-pointer hover:bg-gray-700 rounded-lg transition-colors">
              <span className="text-gray-200 font-medium text-sm">
                –Ü—Å—Ç–æ—Ä—ñ—è –∞–¥–∞–ø—Ç–∞—Ü—ñ–π ({safeHealthProfile.systemMemory.adaptationHistory.length})
              </span>
            </summary>
            <div className="p-3 pt-0">
              <div className="flex justify-end mb-2">
                <button
                  onClick={() => handleClearMemory('history')}
                  className="text-red-400 hover:text-red-300 text-xs px-2 py-1 rounded border border-red-400 hover:border-red-300"
                  title="–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∞–¥–∞–ø—Ç–∞—Ü—ñ–π"
                >
                  –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é
                </button>
              </div>
              <div className="space-y-2 max-h-40 overflow-y-auto">
                {safeHealthProfile.systemMemory.adaptationHistory.slice(-5).map((record, index) => (
                  <div key={index} className="text-xs text-gray-300 bg-gray-800/50 rounded p-2">
                    <div className="font-medium">{new Date(record.date).toLocaleDateString('uk-UA')}</div>
                    <div className="text-gray-400">{record.reason}</div>
                    <div className="text-gray-500">
                      –ó–º—ñ–Ω–∏: {record.adaptations?.join(', ') || '–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤'}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </details>
        )}

        {/* –ó–∞–≥–∞–ª—å–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ */}
        {(safeHealthProfile.systemMemory.rememberedFacts.length > 0 || 
          safeHealthProfile.systemMemory.adaptationHistory.length > 0) && (
          <div className="bg-red-900/20 rounded-lg p-4 mb-4 border border-red-800">
            <h4 className="font-medium text-red-300 mb-2 text-sm">–ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ</h4>
            <p className="text-sm text-red-200 mb-3">
              –¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –≤—Å—é –ø–∞–º'—è—Ç—å —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–æ –≤–∞—Å. –°–∏—Å—Ç–µ–º–∞ –∑–∞–±—É–¥–µ –≤—Å—ñ —Ñ–∞–∫—Ç–∏ —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—é –∞–¥–∞–ø—Ç–∞—Ü—ñ–π.
            </p>
            <button
              onClick={() => handleClearMemory('all')}
              className="w-full py-2 px-4 bg-red-600 hover:bg-red-700 text-white rounded transition-colors text-sm"
            >
              –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—é –ø–∞–º'—è—Ç—å —Å–∏—Å—Ç–µ–º–∏
            </button>
          </div>
        )}
      </div>

      {/* –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è */}
      <div>
        <div className="flex justify-between items-center mb-3">
          <h4 className="font-medium text-gray-200 text-sm">–ê–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤'—è</h4>
          {activeConditions.length > 0 && (
            <button
              onClick={() => {
                const userConfirmed = confirm('–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤\'—è?');
                if (userConfirmed) {
                  // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å, –ø–æ–∑–Ω–∞—á–∞—é—á–∏ –≤—Å—ñ –ø—Ä–æ–±–ª–µ–º–∏ —è–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ
                  const tempHealthProfile = {
                    ...safeHealthProfile,
                    conditions: safeHealthProfile.conditions.map(condition => ({
                      ...condition,
                      isActive: false,
                      resolvedDate: new Date()
                    }))
                  };
                  
                  // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è
                  const updatedHealthProfile = HealthProfileService.updateCurrentLimitations(tempHealthProfile);
                  
                  // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
                  const updatedProfile = {
                    ...currentProfile,
                    healthProfile: updatedHealthProfile
                  };
                  
                  // –ú–∏—Ç—Ç—î–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ UI
                  setCurrentProfile(updatedProfile);
                  
                  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ –ë–î –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
                  try {
                    onDirectSave(updatedProfile);
                  } catch (error) {
                    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ:', error);
                    alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ. –ó–º—ñ–Ω–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ.');
                  }
                }
              }}
              className="text-red-400 hover:text-red-300 text-xs px-2 py-1 rounded border border-red-400 hover:border-red-300"
            >
              –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ
            </button>
          )}
        </div>
        {activeConditions.length > 0 ? (
          <div className="space-y-2">
            {activeConditions.map((condition) => (
              <div key={condition.id} className="bg-gray-700/50 border border-gray-600 rounded-lg p-3">
                <div className="flex justify-between items-start mb-2">
                  <h5 className="font-medium text-gray-200 text-sm">{condition.condition}</h5>
                  <button
                    onClick={() => {
                      console.log('üè• [–û–¥—É–∂–∞–≤] –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –ø—Ä–æ–±–ª–µ–º—É:', condition.condition, condition.id);
                      handleDeactivateCondition(condition.id);
                    }}
                    className="text-green-400 hover:text-green-300 text-xs px-2 py-1 rounded border border-green-400 hover:border-green-300"
                  >
                    –û–¥—É–∂–∞–≤
                  </button>
                </div>
                <div className="text-xs text-gray-300 space-y-1">
                  <p>–¢–∏–ø: <span className="text-purple-300">{
                    condition.type === 'chronic' ? '–•—Ä–æ–Ω—ñ—á–Ω–µ' :
                    condition.type === 'temporary' ? '–¢–∏–º—á–∞—Å–æ–≤–µ' : '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è'
                  }</span></p>
                  <p>–¢—è–∂–∫—ñ—Å—Ç—å: <span className={
                    condition.severity === 'severe' ? 'text-red-400' :
                    condition.severity === 'moderate' ? 'text-yellow-400' : 'text-green-400'
                  }>{
                    condition.severity === 'severe' ? '–°–µ—Ä–π–æ–∑–Ω–∞' :
                    condition.severity === 'moderate' ? '–ü–æ–º—ñ—Ä–Ω–∞' : '–õ–µ–≥–∫–∞'
                  }</span></p>
                  <p>–£—Ä–∞–∂–µ–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ: <span className="text-blue-300">{condition.affectedAreas.join(', ')}</span></p>
                  {condition.notes && <p>–ù–æ—Ç–∞—Ç–∫–∏: <span className="text-gray-400">{condition.notes}</span></p>}
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-gray-400 text-xs">–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –∑–¥–æ—Ä–æ–≤'—è</p>
        )}
      </div>

      {/* –§–æ—Ä–º–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è */}
      <div>
        {!isAddingCondition ? (
          <button
            onClick={() => setIsAddingCondition(true)}
            className="w-full py-3 px-4 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors text-sm"
          >
            –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É –∑–¥–æ—Ä–æ–≤'—è
          </button>
        ) : (
          <div className="bg-gray-700 rounded-lg p-4 space-y-4">
            <h4 className="font-medium text-white">–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –ø—Ä–æ–±–ª–µ–º—É –∑–¥–æ—Ä–æ–≤'—è</h4>
            <div className="space-y-4">
              <div>
                <label className="block text-sm text-gray-300 mb-1">–û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏</label>
                <input
                  type="text"
                  value={newCondition.condition}
                  onChange={(e) => setNewCondition(prev => ({ ...prev, condition: e.target.value }))}
                  placeholder="–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: —Ç—Ä–∞–≤–º–∞ —Å–ø–∏–Ω–∏, –∞—Ä—Ç—Ä–∏—Ç –∫–æ–ª—ñ–Ω"
                  className="w-full p-2 bg-gray-600 border border-gray-500 rounded text-white"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm text-gray-300 mb-1">–¢–∏–ø</label>
                  <select
                    value={newCondition.type}
                    onChange={(e) => setNewCondition(prev => ({ ...prev, type: e.target.value as any }))}
                    className="w-full p-2 bg-gray-600 border border-gray-500 rounded text-white"
                  >
                    <option value="temporary">–¢–∏–º—á–∞—Å–æ–≤–µ</option>
                    <option value="chronic">–•—Ä–æ–Ω—ñ—á–Ω–µ</option>
                    <option value="recovering">–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm text-gray-300 mb-1">–¢—è–∂–∫—ñ—Å—Ç—å</label>
                  <select
                    value={newCondition.severity}
                    onChange={(e) => setNewCondition(prev => ({ ...prev, severity: e.target.value as any }))}
                    className="w-full p-2 bg-gray-600 border border-gray-500 rounded text-white"
                  >
                    <option value="mild">–õ–µ–≥–∫–∞</option>
                    <option value="moderate">–ü–æ–º—ñ—Ä–Ω–∞</option>
                    <option value="severe">–°–µ—Ä–π–æ–∑–Ω–∞</option>
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm text-gray-300 mb-1">–£—Ä–∞–∂–µ–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ (—á–µ—Ä–µ–∑ –∫–æ–º—É)</label>
                <input
                  type="text"
                  value={newCondition.affectedAreas}
                  onChange={(e) => setNewCondition(prev => ({ ...prev, affectedAreas: e.target.value }))}
                  placeholder="—Å–ø–∏–Ω–∞, –ø–æ–ø–µ—Ä–µ–∫, —Ö—Ä–µ–±–µ—Ç"
                  className="w-full p-2 bg-gray-600 border border-gray-500 rounded text-white"
                />
              </div>

              <div>
                <label className="block text-sm text-gray-300 mb-1">–î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–æ—Ç–∞—Ç–∫–∏ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)</label>
                <textarea
                  value={newCondition.notes}
                  onChange={(e) => setNewCondition(prev => ({ ...prev, notes: e.target.value }))}
                  placeholder="–¥–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É"
                  className="w-full p-2 bg-gray-600 border border-gray-500 rounded text-white h-20"
                />
              </div>

              <div className="flex justify-end space-x-2">
                <button
                  type="button"
                  onClick={() => setIsAddingCondition(false)}
                  className="px-4 py-2 text-sm text-gray-300 hover:text-white"
                >
                  –°–∫–∞—Å—É–≤–∞—Ç–∏
                </button>
                <button
                  type="button"
                  onClick={handleAddCondition}
                  className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded text-sm"
                >
                  –î–æ–¥–∞—Ç–∏
                </button>
              </div>
            </div>
          </div>
        )}

        {/* –í–∏—Ä—ñ—à–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ */}
        {inactiveConditions.length > 0 && (
          <div className="mt-6">
            <div className="flex justify-between items-center mb-3">
              <h4 className="font-medium text-green-400 text-sm">–í–∏—Ä—ñ—à–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏</h4>
              <button
                onClick={() => {
                  const userConfirmed = confirm('–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –≤–∏—Ä—ñ—à–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤\'—è?');
                  if (userConfirmed) {
                    const tempHealthProfile = {
                      ...safeHealthProfile,
                      conditions: safeHealthProfile.conditions.filter(c => c.isActive)
                    };
                    
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è
                    const updatedHealthProfile = HealthProfileService.updateCurrentLimitations(tempHealthProfile);
                    const updatedProfile = {
                      ...currentProfile,
                      healthProfile: updatedHealthProfile
                    };
                    
                    // –ú–∏—Ç—Ç—î–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ UI
                    setCurrentProfile(updatedProfile);
                    
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
                    try {
                      onDirectSave(updatedProfile);
                    } catch (error) {
                      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ:', error);
                      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ. –ó–º—ñ–Ω–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ.');
                    }
                  }
                }}
                className="text-red-400 hover:text-red-300 text-xs px-2 py-1 rounded border border-red-400 hover:border-red-300"
              >
                –û—á–∏—Å—Ç–∏—Ç–∏ –≤–∏—Ä—ñ—à–µ–Ω—ñ
              </button>
            </div>
            <div className="space-y-2">
              {inactiveConditions.map((condition) => (
                <div key={condition.id} className="bg-green-900/20 rounded-lg p-3 border border-green-800">
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <h5 className="font-medium text-green-300 text-sm">{condition.condition}</h5>
                      {condition.notes && <p className="text-xs text-green-200 mt-1">{condition.notes}</p>}
                    </div>
                    <div className="flex flex-col gap-1 ml-2">
                      <button
                        onClick={() => {
                          // –†–µ–∞–∫—Ç–∏–≤—É—î–º–æ –ø—Ä–æ–±–ª–µ–º—É
                          const updatedHealthProfile = {
                            ...safeHealthProfile,
                            conditions: safeHealthProfile.conditions.map(c =>
                              c.id === condition.id
                                ? { ...c, isActive: true, resolvedDate: undefined }
                                : c
                            )
                          };
                          
                          const finalHealthProfile = HealthProfileService.updateCurrentLimitations(updatedHealthProfile);
                          const updatedProfile = {
                            ...currentProfile,
                            healthProfile: finalHealthProfile
                          };
                          
                          setCurrentProfile(updatedProfile);
                          
                          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
                          try {
                            onDirectSave(updatedProfile);
                          } catch (error) {
                            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—Ä–æ–±–ª–µ–º–∏:', error);
                            alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ. –ó–º—ñ–Ω–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ.');
                          }
                        }}
                        className="text-yellow-400 hover:text-yellow-300 text-xs px-1 py-0.5 rounded border border-yellow-400 hover:border-yellow-300"
                        title="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —è–∫ –∞–∫—Ç–∏–≤–Ω—É –ø—Ä–æ–±–ª–µ–º—É"
                      >
                        ‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É–ª–∞—Å—å
                      </button>
                      <button
                        onClick={() => {
                          if (confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ "${condition.condition}" –Ω–∞–∑–∞–≤–∂–¥–∏? –¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏!`)) {
                            handleDeleteCondition(condition.id!);
                          }
                        }}
                        className="text-red-400 hover:text-red-300 text-xs px-1 py-0.5 rounded border border-red-400 hover:border-red-300"
                        title="–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–∑–∞–≤–∂–¥–∏"
                      >
                        üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* –†–æ–∑—É–º–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≤ –ø–ª–∞–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å */}
      {(() => {
        const hasActiveConditions = activeConditions.length > 0;
        const hasInactiveConditions = inactiveConditions.length > 0;
        const hasCurrentLimitations = safeHealthProfile.currentLimitations.length > 0;
        const hasSystemMemory = safeHealthProfile.systemMemory.rememberedFacts.length > 0 || 
                                safeHealthProfile.systemMemory.adaptationHistory.length > 0;
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏
        let buttonText = '';
        let buttonColor = '';
        let description = '';
        let shouldShow = false;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó –ø–ª–∞–Ω—É
        const adaptationStatus = safeHealthProfile.planAdaptationStatus;
        const isAlreadyAdapted = adaptationStatus && 
          !adaptationStatus.needsReAdaptation &&
          adaptationStatus.adaptedConditions.length > 0 &&
          activeConditions.every(c => adaptationStatus.adaptedConditions.includes(c.condition));
        
        // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î —ñ—Å–Ω—É—é—á–∏–π –ø–ª–∞–Ω —ñ —î –ø—Ä–æ–±–ª–µ–º–∏ –¥–ª—è –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
        if (!hasExistingPlan) {
          // –Ø–∫—â–æ –Ω–µ–º–∞—î —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–ª–∞–Ω—É - –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è
          // –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤'—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è
          shouldShow = false;
        } else if (isAlreadyAdapted) {
          // –Ø–∫—â–æ –ø–ª–∞–Ω –≤–∂–µ –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–æ –ø—ñ–¥ –ø–æ—Ç–æ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ - –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è
          shouldShow = false;
        } else if (hasActiveConditions && hasCurrentLimitations) {
          // –Ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è - –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –ø–ª–∞–Ω
          buttonText = 'üîÑ –ê–¥–∞–ø—Ç—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –ø–ª–∞–Ω';
          buttonColor = 'bg-orange-600 hover:bg-orange-700';
          description = `–Ñ ${activeConditions.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –∑–¥–æ—Ä–æ–≤'—è. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.`;
          shouldShow = true;
        } else if (hasActiveConditions && !hasCurrentLimitations) {
          // –Ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏, –∞–ª–µ –Ω–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å - –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –ø–ª–∞–Ω
          buttonText = '‚ö†Ô∏è –í—Ä–∞—Ö—É–≤–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤\'—è –≤ –ø–ª–∞–Ω—ñ';
          buttonColor = 'bg-yellow-600 hover:bg-yellow-700';
          description = `–í–∏—è–≤–ª–µ–Ω–æ ${activeConditions.length} –ø—Ä–æ–±–ª–µ–º –∑–¥–æ—Ä–æ–≤'—è. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–ª–∞–Ω—É.`;
          shouldShow = true;
        } else if (!hasActiveConditions && hasInactiveConditions && hasCurrentLimitations) {
          // –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö, —î –≤–∏—Ä—ñ—à–µ–Ω—ñ, –∞–ª–µ –∑–∞–ª–∏—à–∏–ª–∏—Å—å –æ–±–º–µ–∂–µ–Ω–Ω—è - –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—á–∏—Å—Ç–∏—Ç–∏ –ø–ª–∞–Ω
          buttonText = 'üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è –∑ –ø–ª–∞–Ω—É';
          buttonColor = 'bg-green-600 hover:bg-green-700';
          description = `–í—Å—ñ –ø—Ä–æ–±–ª–µ–º–∏ –≤–∏—Ä—ñ—à–µ–Ω–æ, –∞–ª–µ –∑–∞–ª–∏—à–∏–ª–∏—Å—å —Å—Ç–∞—Ä—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–∞–Ω—É.`;
          shouldShow = true;
        } else if (!hasActiveConditions && hasInactiveConditions && hasSystemMemory) {
          // –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö, —î –≤–∏—Ä—ñ—à–µ–Ω—ñ —Ç–∞ —î –ø–∞–º'—è—Ç—å —Å–∏—Å—Ç–µ–º–∏
          buttonText = '‚ú® –û–Ω–æ–≤–∏—Ç–∏ –ø–ª–∞–Ω (–≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –¥–æ—Å–≤—ñ–¥)';
          buttonColor = 'bg-blue-600 hover:bg-blue-700';
          description = `–ü—Ä–æ–±–ª–µ–º–∏ –≤–∏—Ä—ñ—à–µ–Ω–æ. –°–∏—Å—Ç–µ–º–∞ –ø–∞–º'—è—Ç–∞—î –≤–∞—à –¥–æ—Å–≤—ñ–¥ —ñ –º–æ–∂–µ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫–∏.`;
          shouldShow = true;
        } else if (hasActiveConditions || hasCurrentLimitations) {
          // –ó–∞–≥–∞–ª—å–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫ - —î —â–æ—Å—å –¥–ª—è –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≤ —ñ—Å–Ω—É—é—á–æ–º—É –ø–ª–∞–Ω—ñ
          buttonText = 'üìã –í—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤ —ñ—Å–Ω—É—é—á–æ–º—É –ø–ª–∞–Ω—ñ';
          buttonColor = 'bg-blue-600 hover:bg-blue-700';
          description = '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –∑–¥–æ—Ä–æ–≤\'—è –≤ —ñ—Å–Ω—É—é—á–æ–º—É –ø–ª–∞–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.';
          shouldShow = true;
        }
        
        if (!shouldShow) return null;
        
        return (
          <div className="mt-4 pt-4 border-t border-gray-600">
            <button
              className={`w-full py-3 px-4 text-white rounded-lg transition-colors text-sm font-medium ${buttonColor}`}
              onClick={() => {
                // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è
                const confirmMessage = hasActiveConditions 
                  ? `–ê–¥–∞–ø—Ç—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –ø–ª–∞–Ω –ø—ñ–¥ ${activeConditions.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –∑–¥–æ—Ä–æ–≤'—è?`
                  : hasCurrentLimitations 
                  ? '–ê–¥–∞–ø—Ç—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –ø–ª–∞–Ω –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ—Ç–æ—á–Ω–∏—Ö –æ–±–º–µ–∂–µ–Ω—å?'
                  : '–ê–¥–∞–ø—Ç—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å?';
                
                if (confirm(confirmMessage)) {
                  console.log('üéØ [HealthProfileManager] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –∞–¥–∞–ø—Ç–∞—Ü—ñ—é —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–ª–∞–Ω—É');
                  console.log('üìã [HealthProfileManager] –ü–µ—Ä–µ–¥–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó:', {
                    name: currentProfile.name,
                    healthConditions: safeHealthProfile.conditions.filter(c => c.isActive).length,
                    currentLimitations: safeHealthProfile.currentLimitations.length,
                    activeConditionsDetails: safeHealthProfile.conditions
                      .filter(c => c.isActive)
                      .map(c => ({ condition: c.condition, severity: c.severity, areas: c.affectedAreas }))
                  });
                  
                  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ onAdaptExistingPlan –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–ª–∞–Ω—É
                  if (onAdaptExistingPlan) {
                    onAdaptExistingPlan(currentProfile);
                  } else {
                    // Fallback –Ω–∞ onUpdateProfile —è–∫—â–æ onAdaptExistingPlan –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π
                    onUpdateProfile(currentProfile);
                  }
                  
                  // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                  setTimeout(() => {
                    if (hasActiveConditions) {
                      alert(`‚úÖ –Ü—Å–Ω—É—é—á–∏–π –ø–ª–∞–Ω –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–æ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º ${activeConditions.length} –ø—Ä–æ–±–ª–µ–º –∑–¥–æ—Ä–æ–≤'—è!`);
                    } else {
                      alert('‚úÖ –Ü—Å–Ω—É—é—á–∏–π –ø–ª–∞–Ω —É—Å–ø—ñ—à–Ω–æ –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–æ!');
                    }
                  }, 1000);
                } else {
                  console.log('‚ùå [HealthProfileManager] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞—Å—É–≤–∞–≤ –∞–¥–∞–ø—Ç–∞—Ü—ñ—é –ø–ª–∞–Ω—É');
                  return; // –ó—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞—Å—É–≤–∞–≤
                }
              }}
            >
              {buttonText}
            </button>
            <p className="text-xs text-gray-400 mt-2 text-center">
              {description}
            </p>
            
            {/* –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ */}
            {hasInactiveConditions && (
              <div className="mt-2 p-2 bg-gray-700/30 rounded text-xs text-gray-300">
                üí° <strong>–ü–æ—Ä–∞–¥–∞:</strong> –£ –≤–∞—Å —î {inactiveConditions.length} –≤–∏—Ä—ñ—à–µ–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º. 
                –Ø–∫—â–æ –≤–æ–Ω–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–Ω–∞—á–∏—Ç–∏ —ó—Ö —è–∫ –∞–∫—Ç–∏–≤–Ω—ñ.
              </div>
            )}
          </div>
        );
      })()}
    </div>
  );
};
