// –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Ñ–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ

export interface OfflineTestResult {
  testName: string;
  passed: boolean;
  message: string;
  timestamp: number;
}

export class OfflineTestSuite {
  private results: OfflineTestResult[] = [];

  // –¢–µ—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –æ—Ñ–ª–∞–π–Ω
  async testOfflineDataSaving(): Promise<OfflineTestResult> {
    const testName = '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –æ—Ñ–ª–∞–π–Ω';
    try {
      const testData = {
        workoutLogs: [{ id: 'test-1', date: new Date(), exercises: [] }],
        userProfile: { name: 'Test User' },
        workoutPlan: [{ day: 1, exercises: [] }],
        lastSync: Date.now()
      };

      // –Ü–º—ñ—Ç—É—î–º–æ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
      const originalOnLine = navigator.onLine;
      Object.defineProperty(navigator, 'onLine', { value: false, writable: true });

      // –¢–µ—Å—Ç—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      localStorage.setItem('fitness-offline-test', JSON.stringify(testData));
      const saved = JSON.parse(localStorage.getItem('fitness-offline-test') || '{}');
      
      // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –º–µ—Ä–µ–∂—ñ
      Object.defineProperty(navigator, 'onLine', { value: originalOnLine, writable: true });
      
      const passed = saved.workoutLogs?.length === 1 && saved.userProfile?.name === 'Test User';
      
      // –û—á–∏—â—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
      localStorage.removeItem('fitness-offline-test');

      return {
        testName,
        passed,
        message: passed ? '–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –æ—Ñ–ª–∞–π–Ω' : '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–∏—Ö',
        timestamp: Date.now()
      };
    } catch (error) {
      return {
        testName,
        passed: false,
        message: `–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: ${error}`,
        timestamp: Date.now()
      };
    }
  }

  // –¢–µ—Å—Ç Service Worker –∫–µ—à—É–≤–∞–Ω–Ω—è
  async testServiceWorkerCaching(): Promise<OfflineTestResult> {
    const testName = 'Service Worker –∫–µ—à—É–≤–∞–Ω–Ω—è';
    try {
      if (!('serviceWorker' in navigator)) {
        return {
          testName,
          passed: false,
          message: 'Service Worker –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è',
          timestamp: Date.now()
        };
      }

      const registration = await navigator.serviceWorker.ready;
      const cacheNames = await caches.keys();
      const hasFitnessCache = cacheNames.some(name => name.includes('fitness'));

      return {
        testName,
        passed: hasFitnessCache,
        message: hasFitnessCache 
          ? `–ó–Ω–∞–π–¥–µ–Ω–æ ${cacheNames.length} –∫–µ—à—ñ–≤, –≤–∫–ª—é—á–∞—é—á–∏ —Ñ—ñ—Ç–Ω–µ—Å –∫–µ—à—ñ`
          : '–§—ñ—Ç–Ω–µ—Å –∫–µ—à—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
        timestamp: Date.now()
      };
    } catch (error) {
      return {
        testName,
        passed: false,
        message: `–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É Service Worker: ${error}`,
        timestamp: Date.now()
      };
    }
  }

  // –¢–µ—Å—Ç –æ—Ñ–ª–∞–π–Ω —á–µ—Ä–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
  async testOfflineQueue(): Promise<OfflineTestResult> {
    const testName = '–û—Ñ–ª–∞–π–Ω —á–µ—Ä–≥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó';
    try {
      const testAction = {
        type: 'save_workout_log' as const,
        data: { id: 'test-log', exercises: [] },
        timestamp: Date.now()
      };

      // –î–æ–¥–∞—î–º–æ –≤ —á–µ—Ä–≥—É
      const existingQueue = JSON.parse(localStorage.getItem('fitness-offline-queue') || '[]');
      const newQueue = [...existingQueue, testAction];
      localStorage.setItem('fitness-offline-queue', JSON.stringify(newQueue));

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ—Ä–≥—É
      const savedQueue = JSON.parse(localStorage.getItem('fitness-offline-queue') || '[]');
      const hasTestAction = savedQueue.some((action: any) => action.data.id === 'test-log');

      // –û—á–∏—â—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
      const cleanQueue = savedQueue.filter((action: any) => action.data.id !== 'test-log');
      localStorage.setItem('fitness-offline-queue', JSON.stringify(cleanQueue));

      return {
        testName,
        passed: hasTestAction,
        message: hasTestAction 
          ? '–û—Ñ–ª–∞–π–Ω —á–µ—Ä–≥–∞ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ'
          : '–ü–æ–º–∏–ª–∫–∞ —Ä–æ–±–æ—Ç–∏ –æ—Ñ–ª–∞–π–Ω —á–µ—Ä–≥–∏',
        timestamp: Date.now()
      };
    } catch (error) {
      return {
        testName,
        passed: false,
        message: `–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É —á–µ—Ä–≥–∏: ${error}`,
        timestamp: Date.now()
      };
    }
  }

  // –¢–µ—Å—Ç localStorage –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
  async testLocalStorageAvailability(): Promise<OfflineTestResult> {
    const testName = '–î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å localStorage';
    try {
      const testKey = 'fitness-storage-test';
      const testValue = 'test-data-' + Date.now();
      
      localStorage.setItem(testKey, testValue);
      const retrieved = localStorage.getItem(testKey);
      localStorage.removeItem(testKey);

      const passed = retrieved === testValue;

      return {
        testName,
        passed,
        message: passed 
          ? 'localStorage –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ'
          : '–ü—Ä–æ–±–ª–µ–º–∏ –∑ localStorage',
        timestamp: Date.now()
      };
    } catch (error) {
      return {
        testName,
        passed: false,
        message: `localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: ${error}`,
        timestamp: Date.now()
      };
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
  async runAllTests(): Promise<OfflineTestResult[]> {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –æ—Ñ–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ...');
    
    this.results = [];
    
    const tests = [
      this.testLocalStorageAvailability(),
      this.testOfflineDataSaving(),
      this.testServiceWorkerCaching(),
      this.testOfflineQueue()
    ];

    const results = await Promise.all(tests);
    this.results = results;

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    results.forEach(result => {
      const icon = result.passed ? '‚úÖ' : '‚ùå';
      console.log(`${icon} ${result.testName}: ${result.message}`);
    });

    const passedCount = results.filter(r => r.passed).length;
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${passedCount}/${results.length} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);

    return results;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  getResults(): OfflineTestResult[] {
    return this.results;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
  getOverallStatus(): { healthy: boolean; score: number; issues: string[] } {
    const results = this.getResults();
    if (results.length === 0) {
      return { healthy: false, score: 0, issues: ['–¢–µ—Å—Ç–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ñ'] };
    }

    const passedCount = results.filter(r => r.passed).length;
    const score = Math.round((passedCount / results.length) * 100);
    const issues = results.filter(r => !r.passed).map(r => r.message);

    return {
      healthy: score >= 75,
      score,
      issues
    };
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
export const offlineTestSuite = new OfflineTestSuite();
