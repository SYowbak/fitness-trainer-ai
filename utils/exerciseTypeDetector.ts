import { WeightType } from '../types';

/**
 * –í–∏–∑–Ω–∞—á–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø –≤–∞–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–∑–≤–∏ –≤–ø—Ä–∞–≤–∏
 * –¶–µ fallback –¥–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤, –∫–æ–ª–∏ AI –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏–≤ weightType
 */
export const detectWeightType = (exerciseName: string): WeightType => {
  const name = exerciseName.toLowerCase();
  
  // –í–ø—Ä–∞–≤–∏ –∑ –≤–ª–∞—Å–Ω–æ—é –≤–∞–≥–æ—é —Ç—ñ–ª–∞
  if (
    name.includes('–ø–ª–∞–Ω–∫–∞') ||
    name.includes('–≤—ñ–¥–∂–∏–º–∞–Ω') ||
    name.includes('–ø—ñ–¥—Ç—è–≥—É–≤–∞–Ω') ||
    name.includes('–ø—Ä–µ—Å') ||
    name.includes('—Å–∫—Ä—É—á—É–≤–∞–Ω') ||
    name.includes('–ø—ñ–¥–π–æ–º –Ω—ñ–≥') ||
    name.includes('–±–µ—Ä–ø—ñ') ||
    name.includes('—Å—Ç—Ä–∏–±–∫–∏') ||
    name.includes('–≤–∏–ø–∞–¥–∏ –±–µ–∑ –≤–∞–≥–∏') ||
    name.includes('–ø—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –±–µ–∑ –≤–∞–≥–∏')
  ) {
    return 'bodyweight';
  }
  
  // –í–ø—Ä–∞–≤–∏ –∑ –≥–∞–Ω—Ç–µ–ª—è–º–∏/–≥–∏—Ä—è–º–∏ (–æ–¥–∏–Ω–æ—á–Ω—ñ —Å–Ω–∞—Ä—è–¥–∏)
  if (
    name.includes('–≥–∞–Ω—Ç–µ–ª') ||
    name.includes('–≥–∏—Ä') ||
    name.includes('–ø—ñ–¥–π–æ–º–∏ –≥–∞–Ω—Ç–µ–ª–µ–π') ||
    name.includes('–∂–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π') ||
    name.includes('—Ç—è–≥–∞ –≥–∞–Ω—Ç–µ–ª—ñ') ||
    name.includes('–º–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏') ||
    name.includes('—Ä–æ–∑–≤–µ–¥–µ–Ω–Ω—è –≥–∞–Ω—Ç–µ–ª–µ–π')
  ) {
    return 'single';
  }
  
  // –í–ø—Ä–∞–≤–∏ –±–µ–∑ –≤–∞–≥–∏ (—Ä–æ–∑—Ç—è–∂–∫–∞, –∫–∞—Ä–¥—ñ–æ)
  if (
    name.includes('—Ä–æ–∑—Ç—è–∂–∫–∞') ||
    name.includes('–∫–∞—Ä–¥—ñ–æ') ||
    name.includes('–±—ñ–≥') ||
    name.includes('—Ö–æ–¥—å–±–∞') ||
    name.includes('–≤–µ–ª–æ—Å–∏–ø–µ–¥') ||
    name.includes('–µ–ª—ñ–ø—Ç–∏—á–Ω–∏–π')
  ) {
    return 'none';
  }
  
  // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –∑–∞–≥–∞–ª—å–Ω–∞ –≤–∞–≥–∞ (—à—Ç–∞–Ω–≥–∞, —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∏)
  return 'total';
};

// –ö–µ—à –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –ª–æ–≥—ñ–≤
const fixedExercises = new Set<string>();

/**
 * –í–∏–ø—Ä–∞–≤–ª—è—î weightType –¥–ª—è –≤–ø—Ä–∞–≤–∏, —è–∫—â–æ –≤—ñ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
 */
export const fixExerciseWeightType = (exerciseName: string, currentWeightType: WeightType): WeightType => {
  const detectedType = detectWeightType(exerciseName);
  
  // –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–ø —è–≤–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π, –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ
  if (currentWeightType !== detectedType) {
    const cacheKey = `${exerciseName}:${currentWeightType}:${detectedType}`;
    
    // –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —â–µ –Ω–µ –ª–æ–≥—É–≤–∞–ª–∏ —Ü—é –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é
    if (!fixedExercises.has(cacheKey)) {
      console.log(`üîß [FIX] Fixing weightType for "${exerciseName}": "${currentWeightType}" ‚Üí "${detectedType}"`);
      fixedExercises.add(cacheKey);
    }
    
    return detectedType;
  }
  
  return currentWeightType;
};
