import React, { useState, useEffect, useCallback } from 'react';
import { UserProfile, DailyWorkoutPlan, WorkoutLog, LoggedExercise, LoggedSetWithAchieved, ExerciseRecommendation, Exercise } from './types';
import { UI_TEXT, GEMINI_MODEL_TEXT, formatTime } from './constants';
import Navbar from './components/Navbar';
import UserProfileForm from './components/UserProfileForm';
import WorkoutDisplay from './components/WorkoutDisplay';
import ProgressView from './components/ProgressView';
import Spinner from './components/Spinner';
import ErrorMessage from './components/ErrorMessage';
import TrainerChat from './components/TrainerChat';
import QuotaStatus from './components/QuotaStatus';
import UpdateNotification from './components/UpdateNotification';
import SystemStatusBar from './components/SystemStatusBar';
import { saveOfflineData, getOfflineData, addToOfflineQueue, isOnline, syncOfflineQueue, getOfflineQueue, clearStaleOfflineData, checkLocalStorageHealth } from './utils/offlineUtils';
import { generateWorkoutPlan as apiGenerateWorkoutPlan, generateWellnessRecommendations } from './services/geminiService';
import { generateNewAdaptiveWorkout } from './services/newAdaptiveWorkout';
import { useAuth } from './hooks/useAuth';
import { AuthForm } from './components/AuthForm';
import { useUserData } from './hooks/useUserData';
import { deleteUser } from 'firebase/auth';
import { db } from './config/firebase';
import { collection, doc, deleteDoc, getDocs, query, where } from 'firebase/firestore';
import { getExerciseVariations, analyzeProgressTrends } from './services/workoutAnalysisService';
import { addBaseRecommendations, validateWorkoutSafety } from './services/injuryValidationService';
import { backgroundAnalysisService } from './services/backgroundWorkoutAnalysis';
import { useWorkoutSync } from './hooks/useWorkoutSync';
import WellnessCheckModal from './components/WellnessCheckModal';
import WellnessRecommendations from './components/WellnessRecommendations';
import { WellnessCheck, AdaptiveWorkoutPlan, WellnessRecommendation } from './types';
import WorkoutCompleteModal from './components/WorkoutCompleteModal';
import AddExerciseModal from './components/AddExerciseModal';

type View = 'profile' | 'workout' | 'progress';

const App: React.FC = () => {
  
  const { user, loading, logout, setUser } = useAuth();
  const { workoutPlan, saveWorkoutPlan, profile: firestoreProfile, workoutLogs: firestoreWorkoutLogs, saveProfile, saveWorkoutLog } = useUserData();
  const { session, startWorkout, updateExercise, addCustomExercise, endWorkout, updateTimer, updateWellnessCheck, updateAdaptiveWorkoutPlan, updateWellnessRecommendations, updateExerciseOrder } = useWorkoutSync(user?.uid || '');
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [currentWorkoutPlan, setCurrentWorkoutPlan] = useState<DailyWorkoutPlan[] | null>(null);
  const [workoutLogs, setWorkoutLogs] = useState<WorkoutLog[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [currentView, setCurrentView] = useState<View>('workout');
  const [apiKeyMissing, setApiKeyMissing] = useState<boolean>(false);
  const [exerciseRecommendations, setExerciseRecommendations] = useState<ExerciseRecommendation[]>([]);
  const [exerciseVariations, setExerciseVariations] = useState<Map<string, Exercise[]>>(new Map());
  const [progressTrends, setProgressTrends] = useState<{
    overallProgress: 'improving' | 'plateau' | 'declining';
    strengthProgress: number;
    enduranceProgress: number;
    consistencyScore: number;
  } | null>(null);
  const [wellnessCheckModalOpen, setWellnessCheckModalOpen] = useState<boolean>(false);
  
  // Debug wellness modal state changes
  useEffect(() => {
  }, [wellnessCheckModalOpen]);
  const [wellnessRecommendationsModalOpen, setWellnessRecommendationsModalOpen] = useState<boolean>(false);
  const [wellnessRecommendations, setWellnessRecommendations] = useState<WellnessRecommendation[]>([]);
  const [adaptiveWorkoutPlan, setAdaptiveWorkoutPlan] = useState<AdaptiveWorkoutPlan | null>(null);
  const [pendingWorkoutDay, setPendingWorkoutDay] = useState<number | null>(null);
  const [isTrainerChatOpen, setIsTrainerChatOpen] = useState(false);
  const [hasInitializedView, setHasInitializedView] = useState(false);
  const [isNetworkOnline, setIsNetworkOnline] = useState(navigator.onLine);
  const [isWorkoutCompleteModalOpen, setIsWorkoutCompleteModalOpen] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analyzingLogId, setAnalyzingLogId] = useState<string | null>(null);
  const [isProcessingWellness, setIsProcessingWellness] = useState(false);
  const [wellnessProcessingStep, setWellnessProcessingStep] = useState<string>('');
  const [isAddExerciseOpen, setIsAddExerciseOpen] = useState(false);

  // –í–∏–¥—ñ–ª–µ–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω—å –∑–¥–æ—Ä–æ–≤'—è –∑ –Ω–æ—Ç–∞—Ç–æ–∫ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è
  const extractConstraintsFromNotes = useCallback((notes?: string): string[] => {
    if (!notes) return [];
    const text = notes.toLowerCase();
    const keywords: { key: RegExp; label: string }[] = [
      { key: /–∫–æ–ª—ñ–Ω|–∫–æ–ª—ñ–Ω–æ|–∫–æ–ª—ñ–Ω–∞/, label: '–∫–æ–ª—ñ–Ω–æ' },
      { key: /—Å–ø–∏–Ω|–ø–æ–ø–µ—Ä–µ–∫|—Ö—Ä–µ–±—Ç/, label: '—Å–ø–∏–Ω–∞' },
      { key: /–ø–ª–µ—á|–¥–µ–ª—å—Ç/, label: '–ø–ª–µ—á–µ' },
      { key: /–ª—ñ–∫(–æ—Ç—å|—Ç—ñ)/, label: '–ª—ñ–∫–æ—Ç—å' },
      { key: /–∑–∞–ø\'?—è—Å—Ç|–∫–∏—Å—Ç—å/, label: "–∑–∞–ø'—è—Å—Ç—è" },
      { key: /—â–∏–∫–æ–ª–æ—Ç|–≥–æ–º—ñ–ª–∫|–≥–æ–ª–µ–Ω–æ—Å—Ç–æ–ø/, label: '—â–∏–∫–æ–ª–æ—Ç–∫–∞' },
      { key: /–∞—Ö—ñ–ª|–∞—Ö—ñ–ª–ª/, label: '–∞—Ö—ñ–ª–ª–æ–≤–µ —Å—É—Ö–æ–∂–∏–ª–ª—è' },
      { key: /—à–∏—è|—à–∏–π/, label: '—à–∏—è' },
      { key: /—Ç–∞–∑|–∫—É–ª—å—à|—Å—Ç–µ–≥–Ω/, label: '—Ç–∞–∑/—Å—Ç–µ–≥–Ω–æ' },
      { key: /—Ç—Ä–∞–≤–º|—Ä–æ–∑—Ç—è–≥|–Ω–∞–¥—Ä–∏–≤|–∑–∞–ø–∞–ª–µ–Ω–Ω|–±—ñ–ª—å|–±–æ–ª–∏—Ç—å/, label: '–±—ñ–ª—å/—Ç—Ä–∞–≤–º–∞' }
    ];
    const found = new Set<string>();
    for (const { key, label } of keywords) {
      if (key.test(text)) found.add(label);
    }
    // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç –∑ –ø–µ—Ä—à–∏—Ö —Å–ª—ñ–≤
    if (found.size === 0) {
      const summary = notes.trim().split(/\s+/).slice(0, 5).join(' ');
      if (summary) found.add(summary);
    }
    return Array.from(found).slice(0, 5);
  }, []);

  useEffect(() => {
    if (typeof (import.meta as any).env === 'undefined' || !(import.meta as any).env.VITE_API_KEY) {
      setApiKeyMissing(true);
    }
    
    // –û—á–∏—â—É—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –¥–∞–Ω—ñ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–¥–æ—Ä–æ–≤'—è localStorage –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
    clearStaleOfflineData();
    if (!checkLocalStorageHealth()) {
      console.warn('‚ö†Ô∏è localStorage –º–æ–∂–µ –º–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ - —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞');
    }
  }, []);

  // –î–µ–±–∞–≥ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Å–ø–∞–º—É
  // useEffect(() => {
  //   console.log('üîÑ [App] –°–µ—Å—ñ—è –∑–º—ñ–Ω–∏–ª–∞—Å—å:', { 
  //     activeDay: session.activeDay, 
  //     exercisesCount: session.sessionExercises.length,
  //     hasStartTime: !!session.startTime 
  //   });
  // }, [session.activeDay, session.sessionExercises.length, session.startTime]);

  // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  useEffect(() => {
    if (!user) {
      setHasInitializedView(false);
    }
  }, [user]);

  useEffect(() => {
    if (workoutPlan) {
      setCurrentWorkoutPlan(workoutPlan);
    } else {
      setCurrentWorkoutPlan(null);
    }
  }, [workoutPlan]);

  // –†–æ–∑—É–º–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è: Firebase –º–∞—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç, localStorage —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ—Ñ–ª–∞–π–Ω
  useEffect(() => {
    if (user) {
      // –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º: Firebase –º–∞—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
      if (isOnline()) {
        // –û–Ω–æ–≤–ª—é—î–º–æ UI —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –¥–∞–Ω—ñ –∑ Firebase –≤—ñ–¥—Ä—ñ–∑–Ω—è—é—Ç—å—Å—è
        if (JSON.stringify(firestoreProfile) !== JSON.stringify(userProfile)) {
          console.log('üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∑ Firebase');
          setUserProfile(firestoreProfile);
        }
        
        if (JSON.stringify(firestoreWorkoutLogs) !== JSON.stringify(workoutLogs)) {
          console.log('üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–≥–∏ –∑ Firebase');
          setWorkoutLogs(firestoreWorkoutLogs);
        }
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –Ω–æ–≤—ñ –¥–∞–Ω—ñ
        if (firestoreProfile || firestoreWorkoutLogs.length > 0) {
          saveOfflineData({
            userProfile: firestoreProfile,
            workoutLogs: firestoreWorkoutLogs,
            workoutPlan: currentWorkoutPlan || []
          });
        }
      }
      // –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ localStorage —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤ —Å—Ç–∞–Ω—ñ
      else if (!userProfile && !workoutLogs.length) {
        const offlineData = getOfflineData();
        if (offlineData.userProfile || offlineData.workoutLogs.length > 0) {
          console.log('üìµ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ –æ—Ñ–ª–∞–π–Ω –∫–µ—à—É (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î –ø–æ—Ç–æ—á–Ω–∏—Ö)');
          setUserProfile(offlineData.userProfile);
          setWorkoutLogs(offlineData.workoutLogs);
          if (offlineData.workoutPlan && offlineData.workoutPlan.length > 0) {
            setCurrentWorkoutPlan(offlineData.workoutPlan);
          }
        }
      }
    }
  }, [user, firestoreProfile, firestoreWorkoutLogs, currentWorkoutPlan]);

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–∏—Ö –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–µ—Ä–µ–∂—ñ
  useEffect(() => {
    const handleOnline = async () => {
      if (user && userProfile && currentWorkoutPlan) {
        const queue = getOfflineQueue();
        if (queue.length > 0) {
          console.log(`üîÑ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –º–µ—Ä–µ–∂—É - —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ ${queue.length} –æ—Ñ–ª–∞–π–Ω –¥—ñ–π`);
          
          try {
            await syncOfflineQueue({
              saveWorkoutLog: async (data) => {
                const savedLog = await saveWorkoutLog(data);
                setWorkoutLogs(prev => prev.map(log => {
                  if (log.id?.startsWith('offline_')) {
                    // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –¥–∞—Ç–∏ (–≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏)
                    const logDate = log.date instanceof Date ? log.date : new Date((log.date as any).seconds * 1000);
                    const dataDate = data.date instanceof Date ? data.date : new Date((data.date as any).seconds * 1000);
                    return logDate.getTime() === dataDate.getTime() ? savedLog : log;
                  }
                  return log;
                }));
              },
              saveProfile: async (data) => {
                await saveProfile(data);
              },
              saveWorkoutPlan: async (data) => {
                await saveWorkoutPlan(data);
              }
            });
            
            console.log('‚úÖ –û—Ñ–ª–∞–π–Ω —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
          } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–∏—Ö:', error);
          }
        }

        // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –Ω–µ–≤–¥–∞–ª—ñ –∞–Ω–∞–ª—ñ–∑–∏ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–µ—Ä–µ–∂—ñ
        console.log('üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–≤–¥–∞–ª—ñ –∞–Ω–∞–ª—ñ–∑–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è');
        try {
          await backgroundAnalysisService.retryFailedAnalyses(
            workoutLogs,
            userProfile,
            currentWorkoutPlan,
            saveWorkoutLog
          );
          console.log('‚úÖ –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –Ω–µ–≤–¥–∞–ª–∏—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        } catch (error) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—ñ–≤:', error);
        }
      }
    };

    window.addEventListener('online', handleOnline);
    return () => window.removeEventListener('online', handleOnline);
  }, [user, userProfile, currentWorkoutPlan, workoutLogs, saveWorkoutLog, saveProfile, saveWorkoutPlan]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –≤–∫–ª–∞–¥–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å (—Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–æ—á–∞—Ç–∫–æ–≤–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ)
  useEffect(() => {
    // –ë–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
    const hasWorkoutPlan = currentWorkoutPlan && Array.isArray(currentWorkoutPlan) && currentWorkoutPlan.length > 0;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π, —Ü–µ –ø–µ—Ä—à–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ —â–µ –Ω–µ –±—É–ª–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if (user && !hasInitializedView) {
      if (hasWorkoutPlan && currentView === 'profile') {
        // –Ø–∫—â–æ —î –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —ñ –∑–∞—Ä–∞–∑ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –ø—Ä–æ—Ñ—ñ–ª—å, –ø–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        setCurrentView('workout');
      } else if (!hasWorkoutPlan && currentView !== 'profile') {
        // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —ñ –∑–∞—Ä–∞–∑ –Ω–µ –ø—Ä–æ—Ñ—ñ–ª—å, –ø–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å
        setCurrentView('profile');
      }
      setHasInitializedView(true);
    }
  }, [user, currentWorkoutPlan, hasInitializedView]);

  // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –º–µ—Ä–µ–∂—ñ
  useEffect(() => {
    const handleOnline = () => setIsNetworkOnline(true);
    const handleOffline = () => setIsNetworkOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
  const handleAppUpdate = useCallback(() => {
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.ready.then(registration => {
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ Service Worker –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        registration.waiting?.postMessage({ type: 'SKIP_WAITING' });
        
        // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        window.location.reload();
      });
    }
  }, []);

  // Firebase —Ç–∞–π–º–µ—Ä: —Ç—ñ–ª—å–∫–∏ –æ–Ω–ª–∞–π–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –º—ñ–∂ –ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏
  useEffect(() => {
    let timerInterval: number | null = null;
    
    if (user && session.startTime && session.activeDay !== null && navigator.onLine) {
      const startTime = session.startTime;
      timerInterval = window.setInterval(() => {
        const currentTime = Date.now();
        const elapsedTime = Math.floor((currentTime - startTime) / 1000);
        updateTimer(elapsedTime);
      }, 1000);
    }
    
    return () => {
      if (timerInterval) {
        clearInterval(timerInterval);
      }
    };
  }, [user, session.startTime, session.activeDay, updateTimer]);

  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ª–æ–≥—ñ–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
  useEffect(() => {
    if (workoutLogs && workoutLogs.length > 0) {
      const trends = analyzeProgressTrends(workoutLogs);
      setProgressTrends(trends);
    }
  }, [workoutLogs]);

  // –û—Ç—Ä–∏–º—É—î–º–æ –≤–∞—Ä—ñ–∞—Ü—ñ—ó –≤–ø—Ä–∞–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω—É
  const loadExerciseVariations = useCallback(async () => {
    if (!userProfile || !currentWorkoutPlan || !workoutLogs || !workoutLogs.length) return;

    const variationsMap = new Map<string, any[]>();
    
    for (const dayPlan of currentWorkoutPlan) {
      for (const exercise of dayPlan.exercises) {
        try {
          const variations = await getExerciseVariations(
            userProfile,
            exercise,
            workoutLogs,
            'general' // –ú–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–ª—å–æ–≤–æ—ó –≥—Ä—É–ø–∏ –º'—è–∑—ñ–≤
          );
          if (variations.length > 0) {
            variationsMap.set(exercise.name, variations);
          }
        } catch (error) {
          console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–∞—Ä—ñ–∞—Ü—ñ–π –¥–ª—è ${exercise.name}:`, error);
        }
      }
    }
    
    setExerciseVariations(variationsMap);
  }, [userProfile, currentWorkoutPlan, workoutLogs]);

  useEffect(() => {
    loadExerciseVariations();
  }, [loadExerciseVariations]);

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –ë–ï–ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–ª–∞–Ω—É (—Ç—ñ–ª—å–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è)
  const handleProfileUpdate = useCallback(async (profile: UserProfile) => {
    console.log('üîµ [App.handleProfileUpdate] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é (—Ç—ñ–ª—å–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è):', profile.healthProfile?.conditions?.length || 0, '—É–º–æ–≤');
    
    if (apiKeyMissing) {
      setError(UI_TEXT.apiKeyMissing);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const profileToSave: UserProfile = {
        ...profile,
        targetMuscleGroups: profile.targetMuscleGroups || [],
      };
      console.log('üîÑ [App.handleProfileUpdate] –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å');
      await saveProfile(profileToSave);
      console.log('‚úÖ [App.handleProfileUpdate] –ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
    } catch (e: any) {
      console.error("‚ùå [App.handleProfileUpdate] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é:", e);
      setError(e.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é');
    } finally {
      setIsLoading(false);
    }
  }, [apiKeyMissing, saveProfile]);

  // –ê–¥–∞–ø—Ç–∞—Ü—ñ—è —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–ª–∞–Ω—É –ø—ñ–¥ –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤'—è
  const handleAdaptExistingPlan = useCallback(async (profile: UserProfile) => {
    console.log('üîÑ [App.handleAdaptExistingPlan] –ê–¥–∞–ø—Ç–∞—Ü—ñ—è —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–ª–∞–Ω—É –ø—ñ–¥ –ø—Ä–æ–±–ª–µ–º–∏ –∑–¥–æ—Ä–æ–≤\'—è:', profile.healthProfile?.conditions?.length || 0, '—É–º–æ–≤');
    
    if (apiKeyMissing) {
      setError(UI_TEXT.apiKeyMissing);
      return;
    }
    
    if (!currentWorkoutPlan || currentWorkoutPlan.length === 0) {
      setError("–ù–µ–º–∞—î —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–ª–∞–Ω—É –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.");
      return;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∞–∫—Ç–∏–≤–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    if (session.activeDay !== null) {
      if(!confirm("–£ –≤–∞—Å —î –∞–∫—Ç–∏–≤–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –ø–ª–∞–Ω—É –∑–∞–≤–µ—Ä—à–∏—Ç—å –π–æ–≥–æ –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?")) return;
      endWorkout(); // –ó–∞–≤–µ—Ä—à—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é Firebase
    }
    
    setIsLoading(true);
    setError(null);
    try {
      const profileToSave: UserProfile = {
        ...profile,
        targetMuscleGroups: profile.targetMuscleGroups || [],
      };
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó –ø–ª–∞–Ω—É
      const activeConditions = profileToSave.healthProfile?.conditions?.filter(c => c.isActive) || [];
      const updatedProfileWithStatus = {
        ...profileToSave,
        healthProfile: {
          ...profileToSave.healthProfile,
          conditions: profileToSave.healthProfile?.conditions || [],
          currentLimitations: profileToSave.healthProfile?.currentLimitations || [],
          recoveryProgress: profileToSave.healthProfile?.recoveryProgress || {},
          systemMemory: profileToSave.healthProfile?.systemMemory || { rememberedFacts: [], adaptationHistory: [] },
          planAdaptationStatus: {
            lastAdaptedDate: new Date(),
            adaptedConditions: activeConditions.map(c => c.condition),
            needsReAdaptation: false
          }
        }
      };
      
      // –°–ø–æ—á–∞—Ç–∫—É –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó
      console.log('üîÑ [App.handleAdaptExistingPlan] –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó');
      await saveProfile(updatedProfileWithStatus);
      
      // –ü–æ—Ç—ñ–º –≥–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π –ø–ª–∞–Ω –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ–±–ª–µ–º –∑–¥–æ—Ä–æ–≤'—è
      console.log('üèãÔ∏è [App.handleAdaptExistingPlan] –ì–µ–Ω–µ—Ä—É—î–º–æ –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω');
      const adaptedPlan = await apiGenerateWorkoutPlan(updatedProfileWithStatus, GEMINI_MODEL_TEXT);
      await saveWorkoutPlan(adaptedPlan);
      
      console.log('‚úÖ [App.handleAdaptExistingPlan] –ü–ª–∞–Ω —É—Å–ø—ñ—à–Ω–æ –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–æ');
      setCurrentView('workout'); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
    } catch (e: any) {
      console.error("‚ùå [App.handleAdaptExistingPlan] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó –ø–ª–∞–Ω—É:", e);
      setError(e.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó –ø–ª–∞–Ω—É');
    } finally {
      setIsLoading(false);
    }
  }, [apiKeyMissing, saveProfile, saveWorkoutPlan, currentWorkoutPlan, session.activeDay, endWorkout]);

  const handleProfileSave = useCallback(async (profile: UserProfile) => {
    if (apiKeyMissing) {
      setError(UI_TEXT.apiKeyMissing);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const profileToSave: UserProfile = {
        ...profile,
        targetMuscleGroups: profile.targetMuscleGroups || [],
      };
      await saveProfile(profileToSave); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Firestore —á–µ—Ä–µ–∑ useUserData
      const plan = await apiGenerateWorkoutPlan(profileToSave, GEMINI_MODEL_TEXT);
      await saveWorkoutPlan(plan);
      setCurrentView('workout');
    } catch (e: any) {
      console.error("Error generating workout plan:", e);
      setError(e.message || UI_TEXT.errorOccurred);
    } finally {
      setIsLoading(false);
    }
  }, [apiKeyMissing, saveWorkoutPlan, saveProfile]);

  const handleGenerateNewPlan = useCallback(async () => {
    if (apiKeyMissing) {
      setError(UI_TEXT.apiKeyMissing);
      return;
    }
    if (userProfile) {
      if (session.activeDay !== null) { // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ session.activeDay
         if(!confirm("–£ –≤–∞—Å —î –∞–∫—Ç–∏–≤–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É –∑–∞–≤–µ—Ä—à–∏—Ç—å –π–æ–≥–æ –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?")) return;
         endWorkout(); // –ó–∞–≤–µ—Ä—à—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é Firebase
      }
      setIsLoading(true);
      setError(null);
      try {
        const plan = await apiGenerateWorkoutPlan(userProfile, GEMINI_MODEL_TEXT);
        await saveWorkoutPlan(plan);
        setCurrentView('workout');
      } catch (e: any) {
        console.error("Error generating new workout plan:", e);
        setError(e.message || UI_TEXT.errorOccurred);
      } finally {
        setIsLoading(false);
      }
    } else {
      setCurrentView('profile');
      setError("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ç–∞ –∑–±–µ—Ä–µ–∂—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å.");
    }
  }, [userProfile, apiKeyMissing, session.activeDay, endWorkout, saveWorkoutPlan]);

  const handleStartWorkoutWithWellnessCheck = useCallback(async (dayNumber: number) => {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤
    console.log('üîç [handleStartWorkout] –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –¥–Ω—è', dayNumber);
    const dayRecommendations = backgroundAnalysisService.getRecommendationsForDay(workoutLogs, dayNumber);
    
    if (dayRecommendations.length > 0) {
      console.log('‚úÖ [handleStartWorkout] –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:', dayRecommendations.length);
      setExerciseRecommendations(dayRecommendations);
    } else {
      console.log('‚ÑπÔ∏è [handleStartWorkout] –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –¥–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      setExerciseRecommendations([]);
    }
    
    setPendingWorkoutDay(dayNumber);
    setWellnessCheckModalOpen(true);
  }, [workoutLogs]);

  const handleLogSingleExercise = useCallback((exerciseIndex: number, loggedSets: LoggedSetWithAchieved[], success: boolean) => {
    updateExercise(exerciseIndex, loggedSets, success);
  }, [updateExercise]);

  const handleSkipExercise = useCallback((exerciseIndex: number) => {
    updateExercise(exerciseIndex, [], false, true); // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –ø—Ä–æ–ø—É—â–µ–Ω—É, –±–µ–∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è, isSkipped = true
  }, [updateExercise]);

  const handleUndoSkipExercise = useCallback((exerciseIndex: number) => {
    updateExercise(exerciseIndex, [], false, false); // –°–∫–∞—Å–æ–≤—É—î–º–æ –ø—Ä–æ–ø—É—Å–∫, isSkipped = false
  }, [updateExercise]);
  
  const handleEndWorkout = useCallback(async () => {
    if (session.activeDay === null || !currentWorkoutPlan || !Array.isArray(currentWorkoutPlan) || !session.startTime || !userProfile || !user) {
      console.error("[handleEndWorkout] –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è");
      alert("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –≤–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.");
      return;
    }

    const currentDayPlan = currentWorkoutPlan.find(p => p.day === session.activeDay);
    if (!currentDayPlan) {
      console.error("Could not find current day's plan.");
      alert("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.");
      return;
    }

    const loggedExercisesForSession: LoggedExercise[] = session.sessionExercises
      .filter(ex => ex.isCompletedDuringSession)
      .map((ex) => ({
        exerciseName: ex.name,
        originalSets: ex.sets,
        originalReps: ex.reps,
        targetWeightAtLogging: ex.targetWeight || null,
        loggedSets: ex.sessionLoggedSets || [],
        completedSuccessfully: ex.sessionSuccess ?? false,
        notes: ex.notes ?? null,
      }));

    if (loggedExercisesForSession.length === 0) {
      endWorkout();
      setAdaptiveWorkoutPlan(null); // –û—á–∏—â–∞—î–º–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π –ø–ª–∞–Ω
      alert("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞–ª–µ –∂–æ–¥–Ω–æ—ó –≤–ø—Ä–∞–≤–∏ –Ω–µ –±—É–ª–æ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–æ.");
      return;
    }

    endWorkout();
    setAdaptiveWorkoutPlan(null); // –û—á–∏—â–∞—î–º–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π –ø–ª–∞–Ω
    setWellnessRecommendations([]);
    setWellnessRecommendationsModalOpen(false);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –û–ë'–Ñ–ö–¢ –ª–æ–≥—É, –∞–ª–µ –±–µ–∑ ID
    let workoutLog: WorkoutLog = {
      userId: user.uid,
      date: new Date(),
      duration: Math.floor((Date.now() - session.startTime) / 1000),
      dayCompleted: session.activeDay,
      workoutDuration: formatTime(Math.floor((Date.now() - session.startTime) / 1000)) ?? null,
      loggedExercises: loggedExercisesForSession,
      wellnessCheck: session.wellnessCheck ?? null,
      adaptiveWorkoutPlan: session.adaptiveWorkoutPlan ? {
        ...session.adaptiveWorkoutPlan,
        adaptations: session.adaptiveWorkoutPlan.adaptations || []
      } : null,
      wellnessRecommendations: session.wellnessRecommendations ?? null,
      wasAdaptiveWorkout: !!session.adaptiveWorkoutPlan,
    };

    try {
      // –Ø–∫—â–æ –æ–Ω–ª–∞–π–Ω - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Firebase —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑
      if (isOnline()) {
        const savedLog = await saveWorkoutLog(workoutLog);
        setWorkoutLogs(prev => [savedLog, ...prev]);

        console.log('üîÑ [handleEndWorkout] –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è');
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ (–Ω–µ –±–ª–æ–∫—É—î UI)
        backgroundAnalysisService.queueWorkoutForAnalysis(
          savedLog,
          userProfile,
          currentWorkoutPlan.find(p => p.day === session.activeDay)!,
          workoutLogs,
          saveWorkoutLog
        ).catch(error => {
          console.error('‚ùå [handleEndWorkout] –ü–æ–º–∏–ª–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É:', error);
        });

        // –ù–ï –æ—á–∏—â—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó - –∑–∞–ª–∏—à–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑ –∞–Ω–∞–ª—ñ–∑—É
      } 
      // –Ø–∫—â–æ –æ—Ñ–ª–∞–π–Ω - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ —ñ –¥–æ–¥–∞—î–º–æ –≤ —á–µ—Ä–≥—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
      else {
        console.log('üìµ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ');
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π ID –¥–ª—è –æ—Ñ–ª–∞–π–Ω –ª–æ–≥—É
        const offlineLog = {
          ...workoutLog,
          id: `offline_${Date.now()}`,
          isOffline: true,
          analysisStatus: 'pending' as const // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω –∞–Ω–∞–ª—ñ–∑
        };
        
        // –î–æ–¥–∞—î–º–æ –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        setWorkoutLogs(prev => [offlineLog, ...prev]);
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –æ—Ñ–ª–∞–π–Ω —á–µ—Ä–≥—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        addToOfflineQueue({
          type: 'save_workout_log',
          data: workoutLog,
          timestamp: Date.now()
        });
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω—ñ
        const offlineData = getOfflineData();
        saveOfflineData({
          ...offlineData,
          workoutLogs: [offlineLog, ...offlineData.workoutLogs]
        });
      }
      setIsWorkoutCompleteModalOpen(true); // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
      
      // –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≤–Ω–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑ Firestore
      const fullPlan = await saveWorkoutPlan(null, true); // `true` –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      if (fullPlan) {
        setCurrentWorkoutPlan(fullPlan);
      }
      
    } catch (analysisError) {
      console.error("[handleEndWorkout] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:", analysisError);
      setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è");
    }
    
    setCurrentView('progress');
  }, [session, currentWorkoutPlan, userProfile, endWorkout, saveWorkoutLog, saveWorkoutPlan, workoutLogs, user]);

  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤–∞—Ä—ñ–∞—Ü—ñ—ó –≤–ø—Ä–∞–≤–∏
  const handleSelectVariation = useCallback(async (exerciseName: string, variation: any) => {
    if (!currentWorkoutPlan || !Array.isArray(currentWorkoutPlan)) return;

    const newWorkoutPlan = currentWorkoutPlan.map(dayPlan => ({
      ...dayPlan,
      exercises: dayPlan.exercises.map(exercise => 
        exercise.name === exerciseName ? { ...variation, id: exercise.id } : exercise
      )
    }));

    setCurrentWorkoutPlan(newWorkoutPlan);
    await saveWorkoutPlan(newWorkoutPlan);
    
    // –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –≤–∞—Ä—ñ–∞—Ü—ñ—ó –¥–ª—è —Ü—ñ—î—ó –≤–ø—Ä–∞–≤–∏ –∑ –º–∞–ø–∏, —â–æ–± –Ω–µ –∫–ª—ñ–∫–∞—Ç–∏—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
    setExerciseVariations(prev => {
      const newMap = new Map(prev);
      newMap.delete(exerciseName);
      return newMap;
    });
  }, [currentWorkoutPlan, saveWorkoutPlan]);

  const handleDeleteAccount = async () => {
    if (!user) return;
    
    try {
      // –í–∏–¥–∞–ª—è—î–º–æ –¥–∞–Ω—ñ –∑ Firestore
      await deleteDoc(doc(db, 'users', user.uid));
      await deleteDoc(doc(db, 'workoutPlans', user.uid));
      
      // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ª–æ–≥–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const logsQuery = query(collection(db, 'workoutLogs'), where('userId', '==', user.uid));
      const logsSnapshot = await getDocs(logsQuery);
      const deletePromises = logsSnapshot.docs.map(doc => deleteDoc(doc.ref));
      await Promise.all(deletePromises);
      
      // –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      await deleteUser(user);
      
      setUser(null);
      setCurrentView('profile');
    } catch (error) {
      console.error('Error deleting account:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  };

  const handleSaveWorkoutPlan = useCallback(async (plan: DailyWorkoutPlan[]) => {
    try {
      await saveWorkoutPlan(plan);
      setCurrentWorkoutPlan(plan);
    } catch (e: any) {
      console.error("Error saving edited workout plan:", e);
      setError(e.message || UI_TEXT.errorOccurred);
    }
  }, [saveWorkoutPlan]);

  // Handler for reordering exercises during active workout
  const handleReorderExercises = useCallback((newExercises: Exercise[]) => {
    if (session.activeDay !== null) {
      // Update session exercises order immediately for UI responsiveness
      updateExerciseOrder(newExercises);
    }
  }, [session.activeDay, updateExerciseOrder]);

  // Handler for saving exercise order permanently
  const handleSaveExerciseOrder = useCallback(async (dayNumber: number, exercises: Exercise[]) => {
    if (!currentWorkoutPlan) return;
    
    try {
      const updatedPlan = currentWorkoutPlan.map(dayPlan => 
        dayPlan.day === dayNumber 
          ? { ...dayPlan, exercises }
          : dayPlan
      );
      
      await saveWorkoutPlan(updatedPlan);
      setCurrentWorkoutPlan(updatedPlan);
    } catch (error) {
      console.error('Error saving exercise order:', error);
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –≤–ø—Ä–∞–≤');
    }
  }, [currentWorkoutPlan, saveWorkoutPlan]);

  const handleAnalyzeWorkoutFromLog = useCallback(async (logToAnalyze: WorkoutLog) => {
    if (!userProfile || !currentWorkoutPlan || !logToAnalyze.id) return;
    setIsAnalyzing(true);
    setAnalyzingLogId(logToAnalyze.id);
    
    console.log('üîÑ [handleAnalyzeWorkoutFromLog] –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–∞–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:', logToAnalyze.id);
    
    try {
      const currentDayPlan = currentWorkoutPlan.find(p => p.day === logToAnalyze.dayCompleted);
      if (!currentDayPlan) {
        setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É');
        return;
      }

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–π —Å–∞–º–∏–π —Ñ–æ–Ω–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑, —â–æ —ñ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
      console.log('üß† [handleAnalyzeWorkoutFromLog] –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ (—è–∫ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è)');
      
      await backgroundAnalysisService.queueWorkoutForAnalysis(
        logToAnalyze,
        userProfile,
        currentDayPlan,
        workoutLogs.filter(log => log.id !== logToAnalyze.id),
        saveWorkoutLog
      );

      console.log('‚úÖ [handleAnalyzeWorkoutFromLog] –§–æ–Ω–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
      
      // –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∞–Ω–∞–ª—ñ–∑—É –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É (—Ñ–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å)
      setIsAnalyzing(false);
      setAnalyzingLogId(null);
      
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –∞–Ω–∞–ª—ñ–∑—ñ:", error);
      setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      setIsAnalyzing(false);
      setAnalyzingLogId(null);
    }
  }, [userProfile, currentWorkoutPlan, workoutLogs, saveWorkoutLog]);

  const handleDeleteLog = async (logToDelete: WorkoutLog) => {
    if (!user || !logToDelete.id) {
      setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ª–æ–≥: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –∞–±–æ ID –ª–æ–≥—É –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.");
      return;
    }

    if (window.confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ –±—É–¥–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏.")) {
      try {
        const logRef = doc(db, 'workoutLogs', logToDelete.id);
        await deleteDoc(logRef);
        setWorkoutLogs(prevLogs => prevLogs.filter(log => log.id !== logToDelete.id));
      } catch (error) {
        console.error("Error deleting workout log: ", error);
        setError("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ª–æ–≥—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.");
      }
    }
  };

  // –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è
  const handleWellnessCheckSubmit = useCallback(async (wellnessCheck: WellnessCheck) => {
    if (!userProfile || !currentWorkoutPlan || pendingWorkoutDay === null) {
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∞–±–æ –¥–µ–Ω—å.');
      setWellnessCheckModalOpen(false);
      return;
    }

    setWellnessCheckModalOpen(false);
    setIsLoading(true);
    setIsProcessingWellness(true);
    setWellnessProcessingStep('–ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤–∞—à–µ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è...');

    try {
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏ –∑–¥–æ—Ä–æ–≤'—è (–ø–∞–º'—è—Ç—å —Ç—Ä–∞–≤–º) –ø—Ä–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–æ—Ç–∞—Ç–æ–∫
      if (userProfile && wellnessCheck.notes) {
        setWellnessProcessingStep('–û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∑–¥–æ—Ä–æ–≤\'—è...');
        const newConstraints = extractConstraintsFromNotes(wellnessCheck.notes);
        if (newConstraints.length > 0) {
          const merged = Array.from(new Set([...(userProfile.healthConstraints || []), ...newConstraints]));
          const updatedProfile = { ...userProfile, healthConstraints: merged };
          await saveProfile(updatedProfile);
          setUserProfile(updatedProfile);
        }
      }
      // –ì–µ–Ω–µ—Ä—É—î–º–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
      setWellnessProcessingStep('–ê–¥–∞–ø—Ç—É—î–º–æ –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è...');
      
      let adaptiveWorkout;
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –º–µ—Ä–µ–∂–∞ –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
      if (isOnline()) {
        try {
          adaptiveWorkout = await generateNewAdaptiveWorkout(
            userProfile!,
            currentWorkoutPlan.find(d => d.day === pendingWorkoutDay) || currentWorkoutPlan[0],
            wellnessCheck,
            workoutLogs
          );
        } catch (error) {
          console.warn('‚ö†Ô∏è [APP] AI generation failed, using offline fallback:', error);
          adaptiveWorkout = null;
        }
      }
      
      // –û—Ñ–ª–∞–π–Ω fallback - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω
      if (!adaptiveWorkout) {
        console.log('üìµ [APP] Using offline fallback - original workout plan');
        const originalDay = currentWorkoutPlan.find(d => d.day === pendingWorkoutDay) || currentWorkoutPlan[0];
        adaptiveWorkout = {
          ...originalDay,
          originalPlan: originalDay, // –î–æ–¥–∞—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ
          exercises: originalDay.exercises.map(ex => ({
            ...ex,
            notes: wellnessCheck.notes ? `–°–∞–º–æ–ø–æ—á—É—Ç—Ç—è: ${wellnessCheck.notes}` : ex.notes
          }))
        };
      }
      
      setAdaptiveWorkoutPlan(adaptiveWorkout);

      // Generate wellness recommendations in background (OPTIONAL - skip if quota issues or offline)
      setWellnessProcessingStep('–ì–æ—Ç—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó...');
      (async () => {
        try {
          // Skip if offline
          if (!isOnline()) {
            console.log('üìµ [APP] Skipping wellness recommendations - offline mode');
            setWellnessRecommendations([]);
            return;
          }
          
          // Check quota before making another API call
          const { quotaManager } = await import('./utils/apiQuotaManager');
          
          if (!quotaManager.canMakeRequest()) {
            console.warn('‚ö†Ô∏è [APP] Skipping wellness recommendations due to quota limits');
            setWellnessRecommendations([]);
            return;
          }
          
          const recs = await generateWellnessRecommendations(
            userProfile,
            wellnessCheck,
            workoutLogs
          );
          setWellnessRecommendations(recs);
          
          // Show modal only if there are recommendations
          if (recs.length > 0) {
            setWellnessRecommendationsModalOpen(true);
          }
          
          await updateWellnessRecommendations(recs);
        } catch (e: any) {
          console.error('‚ùå [APP] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è (—Ñ–æ–Ω):', e);
          if (e.message && e.message.includes('429')) {
            console.log('‚ö†Ô∏è [APP] Quota exceeded during wellness recommendations - continuing without them');
          }
          // Set empty array in case of error
          setWellnessRecommendations([]);
        }
      })();

      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–º –ø–ª–∞–Ω–æ–º
      setWellnessProcessingStep('–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–ª–∞–Ω...');
      const updatedPlan = currentWorkoutPlan.map(dayPlan => 
        dayPlan.day === adaptiveWorkout.day ? adaptiveWorkout : dayPlan
      );
      setCurrentWorkoutPlan(updatedPlan);
      await saveWorkoutPlan(updatedPlan);

      // –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –°–¢–ê–†–¢–£–Ñ–ú–û –¢–†–ï–ù–£–í–ê–ù–ù–Ø
      setWellnessProcessingStep('–ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è...');
      await startWorkout(adaptiveWorkout.day, adaptiveWorkout.exercises);
      
      // –û–ù–û–í–õ–Æ–Ñ–ú–û LIVE-–°–ï–°–Ü–Æ –∑ wellnessCheck, adaptiveWorkoutPlan —Ç–∞ wellnessRecommendations
      await updateWellnessCheck(wellnessCheck);
      await updateAdaptiveWorkoutPlan(adaptiveWorkout);
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è wellnessRecommendations –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø—ñ—Å–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
      
      setPendingWorkoutDay(null);
    } catch (error: any) {
      console.error('‚ùå [APP] Error in handleWellnessCheckSubmit:', error);
      
      // Handle different types of errors with specific messages
      if (error.message) {
        // Handle quota errors
        if (error.message.includes('–ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤') || 
            error.message.includes('quota') || 
            error.message.includes('429') ||
            error.message.includes('rate limit')) {
          setError('–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç AI –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 1-2 —Ö–≤–∏–ª–∏–Ω–∏.');
        } 
        // Handle service unavailable errors
        else if (error.message.includes('service unavailable') || 
                 error.message.includes('503') || 
                 error.message.includes('overloaded')) {
          setError('–°–µ—Ä–≤—ñ—Å AI —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω.');
        }
        // Handle API key errors
        else if (error.message.includes('API_KEY') || 
                 error.message.includes('API key') || 
                 error.message.includes('authentication')) {
          setError('–ü–æ–º–∏–ª–∫–∞ API –∫–ª—é—á–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞.');
        }
        // Handle parsing errors
        else if (error.message.includes('JSON') || 
                 error.message.includes('parse') || 
                 error.message.includes('—Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏')) {
          setError('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ AI. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        }
        // Handle general AI errors
        else if (error.message.includes('AI') || 
                 error.message.includes('–∞–¥–∞–ø—Ç–∞—Ü—ñ—è') || 
                 error.message.includes('–∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π')) {
          setError('–ü–æ–º–∏–ª–∫–∞ AI –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó: ' + error.message + '. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥.');
        }
        // Handle all other errors
        else {
          setError('–ü–æ–º–∏–ª–∫–∞: ' + error.message + '. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        }
      } else {
        // –£—Å—ñ —ñ–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ - –ª–∏—à–µ AI –∞–¥–∞–ø—Ç–∞—Ü—ñ—è –¥–æ–∑–≤–æ–ª–µ–Ω–∞
        setError('–ü–æ–º–∏–ª–∫–∞ AI –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó: –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω—É.');
      }
      
      setPendingWorkoutDay(null);
    } finally {
      setIsLoading(false);
      setIsProcessingWellness(false);
      setWellnessProcessingStep('');
    }
  }, [userProfile, currentWorkoutPlan, workoutLogs, saveWorkoutPlan, pendingWorkoutDay, startWorkout, updateWellnessCheck, updateAdaptiveWorkoutPlan, updateWellnessRecommendations]);

  const handleWellnessCheckSkip = useCallback(async () => {
    if (pendingWorkoutDay === null || !currentWorkoutPlan) {
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
      setWellnessCheckModalOpen(false);
      return;
    }

    const dayPlan = currentWorkoutPlan.find(d => d.day === pendingWorkoutDay);
    if (!dayPlan) {
      setError(`–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–ª–∞–Ω –¥–ª—è –¥–Ω—è ${pendingWorkoutDay}.`);
      setWellnessCheckModalOpen(false);
      return;
    }

    setWellnessCheckModalOpen(false);
    setIsLoading(true);

    try {
      await startWorkout(dayPlan.day, dayPlan.exercises);
      setPendingWorkoutDay(null);
    } catch (error: any) {
      console.error('Error starting workout without wellness check:', error);
      setError('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  }, [pendingWorkoutDay, currentWorkoutPlan, startWorkout]);

  const renderView = () => {
    if (!user) {
      return <AuthForm />;
    }

    if (isLoading) {
      return (
        <Spinner 
          message={isProcessingWellness ? "–û–±—Ä–æ–±–ª—è—î–º–æ –≤–∞—à–µ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è..." : "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..."}
          showTimer={isProcessingWellness}
          processingStep={wellnessProcessingStep}
        />
      );
    }

    switch (currentView) {
      case 'profile':
        return (
          <div className="container mx-auto px-4 py-8">
            <div className="space-y-6">
              <UserProfileForm
                existingProfile={userProfile}
                onSave={handleProfileSave}
                onUpdateProfile={handleProfileUpdate}
                onAdaptExistingPlan={handleAdaptExistingPlan}
                hasExistingPlan={!!(currentWorkoutPlan && currentWorkoutPlan.length > 0)}
                apiKeyMissing={apiKeyMissing}
                isLoading={isLoading}
                onLogout={logout}
                onDeleteAccount={handleDeleteAccount}
              />
              {user && (
                <div className="max-w-4xl mx-auto px-4">
                  <QuotaStatus 
                    className="" 
                    showDetailed={true}
                  />
                </div>
              )}
            </div>
          </div>
        );
      case 'workout':
        return (
          <div className="container mx-auto px-4 py-8">
            <WorkoutDisplay
              workoutPlan={adaptiveWorkoutPlan ? [adaptiveWorkoutPlan] : (currentWorkoutPlan || null)}
              onStartWorkout={handleStartWorkoutWithWellnessCheck}
              onLogExercise={handleLogSingleExercise}
              onSkipExercise={handleSkipExercise}
              onUndoSkipExercise={handleUndoSkipExercise} // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –ø—Ä–æ–ø—Å
              onEndWorkout={handleEndWorkout}
              userProfile={userProfile}
              onGenerateNewPlan={handleGenerateNewPlan}
              isLoading={isLoading}
              activeDay={session.activeDay}
              sessionExercises={session.sessionExercises}
              workoutTimerDisplay={formatTime(session.workoutTimer)}
              isApiKeyMissing={apiKeyMissing}
              onSaveWorkoutPlan={handleSaveWorkoutPlan}
              exerciseRecommendations={exerciseRecommendations}
              exerciseVariations={exerciseVariations}
              onSelectVariation={handleSelectVariation}
              progressTrends={progressTrends}
              wellnessCheck={session.wellnessCheck}
              adaptiveWorkoutPlan={session.adaptiveWorkoutPlan}
              onAddExerciseClick={() => setIsAddExerciseOpen(true)}
              onReorderExercises={handleReorderExercises}
              onSaveExerciseOrder={handleSaveExerciseOrder}
            />
          </div>
        );
      case 'progress':
        return (
          <div className="container mx-auto px-4 py-8">
            <ProgressView
              workoutLogs={workoutLogs}
              onAnalyzeWorkout={handleAnalyzeWorkoutFromLog}
              onDeleteLog={handleDeleteLog}
              isAnalyzing={isAnalyzing}
              analyzingLogId={analyzingLogId}
              exerciseRecommendations={exerciseRecommendations}
              progressTrends={progressTrends}
              onGenerateNewPlan={handleGenerateNewPlan}
            />
          </div>
        );
      default:
        return null;
    }
  };

  if (loading) {
    return <div className="flex items-center justify-center min-h-screen bg-black text-xl text-readable accent-glow">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...</div>;
  }

  return (
    <div className="min-h-screen flex flex-col bg-gradient-black-glow">
      {/* –û—Ñ–ª–∞–π–Ω –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è */}
      {!isNetworkOnline && (
        <div className="bg-black text-white px-2 py-1 text-center text-sm">
          <div className="flex items-center justify-center space-x-2">
            <i className="fas fa-wifi-slash text-gold"></i>
            <span>–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º</span>
          </div>
        </div>
      )}
      
      <header className="header-animated p-3 sm:p-4 sticky top-0 z-50 border-b border-fitness-gold-600/30">
        <div className="container mx-auto flex flex-col sm:flex-row justify-between items-center">
          <div className="flex items-center space-x-4 mb-2 sm:mb-0">
            <h1 className="text-xl sm:text-2xl lg:text-3xl font-bold flex items-center">
              <i className="fas fa-dumbbell mr-2 icon-glow"></i>
              <span className="title-shimmer">{UI_TEXT.appName}</span>
            </h1>
            {user && <QuotaStatus className="" />}
            {/* –°–∏—Å—Ç–µ–º–Ω–∞ –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å—É –≤ —à–∞–ø—Ü—ñ */}
            <SystemStatusBar isNetworkOnline={isNetworkOnline} />
          </div>
          {(userProfile || isLoading || session.activeDay !== null) &&  // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é —è–∫—â–æ —î –ø—Ä–æ—Ñ—ñ–ª—å, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–±–æ –∞–∫—Ç–∏–≤–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            <Navbar currentView={currentView} onViewChange={(v) => {
              if (session.activeDay !== null && v !== 'workout') { // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ session.activeDay
                if(!confirm(UI_TEXT.confirmEndWorkout + " –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —ñ–Ω—à—É –≤–∫–ª–∞–¥–∫—É –∑–∞–≤–µ—Ä—à–∏—Ç—å –π–æ–≥–æ –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤.")) return;
                endWorkout(); // –ó–∞–≤–µ—Ä—à—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é Firebase
              }
              setCurrentView(v);
            }} />
          }
        </div>
      </header>

      <main className="flex-grow container mx-auto p-3 sm:p-4 md:p-6 content-glow">
        {error && !isLoading && <ErrorMessage message={error} onClear={() => setError(null)} />}
         {renderView()}
        {/* –ü–ª–∞–≤–∞—é—á–∞ –∫–Ω–æ–ø–∫–∞ —á–∞—Ç—É (–≤–∏–¥–∏–º–∞ –ª–∏—à–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –Ω–∞ –≤—Å—ñ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö –∫—Ä—ñ–º –ø—Ä–æ—Ñ—ñ–ª—é) */}
        {user && currentView !== 'profile' && (
          <button
            className="btn-primary fixed bottom-6 right-6 z-50 rounded-full p-4 flex items-center justify-center text-2xl accent-glow"
            onClick={() => setIsTrainerChatOpen(true)}
            aria-label="–í—ñ–¥–∫—Ä–∏—Ç–∏ —á–∞—Ç –∑ —Ç—Ä–µ–Ω–µ—Ä–æ–º"
          >
            <i className="fas fa-comments"></i>
          </button>
        )}
        {/* Overlay —á–∞—Ç –∑ —Ç—Ä–µ–Ω–µ—Ä–æ–º (–¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º) */}
        {user && isTrainerChatOpen && (
          <div className="fixed inset-0 z-50 flex items-end sm:items-center justify-center p-4 sm:p-6">
            {/* Backdrop */}
            <div 
              className="absolute inset-0 bg-black/50 backdrop-blur-sm"
              onClick={() => setIsTrainerChatOpen(false)}
            />
            {/* Chat container */}
            <div className="card relative w-full max-w-md sm:max-w-lg h-[80vh] sm:h-[70vh] flex flex-col overflow-hidden">
              <div className="flex justify-between items-center p-3 sm:p-4 border-b border-fitness-gold-600/30 bg-gradient-gold-dark rounded-t-xl">
                <span className="text-lg font-semibold text-readable"><i className="fas fa-robot mr-2 text-fitness-gold-400 accent-glow"></i>–ß–∞—Ç –∑ —Ç—Ä–µ–Ω–µ—Ä–æ–º</span>
                <button onClick={() => setIsTrainerChatOpen(false)} className="text-fitness-gold-400 hover:text-fitness-gold-200 text-xl transition-colors interactive-glow" aria-label="–ó–∞–∫—Ä–∏—Ç–∏ —á–∞—Ç">
                  <i className="fas fa-times"></i>
                </button>
              </div>
              <div className="flex-1 min-h-0">
                <TrainerChat
                  userProfile={userProfile!}
                  currentWorkoutPlan={currentWorkoutPlan}
                  activeDay={session.activeDay}
                  onWorkoutPlanModified={async (modifiedPlan) => {
                    if (!currentWorkoutPlan) return;
                    
                    // Update the current workout plan
                    const updatedPlan = currentWorkoutPlan.map(day => 
                      day.day === modifiedPlan.day ? modifiedPlan : day
                    );
                    
                    setCurrentWorkoutPlan(updatedPlan);
                    await saveWorkoutPlan(updatedPlan);
                    
                    // If currently in an active workout, update session exercises
                    if (session.activeDay === modifiedPlan.day) {
                      updateExerciseOrder(modifiedPlan.exercises);
                    }
                  }}
                />
              </div>
            </div>
          </div>
        )}
      </main>

      <footer className="bg-fitness-dark-800/60 backdrop-blur-sm text-center p-3 sm:p-4 text-xs sm:text-sm text-muted mt-auto border-t border-fitness-gold-600/30 interactive-glow">
        ¬© {new Date().getFullYear()} {UI_TEXT.appName}. –£—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω–æ.
      </footer>

      {/* –ú–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞ */}
      <WellnessCheckModal
        isOpen={wellnessCheckModalOpen}
        onClose={() => setWellnessCheckModalOpen(false)}
        onSubmit={handleWellnessCheckSubmit}
        onSkip={handleWellnessCheckSkip}
      />

      {wellnessRecommendationsModalOpen && (
        <WellnessRecommendations
          recommendations={wellnessRecommendations}
          onClose={() => setWellnessRecommendationsModalOpen(false)}
        />
      )}

      <WorkoutCompleteModal
        isOpen={isWorkoutCompleteModalOpen}
        onClose={() => {
          setIsWorkoutCompleteModalOpen(false);
          setCurrentView('progress');
        }}
      />

      <AddExerciseModal
        isOpen={isAddExerciseOpen}
        onClose={() => setIsAddExerciseOpen(false)}
        onAdd={async (exercise) => {
          await addCustomExercise(exercise);
          setIsAddExerciseOpen(false);
          // –ó–∞–ø–∏—Ç–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: —á–∏ –∑–±–µ—Ä–µ–≥—Ç–∏ –≤–ø—Ä–∞–≤—É –¥–æ –ø–ª–∞–Ω—É –¥–Ω—è –Ω–∞ –º–∞–π–±—É—Ç–Ω—î
          if (currentWorkoutPlan && session.activeDay !== null) {
            const shouldPersist = window.confirm('–ó–±–µ—Ä–µ–≥—Ç–∏ —Ü—é –≤–ø—Ä–∞–≤—É –¥–æ –ø–ª–∞–Ω—É –Ω–∞ —Ü–µ–π –¥–µ–Ω—å –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å?');
            if (shouldPersist) {
              const newPlan = currentWorkoutPlan.map((day) => {
                if (day.day !== session.activeDay) return day;
                // –£–Ω–∏–∫–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∑–∞ –Ω–∞–∑–≤–æ—é
                const exists = day.exercises.some((ex) => ex.name === exercise.name);
                return exists ? day : { ...day, exercises: [...day.exercises, exercise] };
              });
              setCurrentWorkoutPlan(newPlan);
              await saveWorkoutPlan(newPlan);
            }
          }
        }}
      />

      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É */}
      <UpdateNotification onUpdate={handleAppUpdate} />
      
      {/* –°—Ç–∞—Ä—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Ç–µ–ø–µ—Ä —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω—ñ –≤ SystemStatusBar */}
    </div>
  );
};

export default App;